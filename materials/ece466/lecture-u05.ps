%!PS-Adobe-3.0
%%Creator: groff version 1.22.2
%%CreationDate: Tue Mar 26 23:36:18 2019
%%DocumentNeededResources: font Times-Roman
%%+ font Times-Bold
%%+ font Courier
%%+ font Times-Italic
%%DocumentSuppliedResources: file loops.eps
%%+ file signed.eps
%%+ file ifelse.eps
%%+ file mdarray.eps
%%+ procset grops 1.22 2
%%Pages: 35
%%PageOrder: Ascend
%%DocumentMedia: Default 612 792 0 () ()
%%Orientation: Portrait
%%EndComments
%%BeginDefaults
%%PageMedia: Default
%%EndDefaults
%%BeginProlog
%%BeginResource: procset grops 1.22 2
%!PS-Adobe-3.0 Resource-ProcSet
/setpacking where{
pop
currentpacking
true setpacking
}if
/grops 120 dict dup begin
/SC 32 def
/A/show load def
/B{0 SC 3 -1 roll widthshow}bind def
/C{0 exch ashow}bind def
/D{0 exch 0 SC 5 2 roll awidthshow}bind def
/E{0 rmoveto show}bind def
/F{0 rmoveto 0 SC 3 -1 roll widthshow}bind def
/G{0 rmoveto 0 exch ashow}bind def
/H{0 rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/I{0 exch rmoveto show}bind def
/J{0 exch rmoveto 0 SC 3 -1 roll widthshow}bind def
/K{0 exch rmoveto 0 exch ashow}bind def
/L{0 exch rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/M{rmoveto show}bind def
/N{rmoveto 0 SC 3 -1 roll widthshow}bind def
/O{rmoveto 0 exch ashow}bind def
/P{rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/Q{moveto show}bind def
/R{moveto 0 SC 3 -1 roll widthshow}bind def
/S{moveto 0 exch ashow}bind def
/T{moveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/SF{
findfont exch
[exch dup 0 exch 0 exch neg 0 0]makefont
dup setfont
[exch/setfont cvx]cvx bind def
}bind def
/MF{
findfont
[5 2 roll
0 3 1 roll
neg 0 0]makefont
dup setfont
[exch/setfont cvx]cvx bind def
}bind def
/level0 0 def
/RES 0 def
/PL 0 def
/LS 0 def
/MANUAL{
statusdict begin/manualfeed true store end
}bind def
/PLG{
gsave newpath clippath pathbbox grestore
exch pop add exch pop
}bind def
/BP{
/level0 save def
1 setlinecap
1 setlinejoin
DEFS/BPhook known{DEFS begin BPhook end}if
72 RES div dup scale
LS{
90 rotate
}{
0 PL translate
}ifelse
1 -1 scale
}bind def
/EP{
level0 restore
showpage
}def
/DA{
newpath arcn stroke
}bind def
/SN{
transform
.25 sub exch .25 sub exch
round .25 add exch round .25 add exch
itransform
}bind def
/DL{
SN
moveto
SN
lineto stroke
}bind def
/DC{
newpath 0 360 arc closepath
}bind def
/TM matrix def
/DE{
TM currentmatrix pop
translate scale newpath 0 0 .5 0 360 arc closepath
TM setmatrix
}bind def
/RC/rcurveto load def
/RL/rlineto load def
/ST/stroke load def
/MT/moveto load def
/CL/closepath load def
/Fr{
setrgbcolor fill
}bind def
/setcmykcolor where{
pop
/Fk{
setcmykcolor fill
}bind def
}if
/Fg{
setgray fill
}bind def
/FL/fill load def
/LW/setlinewidth load def
/Cr/setrgbcolor load def
/setcmykcolor where{
pop
/Ck/setcmykcolor load def
}if
/Cg/setgray load def
/RE{
findfont
dup maxlength 1 index/FontName known not{1 add}if dict begin
{
1 index/FID ne
2 index/UniqueID ne
and
{def}{pop pop}ifelse
}forall
/Encoding exch def
dup/FontName exch def
currentdict end definefont pop
}bind def
/DEFS 0 def
/EBEGIN{
moveto
DEFS begin
}bind def
/EEND/end load def
/CNT 0 def
/level1 0 def
/PBEGIN{
/level1 save def
translate
div 3 1 roll div exch scale
neg exch neg exch translate
0 setgray
0 setlinecap
1 setlinewidth
0 setlinejoin
10 setmiterlimit
[]0 setdash
/setstrokeadjust where{
pop
false setstrokeadjust
}if
/setoverprint where{
pop
false setoverprint
}if
newpath
/CNT countdictstack def
userdict begin
/showpage{}def
/setpagedevice{}def
mark
}bind def
/PEND{
cleartomark
countdictstack CNT sub{end}repeat
level1 restore
}bind def
end def
/setpacking where{
pop
setpacking
}if
%%EndResource
%%EndProlog
%%BeginSetup
%%BeginFeature: *PageSize Default
<< /PageSize [ 612 792 ] /ImagingBBox null >> setpagedevice
%%EndFeature
%%IncludeResource: font Times-Roman
%%IncludeResource: font Times-Bold
%%IncludeResource: font Courier
%%IncludeResource: font Times-Italic
grops begin/DEFS 1 dict def DEFS begin/u{.001 mul}bind def end/RES 72
def/PL 792 def/LS false def/ENC0[/asciicircum/asciitilde/Scaron/Zcaron
/scaron/zcaron/Ydieresis/trademark/quotesingle/Euro/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/space/exclam/quotedbl/numbersign/dollar/percent
/ampersand/quoteright/parenleft/parenright/asterisk/plus/comma/hyphen
/period/slash/zero/one/two/three/four/five/six/seven/eight/nine/colon
/semicolon/less/equal/greater/question/at/A/B/C/D/E/F/G/H/I/J/K/L/M/N/O
/P/Q/R/S/T/U/V/W/X/Y/Z/bracketleft/backslash/bracketright/circumflex
/underscore/quoteleft/a/b/c/d/e/f/g/h/i/j/k/l/m/n/o/p/q/r/s/t/u/v/w/x/y
/z/braceleft/bar/braceright/tilde/.notdef/quotesinglbase/guillemotleft
/guillemotright/bullet/florin/fraction/perthousand/dagger/daggerdbl
/endash/emdash/ff/fi/fl/ffi/ffl/dotlessi/dotlessj/grave/hungarumlaut
/dotaccent/breve/caron/ring/ogonek/quotedblleft/quotedblright/oe/lslash
/quotedblbase/OE/Lslash/.notdef/exclamdown/cent/sterling/currency/yen
/brokenbar/section/dieresis/copyright/ordfeminine/guilsinglleft
/logicalnot/minus/registered/macron/degree/plusminus/twosuperior
/threesuperior/acute/mu/paragraph/periodcentered/cedilla/onesuperior
/ordmasculine/guilsinglright/onequarter/onehalf/threequarters
/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE
/Ccedilla/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex
/Idieresis/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis
/multiply/Oslash/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn
/germandbls/agrave/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla
/egrave/eacute/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis
/eth/ntilde/ograve/oacute/ocircumflex/otilde/odieresis/divide/oslash
/ugrave/uacute/ucircumflex/udieresis/yacute/thorn/ydieresis]def
/Times-Italic@0 ENC0/Times-Italic RE/Courier@0 ENC0/Courier RE
/Times-Bold@0 ENC0/Times-Bold RE/Times-Roman@0 ENC0/Times-Roman RE
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
BP
%%EndPageSetup
/F0 9/Times-Roman@0 SF 122.742(ECE466:Compilers Unit)69.336 60 R(5/pg 1)
2.25 E(\2512019 Jef)126.405 E 2.25(fH)-.225 G(akner)-2.25 E/F1 13
/Times-Bold@0 SF(Intermediate Repr)184.955 120 Q(esentations)-.234 E/F2
13/Times-Roman@0 SF 2.835(An Intermediate Representation \(IR\) is an)
33.336 156 R 6.085(yi)-.195 G 2.835(nternal or e)-6.085 F 2.835
(xternal representation of the)-.195 F
(source program which is complete and neither in source nor tar)33.336
171 Q(get form.)-.234 E 3.113(Early in the history of computing, compil\
ers were generally designed as "one-pass")33.336 201 R .893
(compilers, meaning the)33.336 216 R 4.143(yw)-.195 G .893
(ould emit the tar)-4.273 F .893
(get code directly as the source language w)-.234 F(as)-.13 E 3.582
(recognized. This)33.336 231 R .332(eliminated the need for lar)3.582 F
.333(ge amounts of memory or disk space to store)-.234 F 2.099(the IR.)
33.336 246 R(Man)8.599 E 5.349(yl)-.195 G 2.098
(anguages can be successfully compiled one-pass, including C \(at least)
-5.349 F(original C, not so much modern C\).)33.336 261 Q(Ho)33.336 282
Q(we)-.325 E -.195(ve)-.325 G 4.158 -.52(r, s).195 H 3.118
(uch an approach results in v).52 F 3.118(ery poor output code quality)
-.195 F 6.368(,a)-.845 G 6.368(st)-6.368 G 3.119(here is no)-6.368 F
.649(opportunity to re-e)33.336 297 R .649
(xamine the code for optimizations.)-.195 F .649(The output code follo)
7.149 F .649(ws the input)-.325 F .272
(code structure directly as it is parsed.)33.336 312 R .272
(One-pass compilers are limited to v)6.772 F .272(ery constrained)-.195
F(en)33.336 327 Q .979(vironments, e.g.)-.52 F 4.229(ac)7.479 G .978
(ompiler which must run within an embedded de)-4.229 F 4.228(vice. All)
-.325 F(modern)4.228 E 5.237(host-based compilers use one or more)33.336
342 R F1 5.238(intermediate r)8.488 F(epr)-.234 E 5.238
(esentations \(IR\))-.234 F F2(which)8.488 E(progressi)33.336 357 Q
-.195(ve)-.325 G(ly transform the source code to the tar).195 E
(get code.)-.234 E 1.198
(The IR of the program is subjected to multiple optimization passes.)
33.336 378 R 1.198(The optimizers re-)7.698 F .976(write the IR code.)
33.336 393 R .977(Depending on the design of the compiler)7.476 F 4.227
(,d)-.52 G(if)-4.227 E .977(ferent IR forms may be)-.325 F .394
(used for dif)33.336 408 R .394(ferent passes.)-.325 F .394
(After the last optimizer)6.894 F 3.644(,t)-.52 G .394
(he \214nal IR is used as the input for the)-3.644 F F1(tar)33.336 423 Q
(get code generation)-.13 E F2(process.)3.25 E .353
(There is no one "right answer" when designing an IR strate)33.336 444 R
(gy)-.195 E 6.854(.S)-.845 G .354(ome of the decisions the)-6.854 F
2.962(compiler writer will f)33.336 459 R 2.962
(ace hinge on the nature and e)-.13 F 2.961
(xtent of architecture-independent)-.195 F .992
(optimization which will tak)33.336 474 R 4.242(ep)-.13 G .993
(lace after IR emission, on the nature and v)-4.242 F .993
(ariety of back-)-.325 F .536(ends which need to be supported, and the \
nature of the source language and the run-time)33.336 489 R(en)33.336
504 Q(vironment.)-.52 E F1(Uses of IR)238.814 534 Q F2 1.186
(In some compilation frame)33.336 570 R -.13(wo)-.325 G 1.187
(rks, there is an e).13 F 1.187
(xternally visible form of IR, which has a)-.195 F 1.281
(standardized representation.)33.336 585 R 1.281
(But in others, the IR is strictly internal to the compiler)7.781 F
7.781(.I)-.715 G(t)-7.781 E -.195(ex)33.336 600 S(ists in memory b).195
E(ut is ne)-.26 E -.195(ve)-.325 G 3.25(rw).195 G(ritten to disk, e)
-3.25 E(xcept for deb)-.195 E(ugging purposes.)-.26 E .418(In tradition\
al compilers such as gcc, the structure is frontend -> IR -> arch-neutr\
al opt ->)33.336 621 R(asssembly gen -> os-pro)33.336 636 Q
(vided assembler -> os-pro)-.195 E(vided link)-.195 E(er -> a.out)-.13 E
.5(This allo)33.336 666 R .5(ws a cross-plugg)-.325 F .5(able compiler)
-.065 F 3.75(,w)-.52 G .499(here dif)-3.75 F .499
(ferent front ends \(e.g. C, C++, F)-.325 F(ortran\))-.195 E .135
(compile to a common IR, and the same optimizers can be used re)33.336
681 R -.065(ga)-.195 G .135(rdless of the source or).065 F(the tar)
33.336 696 Q(get languages.)-.234 E 1.502(In the LL)33.336 717 R 1.502
(VM \()-1.3 F/F3 13/Courier@0 SF(http://www.llvm.org)A F2 4.752(\)c)C
1.502(ompilation frame)-4.752 F -.13(wo)-.325 G 1.501
(rk, the IR is meant to).13 F 4.901(be e)33.336 732 R 4.901
(xternalizable, with a)-.195 F F3(.llvm)8.151 E F2 4.901(\214lename e)
8.151 F 8.151(xtension. Thus)-.195 F 4.901(llvm can replace the)8.151 F
0 Cg EP
%%Page: 2 2
%%BeginPageSetup
BP
%%EndPageSetup
/F0 9/Times-Roman@0 SF 140.742(ECE466:Compilers Unit)33.336 60 R(5/pg 2)
2.25 E(\2512019 Jef)144.405 E 2.25(fH)-.225 G(akner)-2.25 E/F1 13
/Times-Roman@0 SF .366(traditional object \214les \(.o\) and no)33.336
120 R 3.616(wt)-.325 G .366(he link)-3.616 F(er)-.13 E 3.616(,i)-.52 G
.365(nstead of being the system link)-3.616 F .365(er \(ld\), is a)-.13
F(link)33.336 135 Q .242(er which understands LL)-.13 F 3.492(VM. An)
-1.3 F .242(important bene\214t of this approach is it allo)3.492 F .242
(ws inter)-.325 F(-)-.26 E 5.466(procedural optimizations, also kno)
33.336 150 R 5.466(wn as Link-T)-.325 F 5.466(ime Optimization \(L)-.455
F -.234(TO)-1.196 G 8.715(\). In).234 F(this)8.715 E 1.583
(approach, the \214nal llvm code is then assembled, link)33.336 165 R
1.583(ed with an)-.13 F 4.833(yn)-.195 G 1.583(on-llvm object \214les,)
-4.833 F(and produces an a.out \214le.)33.336 180 Q 4.828(In man)33.336
201 R 8.078(ys)-.195 G 4.828(ystems, the IR is e)-8.078 F -.195(xe)-.195
G 4.828(cuted directly by an IR interpreter and run-time).195 F(en)
33.336 216 Q 3.517(vironment. Ja)-.52 F .917 -.325(va i)-.26 H 3.517
(sap).325 G .267(opular e)-3.517 F .268
(xample of a language which is compiled to an e)-.195 F(xternally)-.195
E 1.234(standardized IR kno)33.336 231 R 1.234(wn as Ja)-.325 F 1.884
-.325(va V)-.26 H 1.234(irtual Machine \(JVM\) bytecode.)-.455 F 1.234
(The bytecode can be)7.734 F -.195(exe)33.336 246 S(cuted on an).195 E
3.25(ys)-.195 G(ystem, re)-3.25 E -.065(ga)-.195 G(rdless of nati).065 E
.39 -.195(ve a)-.325 H(rchitecture.).195 E .441
(Another possibility with e)33.336 267 R .441
(xternal IR is so-called Just In T)-.195 F .441
(ime \(JIT\) compilation, which is)-.455 F 4.134(really a misnomer)
33.336 282 R 10.634(.I)-.715 G 7.384(ti)-10.634 G 4.134(s, in f)-7.384 F
4.134(act, a deferred tar)-.13 F 4.134
(get code generation, in which the)-.234 F 3.304
(architecture-neutral IR is "compiled" to the tar)33.336 297 R 3.305
(get assembly/machine code when the)-.234 F 2.382(program is e)33.336
312 R -.195(xe)-.195 G 5.631(cuted. This).195 F(allo)5.631 E 2.381
(ws the program to be shipped in semi-compiled form,)-.325 F 1.874
(retaining the cross-tar)33.336 327 R 1.874(get portability)-.234 F
5.124(,b)-.845 G 1.875(ut still producing run-time e)-5.384 F -.195(xe)
-.195 G 1.875(cution speeds that).195 F
(are equal to traditionally compiled systems.)33.336 342 Q .459
(Popular interpreted languages such as Perl, PHP and Python are in f)
33.336 363 R .459(act semi-compiled to)-.13 F 2.211
(an IR which is then e)33.336 378 R -.195(xe)-.195 G 2.211
(cuted within the run-time frame).195 F -.13(wo)-.325 G 5.461(rk. Here)
.13 F 2.211(are some details:)5.461 F .693(Python source code in)33.336
393 R/F2 13/Courier@0 SF(.py)3.943 E F1 .693
(\214les is \214rst "compiled" into a bytecode representation which)
3.943 F .683(is stored in)33.336 408 R F2(.pyc)3.933 E F1 3.933
(\214les. This)3.933 F .684(happens the \214rst time the script is in)
3.933 F -.26(vo)-.52 G -.13(ke).26 G .684(d, or if the source).13 F .705
(code \214les ha)33.336 423 R 1.094 -.195(ve c)-.26 H 3.954
(hanged. Thereafter).195 F 3.954(,t)-.52 G .704
(he bytecode \214les are loaded directly)-3.954 F 3.954(,w)-.845 G .704
(hich speeds)-3.954 F 5.57(the script start-up process.)33.336 438 R
5.571(The Python bytecode is a one-address \(stack-based\))12.07 F 3.483
(architecture. The)33.336 453 R .233(format of the)3.483 F F2(.pyc)3.483
E F1 .233(bytecode is documented and is e)3.483 F .233
(xternalized, thus it)-.195 F 1.154
(satis\214es our de\214nition of an e)33.336 468 R 1.154
(xternal, portable IR.)-.195 F 1.154(This code is e)7.654 F -.195(xe)
-.195 G 1.155(cuted by the Python).195 F .697(run-time engine.)33.336
483 R .697
(Because the compiler is also resident with the run-time engine, Python)
7.197 F .011(can act as a true interpreter and accept ne)33.336 498 R
3.261(wp)-.325 G .012(ython code as input data.)-3.391 F .012
(PHP is designed to)6.512 F 2.719
(run primarily as an embedded interpreter in web serv)33.336 513 R 2.719
(er programs such as apache or)-.195 F 1.53
(nginx, although it can be run stand-alone.)33.336 528 R 1.53
(Its intermediate language is kno)8.03 F 1.53(wn as Zend)-.325 F 1.225
(and it is strictly internal.)33.336 543 R 1.224(PHP also pro)7.725 F
1.224(vides an API in which code written in C can be)-.195 F .247
(dynamically loaded into the PHP interpreter as it is running.)33.336
558 R .247(This is kno)6.747 F .247(wn as "modules")-.325 F 1.223(and r\
equires that all of the items of the PHP language also be visible as da\
ta structures)33.336 573 R 6.691(and/or function calls from C.)33.336
588 R 6.692(ZEND is a 3-address \("quads"\) based internal)13.191 F
2.943(representation \(see belo)33.336 603 R 6.193(w\). Each)-.325 F
2.942(function or method is "compiled" into an array of)6.193 F 3.25
(quads. F)33.336 618 R(or e)-.195 E
(xample, these snippets from the PHP source code:)-.195 E/F3 8/Courier@0
SF 1.2(from Zend/zend_language_parser.y:)45.936 630 S 1.2(expr:)33.936
642 S 1.2(/*....*/)81.936 654 S 43.2(|e)81.936 666 S 1.2(xpr '+' expr)
-42 G 7.2({z)18 G 1.2(end_do_binary_op\(ZEND_ADD, &$$, &$1, &$3\); })-6
G 43.2(|e)81.936 678 S 1.2(xpr '-' expr)-42 G 7.2({z)18 G 1.2
(end_do_binary_op\(ZEND_SUB, &$$, &$1, &$3\); })-6 G 43.2(|e)81.936 690
S 1.2(xpr '*' expr)-42 G 7.2({z)18 G 1.2
(end_do_binary_op\(ZEND_MUL, &$$, &$1, &$3\); })-6 G 1.2(/*...*/)81.936
702 S 1.2(from Zend/zend_compile.c:)45.936 726 S 1.2(void zend_do_binar\
y_op\(zend_uchar op, znode *result, znode *op1, znode *op2\))33.936 738
S 0 Cg EP
%%Page: 3 3
%%BeginPageSetup
BP
%%EndPageSetup
/F0 9/Times-Roman@0 SF 140.742(ECE466:Compilers Unit)33.336 60 R(5/pg 3)
2.25 E(\2512019 Jef)144.405 E 2.25(fH)-.225 G(akner)-2.25 E/F1 8
/Courier@0 SF({)33.936 117 Q 1.2
(zend_op *opline = get_next_op\(CG\(active_op_array\) \);)81.936 129 S
1.2(opline->opcode = op;)81.936 153 S 1.2
(opline->result.op_type = IS_TMP_VAR;)81.936 165 S 1.2(opline->result.u\
.var = get_temporary_variable\(CG\(active_op_array\)\);)81.936 177 S 1.2
(opline->op1 = *op1;)81.936 189 S 1.2(opline->op2 = *op2;)81.936 201 S
1.2(*result = opline->result;)81.936 213 S(})33.936 225 Q/F2 13
/Times-Roman@0 SF(should be recognizable as quad generating \(or will b\
e, after reading this unit\).)33.336 240 Q 1.025
(Perl is also a pure interpreter and is designed to w)33.336 261 R 1.026
(ork stand-alone, or be embedded into)-.13 F 3.921(other programs.)
33.336 276 R 3.921
(It uses an internal representation which can best be described as)
10.421 F 5.079(graphical. The)33.336 291 R(comple)5.079 E 5.079(xA)-.195
G 1.83(ST data structure which is created during the parsing phase)
-5.079 F 1.341(remains resident and is e)33.336 306 R -.195(xe)-.195 G
1.341(cuted directly).195 F 7.841(.P)-.845 G 1.341
(erl is also designed to be interf)-7.841 F 1.34(aced with C)-.13 F .641
(and publishes an API for its internals.)33.336 321 R(Ne)7.142 E .642
(wer v)-.325 F .642(ersions of Perl ha)-.195 F 1.032 -.195(ve s)-.26 H
.642(upport for dumping).195 F 2.008
(this internal data structure into an e)33.336 336 R 2.008
(xternal "bytecode" form, \(which is some)-.195 F 2.008(what of a)-.325
F(misnomer)33.336 351 Q 5.024(,a)-.52 G 5.024(si)-5.024 G 5.024(ti)
-5.024 G 5.024(sm)-5.024 G 1.774
(ore of memory dump of the AST\) and using that to speed up the)-5.024 F
(initial script loading and parsing time.)33.336 366 Q/F3 13
/Times-Bold@0 SF(IR F)240.601 381 Q(orms)-.325 E F2 .163(The tw)33.336
417 R 3.413(ob)-.13 G .163(asic forms of IR are graphical vs linear)
-3.413 F 6.663(.A)-.715 G .163(graphical IR is a directed graph data)
-3.25 F 1.451(structure, i.e. one with a speci\214c root representing t\
he entire program \(or some portion)33.336 432 R 1.382(thereof\), nodes\
 representing abstract operations, and edges \(pointers\) linking nodes\
 and)33.336 447 R -.325(va)33.336 462 S 4.138(lues. A).325 F .888
(tangible e)4.138 F .888
(xample of a graphical IR is the Abstract Syntax T)-.195 F .888
(ree representation)-.455 F .456(which w)33.336 477 R .456
(as demonstrated in class and in pre)-.13 F .456
(vious units for encoding type information.)-.325 F(In)6.956 E .701(con\
trast, a linear IR more closely resembles assembly language, in that it\
 is a simple list)33.336 492 R(of operations.)33.336 507 Q .579
(In real-w)33.336 528 R .579(orld compilers, neither form is used e)-.13
F(xclusi)-.195 E -.195(ve)-.325 G(ly).195 E 7.079(.I)-.845 G 3.829(ti)
-7.079 G 3.829(sc)-3.829 G .579(ommon to \214nd graphical)-3.829 F 1.335
(IRs such as ASTs to represent types and e)33.336 543 R 1.336
(xpressions, especially in the earlier stages of)-.195 F .271
(compilation, and a series of linear IRs which mak)33.336 558 R 3.521
(ep)-.13 G .271(rogress to)-3.521 F -.13(wa)-.325 G .271
(rds the \214nal tar).13 F .271(get code.)-.234 F .033(Often, these lin\
ear IRs are augmented by graphs which track information such as data an\
d)33.336 573 R(control \215o)33.336 588 Q -.845(w.)-.325 G 2.031
(Almost all popular e)33.336 609 R 2.031(xternal IR forms are linear)
-.195 F 5.281(,b)-.52 G 2.031(ecause of the dif)-5.281 F 2.031
(\214culty of concisely)-.325 F(encoding and representing graphs e)
33.336 624 Q(xternally)-.195 E(.)-.845 E F3 -.325(Fo)213.158 654 S
(rms of Linear IR).325 E F2 3.76(Al)33.336 690 S .51(inear IR can be th\
ought of as a sequence of assembly language instructions in a f)-3.76 F
(airly)-.13 E 2.005(abstract machine.)33.336 705 R 2.005
(This machine tends to be more generic and more po)8.505 F 2.005
(werful than an)-.325 F .798(actual processor)33.336 720 R 7.299(.D)
-.715 G .799(uring optimization, higher)-7.299 F(-le)-.26 E -.195(ve)
-.325 G 4.049(lI).195 G 4.049(Rf)-4.049 G .799(orms tend to be more e)
-4.049 F(xpressi)-.195 E -.195(ve)-.325 G 2.881(and allo)33.336 735 R
6.131(wt)-.325 G 2.881(he optimizer to g)-6.131 F 2.88
(ain a better understanding of the code and mak)-.065 F 6.13(eb)-.13 G
(etter)-6.13 E 0 Cg EP
%%Page: 4 4
%%BeginPageSetup
BP
%%EndPageSetup
/F0 9/Times-Roman@0 SF 140.742(ECE466:Compilers Unit)33.336 60 R(5/pg 4)
2.25 E(\2512019 Jef)144.405 E 2.25(fH)-.225 G(akner)-2.25 E/F1 13
/Times-Roman@0 SF 4.878(optimizations. On)33.336 120 R 1.628
(the other hand, the IR can not be too comple)4.878 F 1.629
(x, otherwise it will be)-.195 F(dif)33.336 135 Q 1.358
(\214cult to generate ef)-.325 F 1.358(\214cient tar)-.325 F 1.358
(get assembly code from it.)-.234 F 1.357(Striking a balance is not an)
7.857 F -.195(ex)33.336 150 S(act science.).195 E/F2 13/Times-Bold@0 SF
(Stack-based IR)224.904 180 Q F1 2.769(One popular linear IR is)33.336
216 R F2(one-addr)6.019 E 2.769(ess code)-.234 F F1 6.019(,a)C 2.769
(lso kno)-6.019 F 2.769(wn as)-.325 F F2 2.769(stack machine code)6.019
F F1 9.269(.I)C(t)-9.269 E 3.645(represents an abstract virtual machine\
 in which there is a single stack of virtually)33.336 231 R 1.56
(unlimited size.)33.336 246 R 1.561(The elements of the stack may be of\
 a single, simple type \(e.g. 8 byte)8.06 F(inte)33.336 261 Q .029
(gers\) or the)-.195 F 3.279(ym)-.195 G .028
(ay be polymorphic \(each stack element has both a type and a v)-3.279 F
.028(alue, the)-.325 F 2.702(representation and bounds of which depend \
on the type\) Each operation of the one-)33.336 276 R 1.092(address lin\
ear IR contains an operation code and a single optional parameter \(hen\
ce the)33.336 291 R 3.847(name\). All)33.336 306 R .597(data \215o)3.847
F 3.847(wt)-.325 G(ak)-3.847 E .597(es place through the stack.)-.13 F
.597(In addition to the stack, there has to)7.097 F 2.111(be a w)33.336
321 R 2.11(ay to refer to the instructions \(a virtual program counter\
\) so that branches can)-.13 F(occur)33.336 336 Q 5.603(,a)-.52 G 2.354
(nd it is useful to ha)-5.603 F 2.744 -.195(ve a n)-.26 H 2.354
(otion of named v).195 F 2.354(ariables \(although lacking that all)
-.325 F -.325(va)33.336 351 S
(riables could be allocated from the stack at start-up\).).325 E 1.431
(The primary adv)33.336 372 R 1.431
(antage of using a one-address code is simplicity)-.325 F 7.931(.N)-.845
G 1.431(ot ha)-7.931 F 1.431(ving to w)-.26 F(orry)-.13 E 1.545
(about intermediate v)33.336 387 R 1.546(alues and re)-.325 F 1.546
(gister allocation mak)-.195 F 1.546(es it easy to generate one-address)
-.13 F .323(code during parsing, in f)33.336 402 R .322
(act it lends itself well to simple, one-pass compilation.)-.13 F .322
(The one-)6.822 F 3.652
(address code is also easy to write an interpreter for)33.336 417 R
6.902(,m)-.52 G 3.652(aking it a good choice for)-6.902 F .556(architec\
ture- independent bytecode forms and for small, embedded compiler/inter\
preters.)33.336 432 R 3.739(One-address code does not lend itself readi\
ly to code generation for most modern)33.336 447 R 4.222
(processors. That)33.336 462 R .971(being said, a lot of w)4.222 F .971
(ork has been done recently on one-address codes)-.13 F .328
(\(stack-based machines\) because both Ja)33.336 477 R .978 -.325(va a)
-.26 H .328(nd Python use this approach.).325 F(Let')6.828 E 3.578(ss)
-.715 G .328(ee ho)-3.578 F 3.578(wa)-.325 G
(compiler might generate one-address code for a simple e)33.336 492 Q
(xpression:)-.195 E/F3 10/Courier@0 SF(f\(\))33.336 504 Q({)33.336 516 Q
(extern int x,y,z;)39.336 528 Q(x=y*3+z*2;)90.936 552 Q(})33.336 564 Q
(ONE-ADDRESS CODE GENERATED FOR EXPRESSION ABOVE:)33.336 588 Q 51.6(1L)
33.336 612 S 85.2(OAD Y)-51.6 F 51.6(2P)33.336 624 S 85.2(USH 3)-51.6 F
51.6(3M)33.336 636 S(UL)-51.6 E 51.6(4L)33.336 648 S 85.2(OAD Z)-51.6 F
51.6(5P)33.336 660 S 85.2(USH 2)-51.6 F 51.6(6M)33.336 672 S(UL)-51.6 E
51.6(7A)33.336 684 S(DD)-51.6 E 51.6(8D)33.336 696 S(UP)-51.6 E 51.6(9S)
33.336 708 S 79.2(TORE X)-51.6 F F1(It w)33.336 729 Q(ould be f)-.13 E
(airly easy to implement this inside the parser:)-.13 E F3
(%left '*' '/')33.336 741 Q 0 Cg EP
%%Page: 5 5
%%BeginPageSetup
BP
%%EndPageSetup
/F0 9/Times-Roman@0 SF 140.742(ECE466:Compilers Unit)33.336 60 R(5/pg 5)
2.25 E(\2512019 Jef)144.405 E 2.25(fH)-.225 G(akner)-2.25 E/F1 10
/Courier@0 SF(%left '+' '-')33.336 117 Q(%right '=')33.336 129 Q(%%)
33.336 141 Q(expr:)33.336 153 Q 79.2(IDENT {emit\("LOAD",$1\);})90.936
165 R 67.2(|NUMBER {emit\("PUSH",$1\);})90.936 177 R(|expr '+' expr)
90.936 189 Q({emit\("ADD"\);})31.2 E(|expr '-' expr)90.936 201 Q
({emit\("SUB"\);})31.2 E(|expr '*' expr)90.936 213 Q({emit\("MUL"\);})
31.2 E(|expr '/' expr)90.936 225 Q({emit\("DIV"\);})31.2 E
(|IDENT '=' expr)90.936 237 Q({emit\("DUP"\);emit\("STORE",$1\);})25.2 E
(;)90.936 249 Q/F2 13/Times-Roman@0 SF .001
(By structuring the yacc/bison grammar to match the correct order of e)
33.336 270 R -.325(va)-.325 G .001(luation \(including).325 F 2.327(the\
 use of the yacc/bison precedence rules mechanism\), the one-address co\
de will be)33.336 285 R .18(emitted in the correct sequence to ef)33.336
300 R .18(fect the e)-.325 F -.325(va)-.325 G .18(luation of the e).325
F 3.43(xpression. Comparing)-.195 F(this)3.43 E .923
(code to the calculator e)33.336 315 R .923(xample gi)-.195 F -.195(ve)
-.325 G 4.173(ni).195 G 4.173(nU)-4.173 G .923(nit 2, one w)-4.173 F
.923(ould see that instead of e)-.13 F -.325(va)-.325 G(luating).325 E
2.401(the e)33.336 330 R 2.401(xpression directly in the semantic actio\
ns, we are emitting the one-address code)-.195 F 5.741(instead. The)
33.336 345 R 2.492
(run-time stack of the one-address virtual machine then serv)5.741 F
2.492(es the same)-.195 F 1.267
(function as the parse-time yacc semantic v)33.336 360 R 1.267
(alue stack w)-.325 F 1.267(ould for an interpreter/calculator)-.13 F
(\(such as our e)33.336 375 Q(xample in unit #2\).)-.195 E .511
(One-address code can tri)33.336 396 R -.325(va)-.325 G .511(lly be con)
.325 F -.195(ve)-.52 G .511
(rted to three-address code \(described immediately).195 F(belo)33.336
411 Q .945(w\) by considering each position on the \(potentially boundl\
ess\) stack to be a distinct)-.325 F(temporary v)33.336 426 Q(ariable.)
-.325 E/F3 13/Times-Bold@0 SF(Thr)186.859 456 Q(ee-Addr)-.234 E
(ess Code / Quads)-.234 E F2 2.68(The most popular form of linear IR is)
33.336 492 R F3(thr)5.93 E(ee-addr)-.234 E 2.68(ess code)-.234 F F2 9.18
(.E)C 2.68(ach instruction has an)-9.18 F 1.041
(operation code, up to tw)33.336 507 R 4.291(oo)-.13 G 1.041
(ptional source parameters, and a destination parameter)-4.291 F 7.541
(.E)-.715 G(.g.)-7.541 E 1.267(A=B+C is in three-address form: the oper\
ation is addition, the source parameters are B)33.336 522 R 1.757
(and C, and the destination is A.)33.336 537 R 1.757
(Because each operation has four \214elds, three-address)8.257 F .701
(code is also called)33.336 552 R F3(quads)3.951 E F2 7.201(.N)C .701
(ote that A,B and C need not be dif)-7.201 F .702
(ferent operands, and that)-.325 F .796(the order of operations is de\
\214ned such that the source parameters B and C are read \214rst,)33.336
567 R(then the destination is written with the result.)33.336 582 Q
(Therefore A=A+A w)6.5 E(orks as e)-.13 E(xpected.)-.195 E(Man)33.336
603 Q 9.594(yp)-.195 G 6.344
(rocessors actually implement a one-address or tw)-9.594 F 6.344
(o-address system.)-.13 F(An)12.844 E(accumulator)33.336 618 Q .656
(-centric processor is a one-address system.)-.26 F .656
(It requires most operations to go)7.156 F 2.562
(through an accumulator re)33.336 633 R(gister)-.195 E 5.812(,w)-.52 G
2.562(hich acts as the destination and one of the source)-5.812 F 4.675
(parameters, the other source parameter \(if needed\) being supplied as\
 part of the)33.336 648 R 11.243(instruction. Accumulator)33.336 663 R
7.993(-based architectures are common on small, embedded)-.26 F
(processors.)33.336 678 Q -1.3 -1.04(Tw o)33.336 699 T 3.698
(-address instruction sets typically ha)1.04 F 4.088 -.195(ve a s)-.26 H
3.698(ource and destination \214eld, with the).195 F .726
(destination also being one of the source operands.)33.336 714 R .726
(Some architectures allo)10.476 F 3.976(we)-.325 G .726(ither \214eld)
-3.976 F .355(to be either a re)33.336 729 R .355
(gister or a memory location, while some impose further restrictions.)
-.195 F(X86)6.854 E(is an e)33.336 744 Q(xample of a tw)-.195 E
(o-address architecture.)-.13 E 0 Cg EP
%%Page: 6 6
%%BeginPageSetup
BP
%%EndPageSetup
/F0 9/Times-Roman@0 SF 140.742(ECE466:Compilers Unit)33.336 60 R(5/pg 6)
2.25 E(\2512019 Jef)144.405 E 2.25(fH)-.225 G(akner)-2.25 E/F1 13
/Times-Roman@0 SF .914(Three-address architectures are more typically a\
ssociated with RISC processors, such as)33.336 120 R(SP)33.336 135 Q
(ARC or MIPS.)-1.196 E(Re)33.336 156 Q -.065(ga)-.195 G 1.364
(rdless of the e).065 F -.195(ve)-.325 G 1.364(ntual tar).195 F 1.364
(get architecture, using a three-address IR form is the best)-.234 F
4.538(idea. It)33.336 171 R(allo)4.538 E 1.289
(ws the greatest ease in IR generation and the greatest clarity)-.325 F
7.789(.L)-.845 G(ater)-7.789 E 4.539(,d)-.52 G(uring)-4.539 E 1.527
(actual tar)33.336 186 R 1.526(get code generation, the restrictions of\
 the speci\214c architecture can al)-.234 F -.13(wa)-.13 G 1.526(ys be)
.13 F 1.545(applied to the more generic three-address code.)33.336 201 R
1.545(Going in the other direction w)8.045 F 1.545(ould be)-.13 F -.195
(ve)33.336 216 S .513(ry dif).195 F .512(\214cult: if the IR were in tw)
-.325 F .512(o-address or one-address form, it w)-.13 F .512
(ould be dif)-.13 F .512(\214cult for)-.325 F 1.314(the code generator \
to see opportunities for applying three-address form if that were the)
33.336 231 R(supported architecture.)33.336 246 Q/F2 13/Times-Bold@0 SF
(Repr)210.935 291 Q(esenting Quads)-.234 E F1 1.507
(In the \214eld of compiler theory)33.336 327 R 4.757(,v)-.845 G 1.507
(arious notations are used to describe quads in human-)-5.082 F
(readable form, e.g.:)33.336 342 Q/F3 13/Courier@0 SF -1.8
(res = OP src1,src2)104.436 357 S -1.8(res = src1 OP src2)104.436 372 S
-1.8(res <- src1 OP src2)104.436 387 S -1.8(src1 OP src2 -> res)104.436
402 S -1.8(OP src1,src2,res)104.436 417 S -1.8(OP res,src1,src2)104.436
432 S -1.8(OP src1,src2 -> res)104.436 447 S F1 -1.04(We)33.336 462 S
-.13('l)1.04 G 4.57(lg).13 G 1.32(enerally stick to the \214rst form, b)
-4.57 F 1.321(ut do not be alarmed if other forms are seen in)-.26 F
2.853(reading the v)33.336 477 R 2.853(arious te)-.325 F 6.103(xts. If)
-.195 F 2.852(you understand what quads are supposed to do, it will)
6.103 F(quickly become apparent what the intention of the notation is.)
33.336 492 Q F2(Encoding Quads & Hidden Addr)139.052 507 Q(essing Modes)
-.234 E F1 2.889
(At this stage of the compiler \(quad generation\), we can identify se)
33.336 537 R -.195(ve)-.325 G 2.89(ral "addressing).195 F
(modes", i.e. w)33.336 552 Q
(ays in which the source and result operands can be accessed:)-.13 E
4.355(\203Al)33.336 567 S 1.104(ocal v)-4.355 F 4.354(ariable: At)-.325
F 1.104(code generation time, local v)4.354 F 1.104
(ariables are typically gi)-.325 F -.195(ve)-.325 G 4.354(nas).195 G
1.104(lot in)-4.354 F 1.182(the function')33.336 582 R 4.432(ss)-.715 G
1.182(tack frame.)-4.432 F(Ho)7.682 E(we)-.325 E -.195(ve)-.325 G 2.222
-.52(r, i).195 H 4.432(ft).52 G 1.182(here are suf)-4.432 F 1.182
(\214cient re)-.325 F 1.182(gisters, and the address of)-.195 F 1.618
(the local v)33.336 597 R 1.618(ariable is ne)-.325 F -.195(ve)-.325 G
4.868(r").195 G -.195(ex)-4.868 G 1.618
(posed" by taking a pointer to it \(in C.).195 F 1.617
(In languages that)8.117 F .533
(implement call-by-reference, passing the local v)33.336 612 R .533
(ariable to a function may also e)-.325 F .533(xpose it\),)-.195 F
(then the local v)33.336 627 Q(ariable may li)-.325 E .39 -.195(ve e)
-.325 H(ntirely in a re).195 E(gister and not "o)-.195 E(wn" an)-.325 E
3.25(ym)-.195 G(emory)-3.25 E(.)-.845 E 1.55(In the e)33.336 648 R 1.55
(xamples of this unit, we will treat local v)-.195 F 1.549
(ariables as named objects that can be)-.325 F
(used directly in an operation.)33.336 663 Q 4.322(\203Af)33.336 678 S
1.072(unction parameter:)-4.322 F 1.072(Function parameters beha)7.572 F
1.462 -.195(ve l)-.26 H(ik).195 E 4.323(el)-.13 G 1.073(ocal v)-4.323 F
1.073(ariables as f)-.325 F 1.073(ar as the C)-.13 F .033
(language de\214nition is concerned, b)33.336 693 R .033(ut at tar)-.26
F .033(get code generation time, the)-.234 F 3.283(ym)-.195 G .033
(ay be accessed)-3.283 F 1.498(using dif)33.336 708 R 1.499(ferent rule\
s \(e.g. some architectures pass parameters in speci\214c re)-.325 F
4.749(gisters\). W)-.195 F(e)-1.04 E(will treat them as local v)33.336
723 Q(ariables)-.325 E 5.413(\203Ag)33.336 738 S 2.163(lobal v)-5.413 F
2.163(ariable: Access to global v)-.325 F 2.162(ariables will e)-.325 F
-.195(ve)-.325 G 2.162(ntually result in the use of an).195 F 0 Cg EP
%%Page: 7 7
%%BeginPageSetup
BP
%%EndPageSetup
/F0 9/Times-Roman@0 SF 140.742(ECE466:Compilers Unit)33.336 60 R(5/pg 7)
2.25 E(\2512019 Jef)144.405 E 2.25(fH)-.225 G(akner)-2.25 E/F1 13
/Times-Roman@0 SF 2.319
(absolute address mode in the assembly language output.)33.336 120 R
2.32(Global v)8.82 F 2.32(ariables can not be)-.325 F 5.036
(assigned to a re)33.336 135 R(gister)-.195 E 8.286(,a)-.52 G 5.036
(lthough the)-8.286 F 8.286(yc)-.195 G 5.036
(ertainly can be loaded into a re)-8.286 F 5.036(gister for)-.195 F
2.764(computation and the result stored from the re)33.336 150 R 2.764
(gister back into that v)-.195 F 6.014(ariable. W)-.325 F 6.014(ew)-1.04
G(ill)-6.014 E -.195(ex)33.336 165 S 1.908(press global v).195 F 1.908
(ariables in the same w)-.325 F 1.907(ay as local v)-.13 F 1.907
(ariables, and introduce a syntax to)-.325 F 3.25(distinguish them.)
33.336 180 R 4.892(\203An)33.336 195 S 1.642(umeric constant:)-4.892 F
1.642(Constants may appear e)8.142 F 1.642
(xplicitly in the source program, or may)-.195 F 1.253
(arise implicity \(e.g. the multiplier used in pointer/array of)33.336
210 R 1.252(fset arithmetic\).)-.325 F -1.04(We)7.752 G -.13('l)1.04 G
4.502(lh).13 G -2.925 -.26(av e)-4.502 H(a)4.762 E
(bit more to say about)33.336 225 Q/F2 13/Times-Bold@0 SF(constant pr)
3.25 E(opagation)-.234 E F1(later on.)3.25 E 3.467<8341>33.336 240 S
3.467(na)-3.467 G .217(ddress constant: The assembler/link)-3.467 F .217
(er con)-.13 F -.195(ve)-.52 G .217(ntions allo).195 F 3.467(wt)-.325 G
.217(he use of a symbol which)-3.467 F(is of)33.336 255 Q
(fset by an inte)-.325 E(ger)-.195 E 6.5(.E)-.715 G(.g.)-6.5 E/F3 10
/Courier@0 SF(extern char a;)33.336 267 Q(int z=&a+4;)33.336 279 Q F1
1.913(The compiler will pass through the symbolic e)33.336 294 R
(xpression)-.195 E/F4 13/Courier@0 SF -1.8("a+4")4.262 G F1 1.912
(to the initializer which)6.062 F .825
(appears with symbol z in the assembly language output.)33.336 309 R
.825(This e)7.325 F .825(xpression will be carried)-.195 F 1.985
(through by the link)33.336 324 R(er)-.13 E 5.235(,w)-.52 G 1.985
(hich will calculate the actual numeric v)-5.235 F 1.985(alue of the e)
-.325 F(xpression)-.195 E(once linkage has been resolv)33.336 339 Q
(ed and the symbol a has been assigned an absolute address.)-.195 E
3.356(If the intent of the IR is to mak)33.336 360 R 6.606(ei)-.13 G
6.606(te)-6.606 G 3.356(xternally transferrable, then addressing mode)
-6.801 F 2.091(information must be e)33.336 375 R 5.341(xternalized. In)
-.195 F 2.091(our e)5.341 F 2.091
(xample, the IR is intended for internal use)-.195 F(only)33.336 390 Q
7.975(.W)-.845 G 4.726(ew)-9.015 G 1.476(ill therefore tak)-4.726 F
4.726(ea)-.13 G(dv)-4.726 E 1.476(antage of the e)-.325 F 1.476
(xistence of the symbol table, and use a)-.195 F
(data structure such as:)33.336 405 Q F3(struct quad {)33.336 417 Q
(int opcode;)90.936 429 Q(union generic_node *result,*src1,*src2;)90.936
441 Q(};)33.336 453 Q F1(These)33.336 489 Q F4 -1.8(generic_node)3.427 G
F1 4.326(sc).9 G 1.076(an be allocated on-the-\215y for temporary v)
-4.326 F 1.076(alues and for constants)-.325 F 1.305
(\(during optimization it is important to track constants too\).)33.336
504 R 1.305(Implicit in this encoding is)7.805 F 1.44
(that src1 and src2 are e)33.336 519 R 1.44
(xpected to fetch the actual v)-.195 F 1.439
(alue of the operand\(s\), while result)-.325 F .782(must pro)33.336 534
R .782(vide a means of storing the result.)-.195 F .783
(I.e. src1 and src2 are rv)7.282 F .783(alues, while result is)-.325 F
(an lv)33.336 549 Q(alue.)-.325 E F2(Other A)126.032 579 Q(ppr)-.325 E
(oaches to Addr)-.234 E(essing Modes and T)-.234 E(ypes)-.442 E F1 .498
(The e)33.336 615 R .498(xamples gi)-.195 F -.195(ve)-.325 G 3.748(ni)
.195 G 3.748(nt)-3.748 G .498(his unit are by no means the only w)-3.748
F(ay)-.13 E 6.997(.L)-.845 G(et')-6.997 E 3.747(sl)-.715 G .497
(ook at some of the)-3.747 F(important features of the LL)33.336 630 Q
(VM IR:)-1.3 E 5.419<8349>33.336 645 S 5.419(nL)-5.419 G -1.3(LV)-5.419
G 2.169(M, global v)1.3 F 2.169
(ariables are treated as constant pointers to the symbolic memory)-.325
F 1.025(address which the)33.336 660 R 4.275(yw)-.195 G 1.025(ill occup)
-4.275 F 4.275(ya)-.13 G 4.275(tr)-4.275 G 4.275(un-time. Global)-4.275
F -.325(va)4.275 G 1.025(riables are accessed by assigning).325 F .49
(that symbolic constant to a temporary v)33.336 675 R .491
(ariable and using the LO)-.325 F(AD/ST)-.455 E .491(ORE mechanism,)
-.234 F(as if the v)33.336 690 Q(ariables were being accessed e)-.325 E
(xplicitly by a pointer)-.195 E(.)-.715 E 6.154<8356>33.336 705 S 2.904
(ariables which ha)-7.597 F 3.294 -.195(ve b)-.26 H 2.904
(een declared as local v).195 F 2.904(ariables in LL)-.325 F 2.904
(VM are also accessed)-1.3 F 2.326(through a pointer)33.336 720 R 8.826
(.T)-.715 G 2.326(he memory address for the local v)-8.826 F 2.326
(ariable comes from an LL)-.325 F(VM)-1.3 E -.26(bu)33.336 735 S .959
(ilt-in operator).26 F F4 -1.8(alloca)3.308 G F1 4.208(,w).9 G .958
(hich is similar to the standard C library function, and has the)-4.208
F 0 Cg EP
%%Page: 8 8
%%BeginPageSetup
BP
%%EndPageSetup
/F0 9/Times-Roman@0 SF 140.742(ECE466:Compilers Unit)33.336 60 R(5/pg 8)
2.25 E(\2512019 Jef)144.405 E 2.25(fH)-.225 G(akner)-2.25 E/F1 13
/Times-Roman@0 SF(beha)33.336 120 Q
(vior of allocating a slice of memory from the stack frame.)-.26 E 4.377
<834c>33.336 135 S -1.3(LV)-4.377 G 4.377(Mh)1.3 G 1.128
(as a syntax to declare the names and types of function parameters.)
-4.377 F(The)7.628 E 4.378(yc)-.195 G(an)-4.378 E
(then be accessed directly)33.336 150 Q(.)-.845 E 6.312<8349>33.336 165
S 6.312(nL)-6.312 G -1.3(LV)-6.312 G 3.062(M, e)1.3 F -.195(ve)-.325 G
3.062(ry operand is also \215agged with a type.).195 F 3.061
(The notion of type can be)9.561 F
(complicated, including structure or array types.)33.336 180 Q/F2 13
/Times-Bold@0 SF -1.196(Te)216.356 210 S(mporary V)1.196 E(alues)-1.196
E F1 5.248(In constructing either tar)33.336 246 R 5.249
(get code or IR for e)-.234 F 5.249(xpressions, there will naturally be)
-.195 F 1.881(intermediate, temporary v)33.336 261 R 1.881
(alues which arise as a result of ha)-.325 F 1.881(ving to e)-.26 F
-.325(va)-.325 G 1.881(luate each sub-).325 F -.195(ex)33.336 276 S
6.958(pression as a binary or unary operation.).195 F 6.959
(These temporary v)13.459 F 6.959(alues ha)-.325 F 7.349 -.195(ve n)-.26
H(o).195 E 2.824(corresponding e)33.336 291 R 2.823
(xistence in the source program and therefore don')-.195 F 6.073(t")
-.234 G -.325(ow)-6.073 G 2.823(n" a memory).325 F(location as do v)
33.336 306 Q(ariables.)-.325 E .186
(When the compiler reaches the phase of generating tar)33.336 327 R .187
(get assembly code, it needs to ha)-.234 F -.195(ve)-.26 G 4.487(aw)
33.336 342 S 1.237(ay of managing these temporary v)-4.617 F 4.487
(alues. The)-.325 F 4.487(ym)-.195 G 1.237(ay be k)-4.487 F 1.237
(ept in re)-.13 F 1.236(gisters, pushed and)-.195 F .358(popped on the \
stack, or stored in the "stack frame" \(more about that in a later unit\
\) of the)33.336 357 R(function as if the)33.336 372 Q 3.25(yw)-.195 G
(ere local v)-3.25 E(ariables.)-.325 E .676
(The trend in modern compiler design is to defer allocation of re)33.336
393 R .676(gisters until f)-.195 F .676(airly late in)-.13 F .934(the g)
33.336 408 R 4.184(ame. Most)-.065 F .934
(IRs assume that there is an in\214nite supply of virtual re)4.184 F
.935(gisters, in which)-.195 F .305(temporary v)33.336 423 R .305
(ariables can be placed.)-.325 F .305
(This simpli\214es the optimizer and allo)6.805 F .305(ws it to perform)
-.325 F 3.271(as)33.336 438 S .021
(eries of analyses based on data \215o)-3.271 F 4.961 -.845(w. T)-.325 H
.021(he result is that man).845 F 3.271(yo)-.195 G 3.271(ft)-3.271 G
.022(he temporary v)-3.271 F(ariables)-.325 E 1.689(may be eliminated.)
33.336 453 R 1.689(Then the re)8.189 F 1.689
(gister allocator re-writes the IR, replacing some of the)-.195 F -.325
(va)33.336 468 S 1.267
(riables \(including possibly actual, declared local v).325 F 1.268
(ariables which are frequently used\))-.325 F 1.396(with re)33.336 483 R
1.396(gisters, and calculating ho)-.195 F 4.646(wm)-.325 G 1.396
(uch "spill" area will be needed to hold temporary)-4.646 F -.325(va)
33.336 498 S(lues if the).325 E 3.25(yd)-.195 G(on')-3.25 E 3.25(ta)
-.234 G(ll \214t within the re)-3.25 E(gister pool.)-.195 E -.195(Fo)
33.336 519 S 3.25(re).195 G(xample, consider this code fragment:)-3.445
E/F3 10/Courier@0 SF(int a,b,c,d;)33.336 531 Q(a=b*c+d*10;)90.936 543 Q
F1(Clearly)33.336 558 Q 4.372(,t)-.845 G 1.382 -.13(wo t)-4.372 H 1.122
(emporary v).13 F 1.122(ariables will be needed to hold the sub-e)-.325
F 1.123(xpression results.)-.195 F(But)7.623 E(we could ha)33.336 573 Q
.39 -.195(ve a)-.26 H(lso written:).195 E F3(int a,b,c,d,t1,t2;)33.336
585 Q(t1=b*c;)90.936 597 Q(t2=d*10;)90.936 609 Q(a=t1+t2;)90.936 621 Q
F1 .687(In a good, optimizing compiler)33.336 636 R 3.937(,b)-.52 G .686
(oth of these programs will result in the emission of the)-3.937 F 2.552
(same tar)33.336 651 R 2.552
(get code \(assuming that t1 and t2 are not used ag)-.234 F 2.553
(ain in the program\).)-.065 F(This)9.053 E 2.952(illustrates a princip\
le of optimization: The optimizer should be able to see potential)33.336
666 R(sa)33.336 681 Q 3.06(vings which the programmer did not e)-.26 F
3.06(xplicitly code.)-.195 F(Con)9.56 E -.195(ve)-.52 G(rsely).195 E
6.311(,t)-.845 G 3.061(he programmer)-6.311 F .64(should be able to e)
33.336 696 R .64
(xpress code in the source language which best represents the problem)
-.195 F(at hand, and let the compiler w)33.336 711 Q
(orry about the implementation details.)-.13 E F2(Generating Quads f)
171.734 741 Q(or Expr)-.325 E(essions)-.234 E 0 Cg EP
%%Page: 9 9
%%BeginPageSetup
BP
%%EndPageSetup
/F0 9/Times-Roman@0 SF 140.742(ECE466:Compilers Unit)33.336 60 R(5/pg 9)
2.25 E(\2512019 Jef)144.405 E 2.25(fH)-.225 G(akner)-2.25 E/F1 13
/Times-Roman@0 SF .419(Expressions in C are v)33.336 120 R .419(ery po)
-.195 F .419(werful, and in f)-.325 F .42(act include hidden \215o)-.13
F .42(w-of-control constructs)-.325 F 1.548
(\(e.g. the ?:, &&, || operators\).)33.336 135 R 3.628 -1.04(We w)8.048
H 1.548(ill consider simple e)1.04 F 1.548(xpressions \214rst, then e)
-.195 F(xamine)-.195 E(control \215o)33.336 150 Q 3.25(wc)-.325 G
(onstructs, and then see ho)-3.25 E 3.25(wc)-.325 G
(omplicated operators are handled.)-3.25 E 1.218(IR for e)33.336 171 R
1.218(xpressions can be generated on-the-\215y as a result of semantic \
actions.)-.195 F(Because)7.718 E 1.974(the grammar for e)33.336 186 R
1.974(xpressions also speci\214es \(loosely\) the order of e)-.195 F
-.325(va)-.325 G 1.973(luation, we could).325 F 5.014
(embed actions to emit IR whene)33.336 201 R -.195(ve)-.325 G 8.264(ra)
.195 G 8.265(ne)-8.264 G 5.015(xpression or sub-e)-8.46 F 5.015
(xpression is reduced.)-.195 F(Ho)33.336 216 Q(we)-.325 E -.195(ve)-.325
G 4.889 -.52(r, i).195 H 7.099(nan).52 G(on-tri)-7.099 E 3.849
(vial language such as C, it is often necessary to look at an)-.325 F
-.195(ex)33.336 231 S .419(pression in multiple w).195 F 3.669(ays. W)
-.13 F 3.67(em)-1.04 G .42(ight be trying to \214gure out the e)-3.67 F
(xpression')-.195 E 3.67(sl)-.715 G -.325(va)-3.67 G .42(lue, its).325 F
(rv)33.336 246 Q .314(alue, or its type \(and therefore its size and al\
ignment restrictions\).)-.325 F .313(It is therefore useful)6.814 F
2.837(to ha)33.336 261 R 3.227 -.195(ve t)-.26 H 2.837
(he parser construct an AST representation of each e).195 F 2.837
(xpression, and then re-)-.195 F(tra)33.336 276 Q -.195(ve)-.26 G .125
(rse that AST at some later time \(e.g.).195 F .125
(at the conclusion of each statement, or after the)6.625 F 2.895
(entire function has been con)33.336 291 R -.195(ve)-.52 G 2.895
(rted to AST form\).).195 F 2.896(During AST construction, certain)9.396
F .067(transformations or simpli\214cations can be applied.)33.336 306 R
.067(There is no need to encode parentheses)6.567 F .137(into the AST)
33.336 321 R 3.387(,f)-.962 G .137(or e)-3.387 F .137
(xample, and compound assignment operators could be e)-.195 F .137
(xpanded out as)-.195 F(if the)33.336 336 Q 3.25(yw)-.195 G
(ere written in their equi)-3.25 E -.325(va)-.325 G(lent form.).325 E
.173(IR construction from an AST representation of an e)33.336 357 R
.173(xpression is a recursi)-.195 F .563 -.195(ve p)-.325 H .173
(rocess, using).195 F 3.445(ad)33.336 372 S .195
(epth-\214rst \(aka post-order\) w)-3.445 F .195(alk of the tree.)-.13 F
2.275 -1.04(We r)6.695 H .195(ecurse on each of the operands, so the)
1.04 F 1.674(IR to compute them is tak)33.336 387 R 1.674(en care of.)
-.13 F 1.674(Then we e)8.174 F 1.673
(xamine the type of the operands, and)-.195 F .305
(generate code to perform an)33.336 402 R 3.555(yn)-.195 G .305
(ecessary con)-3.555 F -.195(ve)-.52 G .306
(rsions \(e.g. when adding a double to an int,).195 F 1.601
(the int must be promoted\).)33.336 417 R(Finally)8.101 E 4.851(,w)-.845
G 4.851(ee)-4.851 G 1.601(mit the code to perform the operation for our)
-4.851 F(node.)33.336 432 Q 2.176(It will be to the compiler writer')
33.336 453 R 5.427(sa)-.715 G(dv)-5.427 E 2.177(antage to mak)-.325 F
5.427(et)-.13 G 2.177(he quad opcodes po)-5.427 F 2.177(werful and)-.325
F 3.535(generic. At)33.336 468 R .285(the v)3.535 F .284(ery least, all\
 of the basic unary and binary operators should be modeled.)-.195 F .401
(It may be necessary to add an operation "type or width" to the opcode,\
 e.g. to distinguish)33.336 483 R 1.381
(between int and long int arithmetic.)33.336 498 R 1.381(The tar)7.881 F
1.381(get code to be generated for)-.234 F/F2 13/Courier@0 SF -1.8(a*b)
3.731 G F1(ob)5.531 E(viously)-.195 E(in)33.336 513 Q -.26(vo)-.52 G(lv)
.26 E 1.33(es a multiply instruction \(unless the tar)-.195 F 1.331
(get machine lacks hardw)-.234 F 1.331(are multiply\), b)-.13 F(ut)-.26
E .637(the e)33.336 528 R .637
(xact instruction or sequence of instructions is dif)-.195 F .637
(ferent if a and b are longs v)-.325 F .637(ersus if)-.195 F(the)33.336
543 Q 3.436(ya)-.195 G .186(re doubles.)-3.436 F .186
(One could use a generic multiply IR opcode and then push the decision)
6.686 F 2.445(deeper into the bottom half, b)33.336 558 R 2.445(ut it w)
-.26 F 2.445(ould be nice to stop w)-.13 F 2.444
(orrying about arbitrary C)-.13 F .615
(language types after IR generation.)33.336 573 R .615
(Besides, the types are already being e)7.115 F -.325(va)-.325 G .615
(luated as we).325 F(descend the e)33.336 588 Q(xpression AST)-.195 E(.)
-.962 E 1.018(In our e)33.336 609 R 1.017
(xamples, we will assume that all operations are in 32 bit inte)-.195 F
1.017(ger arithmetic, and)-.195 F 1.802
(we will omit notation that distinguishes between the dif)33.336 624 R
1.803(ferent types of v)-.325 F 5.053(ariables. This)-.325 F 1.287
(will allo)33.336 639 R 4.537(wu)-.325 G 4.537(st)-4.537 G 4.537(of)
-4.537 G 1.287(ocus on the core issues of the IR generation without the\
 visual clutter)-4.537 F(that will actually be present.)33.336 654 Q
3.372(Consider the e)33.336 675 R 3.372
(xpression a=\(b+c*10\)*a, assuming a, b and c are local int v)-.195 F
(ariables.)-.325 E(Clearly)33.336 690 Q 6.261(,t)-.845 G 3.011
(here are intermediate results which do not correspond to an)-6.261 F
6.26(yv)-.195 G 3.01(ariable, and)-6.585 F(therefore temporary v)33.336
705 Q(ariables will be required.)-.325 E
(Here is a possible sequence of quads:)6.5 E/F3 10/Courier@0 SF 27.6
(%T1= MOV)33.336 717 R(b)39.6 E 27.6(%T2= MOV)33.336 729 R(c)39.6 E 27.6
(%T3= MUL)33.336 741 R(%T2,10)6 E 0 Cg EP
%%Page: 10 10
%%BeginPageSetup
BP
%%EndPageSetup
/F0 9/Times-Roman@0 SF 138.492(ECE466:Compilers Unit)33.336 60 R
(5/pg 10)2.25 E(\2512019 Jef)142.155 E 2.25(fH)-.225 G(akner)-2.25 E/F1
10/Courier@0 SF 27.6(%T4= ADD)33.336 117 R(%T1,%T3)6 E 27.6(%T5= MOV)
33.336 129 R(a)39.6 E 27.6(%T6= MUL)33.336 141 R(%T4,%T5)6 E 39.6
(a= MOV)33.336 153 R(%T6)39.6 E/F2 13/Times-Roman@0 SF 1.374
(In the notation that will be used in these notes, temporary v)33.336
174 R 1.375(ariables are denoted with a)-.325 F 1.16
(leading percent sign.)33.336 189 R 1.16
(This is the same character that identi\214es re)7.66 F 1.16
(gisters in the so-called)-.195 F("A)33.336 204 Q 2.827
(T&T" or "UNIX" style of assembly language that we')-1.443 F 2.827
(ll see in a subsequent unit.)-.13 F -.91(Te)33.336 219 S 3.062
(mporary v).91 F 3.061(ariables, we will see, are in ef)-.325 F 3.061
(fect virtual re)-.325 F 3.061(gisters, so the use of % is)-.195 F 3.257
(justi\214ed. The)33.336 234 R/F3 13/Courier@0 SF -1.8(MOV)2.357 G F2
.008(IR opcode is a simple assignment.)4.157 F .008
(Often these can be eliminated either)6.508 F
(by more optimal IR generation, or by subsequent optimization passes.)
33.336 249 Q 3.686(It should be apparent that man)33.336 270 R 6.936(yo)
-.195 G 6.936(ft)-6.936 G 3.686(he temporary v)-6.936 F 3.686
(ariables and operations can be)-.325 F 3.25(eliminated. Here)33.336 285
R(is a possible optimized sequence:)3.25 E F1 27.6(%T1= MUL)33.336 297 R
(c,10)6 E 27.6(%T2= ADD)33.336 309 R(b,%T1)6 E 39.6(a= MUL)33.336 321 R
(%T2,a)6 E F2 2.124 -1.04(We c)33.336 342 T .045(ould choose to emit to\
tally unoptimized IR \(the \214rst case\) and let the optimizer \214x i\
t.)1.04 F .593(Or we could e)33.336 357 R -.195(xe)-.195 G .593
(rt more ef).195 F .592(fort in creating a tighter IR.)-.325 F .592
(The trend in modern compilers is)7.092 F 1.986(the former)33.336 372 R
5.236(,s)-.52 G 1.986(ince memory and CPU c)-5.236 F 1.986(ycles are f)
-.195 F 1.986(airly cheap.)-.13 F 1.986(This allo)8.486 F 1.986
(ws the compiler)-.325 F
(writer to focus on simplicity and correctness during IR generation.)
33.336 387 Q 1.268(In older compilers, or when writing a compiler that \
will compile in a more constrained)33.336 408 R(en)33.336 423 Q .905(vi\
ronment such as a small embedded system, it might pay to generate bette\
r IR in the)-.52 F
(\214rst pass, because our optimizer might be minimal or non-e)33.336
438 Q(xistent.)-.195 E 4.106 -1.04(To g)33.336 459 T 2.026
(enerate the unoptimized IR code, we simply assign a ne)1.04 F 5.276(wt)
-.325 G 2.026(emporary v)-5.276 F 2.026(ariable for)-.325 F -2.795 -.325
(ev e)33.336 474 T .391(ry sube).325 F 3.641(xpression. T)-.195 F 3.642
(og)-1.04 G .392
(enerate the more optimal sequence, we need to, at each step of)-3.642 F
(the recursion, be informed of the tar)33.336 489 Q(get for the v)-.234
E(alue of our node.)-.325 E(Schematically:)6.5 E F1 86.4
(gen_rvalue\(node,target\) //return)33.336 513 R
(value is the result name)6 E
(//If target is NULL, we are expected to create a temporary)129.336 525
Q({)33.336 537 Q(if \(node->type==SCALAR VARIABLE\) return node;)90.936
549 Q(if \(node->type==CONSTANT\) return node;)90.936 561 Q
(if \(node->type is a BINARY OPERATOR\))90.936 573 Q({)90.936 585 Q
(//Ordinary binary operator case, ignoring type conversions)148.536 597
Q(left=gen_rvalue\(node->left,NULL\);)148.536 609 Q
(right=gen_rvalue\(node->right,NULL\);)148.536 621 Q
(if \(!target\) target=new_temporary\(\);)148.536 633 Q
(emit\(node->opcode,left,right,target\);)148.536 645 Q(return target;)
148.536 657 Q(})90.936 669 Q(})33.336 681 Q F2(The)33.336 702 Q F3 -1.8
(new_temporary\(\))3.049 G F2 .699(function creates a ne)4.849 F 3.949
(wn)-.325 G .699(ode of type)-3.949 F F3 -1.8(TEMPORARY)3.049 G F2 7.199
(.W).9 G 3.948(ec)-8.239 G .698(ould attempt)-3.948 F .639
(to optimize the allocation of temporary v)33.336 717 R .639
(alues, as if the)-.325 F 3.889(yw)-.195 G .639(ere re)-3.889 F 7.139
(gisters. In)-.195 F .639(the e)3.889 F(xample)-.195 E(abo)33.336 732 Q
-.195(ve)-.195 G 3.592(,t).195 G .341(he tar)-3.592 F .341(get of the s\
econd quad could be T1, rather than T2, because T1 is not "li)-.234 F
-.195(ve)-.325 G(").195 E 0 Cg EP
%%Page: 11 11
%%BeginPageSetup
BP
%%EndPageSetup
/F0 9/Times-Roman@0 SF 138.492(ECE466:Compilers Unit)33.336 60 R
(5/pg 11)2.25 E(\2512019 Jef)142.155 E 2.25(fH)-.225 G(akner)-2.25 E/F1
13/Times-Roman@0 SF .809(after that second quad \("li)33.336 120 R -.195
(ve)-.325 G 4.06("m).195 G .81(eaning that its v)-4.06 F .81
(alue might be accessed ag)-.325 F .81(ain by another)-.065 F 3.813
(quad\). Ho)33.336 135 R(we)-.325 E -.195(ve)-.325 G 1.603 -.52(r, t)
.195 H .563(his sort of li).52 F .953 -.195(ve v)-.325 H .563
(ariable analysis is also something which the optimizer)-.13 F 1.212
(will be performing, not just on temporaries, b)33.336 150 R 1.212
(ut on all v)-.26 F 4.462(ariables. So)-.325 F 1.213
(it will be easier to)4.462 F .253(just assign a ne)33.336 165 R 1.942
-.845(w, u)-.325 H .252
(nique temporary number each time we need one, and let the optimizer)
.845 F .648(\214gure it out later)33.336 180 R 7.148(.T)-.715 G .648
(he function)-7.148 F/F2 13/Courier@0 SF -1.8(emit)2.998 G F1 .648
(creates a ne)4.798 F 3.898(wq)-.325 G .648(uad with the gi)-3.898 F
-.195(ve)-.325 G 3.899(n4a).195 G -.234(rg)-3.899 G .649(uments and).234
F(appends it to the list of quads.)33.336 195 Q/F3 13/Times-Bold@0 SF
-.26(Po)244.358 225 S(inters).26 E F1
(What quads should we generate for the follo)33.336 261 Q(wing code:)
-.325 E/F4 10/Courier@0 SF(int *p,b,c;)33.336 273 Q(b= *p+1;)90.936 285
Q F1 .296(The v)33.336 306 R .296(alue which is placed into v)-.325 F
.295(ariable b is the contents of the memory location \(inte)-.325 F
(ger)-.195 E(-)-.26 E .861(sized\) whose address is contained in the v)
33.336 321 R .861(ariable p.)-.325 F .862
(In order to represent this in a quad,)7.361 F 2.417
(we could introduce a ne)33.336 336 R 5.667(wa)-.325 G 2.417
(ddressing mode, e.g.)-5.667 F F2 2.416 -1.8(b=ADD \(*p\),1)4.766 H F1
8.916(.B).9 G 2.416(ut doing so w)-8.916 F(ould)-.13 E 1.134
(violate the purity which we had pre)33.336 351 R 1.135
(viously established.)-.325 F 1.135(So we need to introduce a ne)7.635 F
(w)-.325 E(quad:)33.336 366 Q F4 27.6(%T1= LOAD p)33.336 378 R 39.6
(b= ADD)33.336 390 R(%T1,1)39.6 E F1 3.137(This may seem inef)33.336 411
R 3.137(\214cient, in that it tak)-.325 F 3.136(es tw)-.13 F 6.386(oq)
-.13 G 3.136(uads instead of one to e)-6.386 F 3.136(xpress the)-.195 F
.582(operation, b)33.336 426 R .582(ut quads are not the tar)-.26 F .582
(get code.)-.234 F(The)7.082 E 3.832(ya)-.195 G .583
(re merely a tool for making progress)-3.832 F(to)33.336 441 Q -.13(wa)
-.325 G .048(rds the optimal tar).13 F .047(get code.)-.234 F .047
(During tar)6.547 F .047(get-speci\214c instruction selection, a tar)
-.234 F .047(get code)-.234 F .66
(generator might recognize the template of a LO)33.336 456 R .66
(AD into a temp follo)-.455 F .661(wed by an access to)-.325 F 2.793
(that same temp, and emit an appropriate instruction which mak)33.336
471 R 2.793(es use of an indirect)-.13 F(addressing mode on the tar)
33.336 486 Q(get computer)-.234 E(.)-.715 E 2.08 -1.04(We n)33.336 507 T
(eed to add some lines to our pre)1.04 E(vious)-.325 E F2 -1.8
(gen_rvalue)2.35 G F1(:).9 E F4 86.4(gen_rvalue\(node,target\) //return)
33.336 519 R(value is the result name)6 E({)33.336 531 Q(/*...*/)90.936
543 Q(if \(node->type == POINTER_DEREF\))90.936 555 Q({)90.936 567 Q
(addr=gen_rvalue\(node->to,NULL\);)148.536 579 Q
(if \(!target\) target=new_temporary\(\);)148.536 591 Q
(emit\(LOAD,addr,NULL,target\);)148.536 603 Q(return target;)148.536 615
Q(})90.936 627 Q(*...*/)90.936 639 Q F1
(Along similar lines of thought, let')33.336 660 Q 3.25(sg)-.715 G
(enerate IR for)-3.25 E F2 -1.8(*p=b+c)8.35 G F4 27.6(%T1= ADD)33.336
672 R(b,c)39.6 E 21.6(STORE %T1,p)90.936 684 R F1 .035(Here we ha)33.336
705 R .425 -.195(ve c)-.26 H .036(hosen to represent the memory address\
 at which T1 is stored as the second).195 F 1.21
(source parameter to the ST)33.336 720 R 1.21
(ORE quad opcode, rather than as the destination \(p=ST)-.234 F(ORE)
-.234 E 3.764(%T1\). This)33.336 735 R(allo)3.764 E .514(ws us to k)
-.325 F .514(eep data\215o)-.13 F 3.764(wa)-.325 G .515
(nalysis clean, in that the ST)-3.764 F .515(ORE operation does)-.234 F
0 Cg EP
%%Page: 12 12
%%BeginPageSetup
BP
%%EndPageSetup
/F0 9/Times-Roman@0 SF 138.492(ECE466:Compilers Unit)33.336 60 R
(5/pg 12)2.25 E(\2512019 Jef)142.155 E 2.25(fH)-.225 G(akner)-2.25 E/F1
13/Times-Roman@0 SF 3.105(not change the v)33.336 120 R 3.104
(alue of p.)-.325 F -1.04(We)9.604 G -.13('l)1.04 G 6.354(ls).13 G 3.104
(ee in later units that pointers greatly complicate)-6.354 F(data\215o)
33.336 135 Q 3.497(wa)-.325 G .247(nalysis in general, for unless we ha)
-3.497 F .637 -.195(ve s)-.26 H .247(ome w).195 F .247(ay of narro)-.13
F .247(wing do)-.325 F .247(wn the objects)-.325 F .391(to which)33.336
150 R/F2 13/Courier@0 SF(p)2.741 E F1 .39
(might be pointing, we must assume that an)2.741 F 3.64(ya)-.195 G .39
(ccessible v)-3.64 F .39(ariable could ha)-.325 F .78 -.195(ve i)-.26 H
(ts).195 E -.325(va)33.336 165 S
(lue changed as a result of that operation!).325 E/F3 13/Times-Bold@0 SF
(Assignments)232.307 195 Q F1 3.5 -1.04(We h)33.336 225 T -2.925 -.26
(av e)1.04 H 1.42(already informally handled assignments where the lv)
4.93 F 1.421(alue is a simple v)-.325 F(ariable.)-.325 E 5.377
(In general, creating the quads for an assignment e)33.336 240 R 5.377
(xpression in)-.195 F -.26(vo)-.52 G(lv).26 E 5.377(es tw)-.195 F 8.627
(op)-.13 G(arts:)-8.627 E 2.11(Computing the v)33.336 255 R 2.11
(alue of the right side \(the rv)-.325 F 2.111
(alue\), and determining ho)-.325 F 5.361(wt)-.325 G 5.361(os)-5.361 G
2.111(tore that)-5.361 F -.325(va)33.336 270 S
(lue on the left side \(the lv).325 E(alue\).)-.325 E/F4 10/Courier@0 SF
(union node *gen_lvalue\(union node *node,int *mode\))33.336 282 Q({)
33.336 294 Q
(if \(node->type == SCALAR VARIABLE\) {*mode=DIRECT;return node})90.936
306 Q(if \(node->type == CONSTANT\) return NULL;)90.936 318 Q
(if \(node->type == DEREF\))90.936 330 Q({)12 E(*mode=INDIRECT;)148.536
342 Q(return=gen_rvalue\(node->child,NULL\);)148.536 354 Q(})90.936 366
Q(//etc.)90.936 378 Q(})33.336 390 Q F2 -1.8(gen_lvalue)32.436 411 S F1
.744(can either return the place which is a direct lv)4.894 F .744
(alue, or it can return an rv)-.325 F(alue)-.325 E 1.593
(which can be used indirectly as an lv)33.336 426 R 1.594
(alue through a pointer ST)-.325 F 1.594(ORE operation.)-.234 F 1.594
(\(It can)8.094 F 1.307
(also return an error if the operand can not be an lv)33.336 441 R 1.306
(alue, e.g. the e)-.325 F 1.306(xpression 2=3\) Gi)-.195 F -.195(ve)
-.325 G(n).195 E(this, we can generate assignment:)33.336 456 Q F4
(union node *gen_assign\(union node *node\))33.336 468 Q({)33.336 480 Q
(dst=gen_lvalue\(node->left,&dstmode\);)90.936 492 Q
(if \(dst==NULL\) {report error, invalid lhs of assignment})90.936 504 Q
(if \(dstmode==DIRECT\))90.936 516 Q(gen_rvalue\(node->right,dst\);)
148.536 528 Q(else)90.936 540 Q({)90.936 552 Q
(t1=gen_rvalue\(node->right,NULL\);)148.536 564 Q
(emit\(STORE,t1,dst,NULL\);)148.536 576 Q(})90.936 588 Q(})33.336 600 Q
F1 .945(Note that in the sk)33.336 621 R .945(eletal code abo)-.13 F
-.195(ve)-.195 G 4.195(,t).195 G .945(ype con)-4.195 F -.195(ve)-.52 G
.945(rsions are not considered.).195 F .946(It is assumed)7.446 F 1.843
(that the rhs and lhs of the assignment are identical types.)33.336 636
R 1.843(If the)8.343 F 5.093(ya)-.195 G 1.843(re not,)-5.093 F F2 -1.8
(gen_assign)4.193 G F1 -.13(wo)33.336 651 S 1.552(uld ha).13 F 1.942
-.195(ve t)-.26 H 4.802(oi).195 G 1.552(nsert a type con)-4.802 F -.195
(ve)-.52 G 1.553(rsion operation.).195 F 1.553
(Another approach is to mak)8.053 F 4.803(eap)-.13 G(ass)-4.803 E -.195
(ove)33.336 666 S 4.693(rt).195 G 1.443(he AST before IR generation and\
 insert type cast nodes where needed, as if the)-4.693 F(y)-.195 E
(had been e)33.336 681 Q(xplicitly placed in the e)-.195 E
(xpression \(e.g.)-.195 E F2 -1.8(int a;a=\(int\)1.0;)2.35 G F1(\)).9 E
F3 -.442(Ty)217.864 711 S(pe Con).442 E -.13(ve)-.52 G(rsions).13 E 0 Cg
EP
%%Page: 13 13
%%BeginPageSetup
BP
%%EndPageSetup
/F0 9/Times-Roman@0 SF 138.492(ECE466:Compilers Unit)33.336 60 R
(5/pg 13)2.25 E(\2512019 Jef)142.155 E 2.25(fH)-.225 G(akner)-2.25 E/F1
13/Times-Roman@0 SF(Man)33.336 120 Q 5.994(yt)-.195 G 2.744(ype con)
-5.994 F -.195(ve)-.52 G 2.744(rsions, whether the).195 F 5.994(ya)-.195
G 2.744(re implicit from C')-5.994 F 5.994(st)-.715 G 2.744
(ype promotion rules, or)-5.994 F -.195(ex)33.336 135 S 1.481
(plicit casts, do not actually change the binary v).195 F 1.48
(alue of a v)-.325 F 1.48(ariable and thus are a null)-.325 F .416
(operation from an IR standpoint.)33.336 150 R .416
(Where actual IR needs to be generated is when there is)6.916 F 4.933
(ac)33.336 165 S 1.683(hange of representation, e.g. con)-4.933 F -.195
(ve)-.52 G 1.683(rting from a \215oat to an int.).195 F 1.682(When con)
8.182 F -.195(ve)-.52 G 1.682(rting an).195 F 1.486(unsigned short to a\
 long, the most signi\214cant bits are 0-\214lled, b)33.336 180 R 1.487
(ut going from a signed)-.26 F 2.859
(short to a signed long, the sign bit of the source must be e)33.336 195
R 2.858(xtended to \214ll the most)-.195 F
(signi\214cant bits of the destination.)33.336 210 Q 1.425
(It is best to come up with some generic con)33.336 231 R -.195(ve)-.52
G 1.425(rsion IR opcodes, e.g. CVTFI, and defer).195 F(implementation t\
o the instruction selection phase of \214nal code generation.)33.336 246
Q/F2 13/Times-Bold@0 SF(Arrays and P)181.718 276 Q(ointer Arithmetic)
-.26 E F1(Consider:)33.336 312 Q/F3 10/Courier@0 SF(int a[10],v;)33.336
324 Q(v= *a;)90.936 336 Q F1 .053(Recall from Unit 4 that in an e)33.336
357 R .053(xpression, something of type "array of X" is transformed to)
-.195 F .671(type "pointer to X" \(e)33.336 372 R .671
(xcept when that something is the direct ar)-.195 F .672
(gument of the address-of)-.234 F .85(or sizeof operator\).)33.336 387 R
.85(In generating the quads for the e)7.35 F .849(xpression abo)-.195 F
-.195(ve)-.195 G 4.099(,w).195 G 4.099(en)-4.099 G .849(eed to obtain)
-4.099 F(the address of the start of the array)33.336 402 Q/F4 13
/Courier@0 SF(a)2.35 E F1 3.25(,t)-.9 G
(hen access the memory at that address:)-3.25 E F3 27.6(%T1= LEA)33.336
414 R(a)39.6 E 27.6(%T2= LOAD %T1)33.336 426 R 39.6(v= MOV)33.336 438 R
(%T2)39.6 E F1(The)33.336 459 Q F4 -1.8(LEA)5.169 G F1 2.819(\(Load Ef)
6.969 F(fecti)-.325 E 3.209 -.195(ve A)-.325 H 2.819
(ddress\) quad obtains not the v).195 F 2.82(alue of its operand, b)
-.325 F 2.82(ut its)-.26 F 3.882(memory address.)33.336 474 R 5.962
-1.04(We a)10.382 H 3.882(re choosing not to e)1.04 F 3.881
(xpose at this time ho)-.195 F 7.131(wt)-.325 G 3.881(he address is)
-7.131 F 4.512(computed. E.g.)33.336 489 R(if)4.512 E F4(a)3.612 E F1
1.262(is a local v)3.612 F 1.262
(ariable, then the address might be obtained in assembly)-.325 F
(language by adding an of)33.336 504 Q
(fset to the stack frame pointer re)-.325 E(gister)-.195 E(.)-.715 E
4.008 -1.04(To m)33.336 525 T 1.928
(odify our quad generation algorithm to be array-a)1.04 F -.13(wa)-.195
G 1.927(re, we need to add a line to).13 F F4 -1.8(gen_rvalue\(\))32.436
540 S F1(:).9 E F3(/*...*/)90.936 552 Q
(if \(node->type is ARRAY VARIABLE\))90.936 564 Q({)90.936 576 Q
(temp=new_temporary\(\);)148.536 588 Q(emit\(LEA,node,NULL,temp\);)
148.536 600 Q(return temp;)148.536 612 Q(})90.936 624 Q(/*...*/)90.936
636 Q F1(Consider)33.336 657 Q F4 -1.8(a[i]=v)2.982 G F1 3.882(,w).9 G
.633(here a is an array of ints, i and v are ints.)-3.882 F 2.713 -1.04
(We k)7.133 H(no)1.04 E 3.883(wf)-.325 G .633(rom Unit 4 that)-3.883 F
3.639(this e)33.336 672 R 3.639(xpression is equi)-.195 F -.325(va)-.325
G 3.639(lent to).325 F F4 -1.8(*\(a+i\)=v)5.989 G F1 10.139(.\().9 G
3.639(In f)-10.139 F 3.638(act, one potential approach to AST)-.13 F .83
(generation is to apply this equi)33.336 687 R -.325(va)-.325 G(lenc)
.325 E 2.52 -.845(y, w)-.195 H .83
(hich is guaranteed by the C language standard,).845 F 2.438
(and dispense entirely with the [] operator as an AST node.)33.336 702 R
2.437(This w)8.937 F 2.437(ould simplify the)-.13 F .44(number of cases\
 that need to be coded both for AST and IR generation\) Furthermore, we)
33.336 717 R(kno)33.336 732 Q 3.432(wt)-.325 G .181(hat when pointers a\
nd ints are added, there is an implicit multiply by the sizeof the)
-3.432 F 0 Cg EP
%%Page: 14 14
%%BeginPageSetup
BP
%%EndPageSetup
/F0 9/Times-Roman@0 SF 138.492(ECE466:Compilers Unit)33.336 60 R
(5/pg 14)2.25 E(\2512019 Jef)142.155 E 2.25(fH)-.225 G(akner)-2.25 E/F1
13/Times-Roman@0 SF(base type of the pointer)33.336 120 Q 6.5(.T)-.715 G
(herefore, the quads for this e)-6.5 E(xpression are:)-.195 E/F2 10
/Courier@0 SF 27.6(%T1= LEA)33.336 132 R(a)39.6 E 27.6(%T2= MUL)33.336
144 R(i,4)39.6 E 27.6(%T3= ADD)33.336 156 R(%T1,%T2)39.6 E 21.6
(STORE v,%T3)90.936 168 R F1 -1.04(We)33.336 189 S -.13('l)1.04 G 7.979
(ln).13 G 4.729(eed to add more code to)-7.979 F/F3 13/Courier@0 SF -1.8
(gen_rvalue)7.08 G F1 4.73(to insert the MUL operation when)8.88 F .549
(performing addition of a pointer to an inte)33.336 204 R(ger)-.195 E
7.049(.H)-.715 G .549(andling of subtracting an inte)-7.049 F .548
(ger from a)-.195 F .108(pointer is similar)33.336 219 R 6.608(.W)-.715
G 3.358(ea)-7.648 G .108
(lso need to consider subtraction of a pointer from a pointer)-3.358 F
3.359(,w)-.52 G(hich)-3.359 E .927(creates a)33.336 234 R F3 -1.8(DIV)
3.277 G F1 4.177(operation. The)5.077 F .927
(implementation of these items is left as an e)4.177 F -.195(xe)-.195 G
.926(rcise for the).195 F(reader)33.336 249 Q(.)-.715 E 1.77
(In generating quads as sho)33.336 270 R 1.771(wn abo)-.325 F 2.161
-.195(ve f)-.195 H 1.771(or array reference, we ha).195 F 2.161 -.195
(ve c)-.26 H 1.771(hosen to break this).195 F .94(operation do)33.336
285 R .94(wn into simpler steps.)-.325 F .94(Some te)7.44 F .939
(xts illustrate array references by introducing)-.195 F 1.902(an e)
33.336 300 R 1.902(xplicit [] operator)-.195 F 8.402(.S)-.715 G 1.903
(ince in the C language, arrays are nothing more than pointer)-8.402 F
1.477(arithmetic, this w)33.336 315 R 1.477(ould be of dubious v)-.13 F
4.727(alue. Some)-.325 F(tar)4.726 E 1.476
(get architectures \(e.g. X86\) might)-.234 F 3.511(support an addressi\
ng mode speci\214cally designed to streamline array access, which)33.336
330 R 1.649(combines the multiplication and addition abo)33.336 345 R
-.195(ve)-.195 G 8.149(.W).195 G 4.899(eh)-9.189 G -2.925 -.26(av e)
-4.899 H 1.649(made the IR more primiti)5.159 F -.195(ve)-.325 G .014
(than the machine language, and it w)33.336 360 R .014
(ould be up to the back-end optimizer to recognize this)-.13 F .439(mul\
tiply/add/indirect sequence and transform it into the appropriate addre\
ssing mode.)33.336 375 R(In)6.939 E .715(the LL)33.336 390 R .715
(VM IR, array types are represented fully)-1.3 F 3.965(,a)-.845 G .715
(nd an operator)-3.965 F F3 -1.8(getelementptr)3.065 G F1 -.195(ex)4.865
G .715(ists to).195 F(perform the array inde)33.336 405 Q 3.25(xc)-.195
G 3.25(omputation. So)-3.25 F(the abo)3.25 E .39 -.195(ve ex)-.195 H
(ample might be e).195 E(xpressed as:)-.195 E F2 27.6(%T3= GETELEM)
33.336 417 R(a,i)15.6 E 21.6(STORE v,%T3)90.936 429 R/F4 13/Times-Bold@0
SF(Multi-dimensional arrays)196.375 474 Q F1(No)33.336 510 Q 2.049 -.845
(w, c)-.325 H .359(onsider a multi-dimensional array:).845 F F3 -1.8
(v=a[i][j])2.708 G F1 3.608(,w).9 G .358(here a is declared)-3.608 F F3
.358 -1.8(int a[10][20])2.708 H F1(.).9 E 4.636 -1.04(We k)33.336 525 T
(no)1.04 E 5.806(wf)-.325 G 2.556
(rom the de\214nition of the C language that this is equi)-5.806 F -.325
(va)-.325 G 2.557(lent to).325 F F3 -1.8(\(a[i]\)[j])4.907 G F1(,).9 E
5.251(because C doesn')33.336 540 R 8.501(tr)-.234 G 5.251
(eally support multi-dimensional arrays.)-8.501 F 5.25
(Therefore, the minor)11.75 F 1.803
(subscript operation is higher in the AST)33.336 555 R 8.304(.F)-.962 G
(urther)-8.304 E 5.054(,t)-.52 G 1.804(his is equi)-5.054 F -.325(va)
-.325 G 1.804(lent to).325 F F3 -1.8(*\(\(*\(a+i\)\)+j\))4.154 G F1(.).9
E(Let')33.336 570 Q 9.658(sb)-.715 G -.195(eg)-9.658 G 6.408
(in to generate quads for this e).195 F 6.408
(xpression, starting with the innermost)-.195 F(sube)33.336 585 Q
(xpression:)-.195 E F2 27.6(%T1= LEA)33.336 597 R(a)39.6 E 27.6
(%T2= MUL)33.336 609 R(i,80)39.6 E 27.6(%T3= ADD)33.336 621 R(%T1,%T2)
39.6 E F1 -.91(Te)33.336 636 S 4.354(mporary T3 will contain the v).91 F
4.354(alue of a+i.)-.325 F 4.354(In this sube)10.854 F 4.354
(xpression, a is of type)-.195 F 15.537(array_of\(10,array_of\(20,ints\
\)\) which is instantly promoted to pointer_to)33.336 651 R 5.924
(\(array_of\(20,ints\)\). Therefore,)33.336 666 R 2.675
(the pointer arithmetic multiplier is 80 \(20*sizeof\(int\)\).)5.924 F
2.904(The ne)33.336 681 R 2.904(xt innermost sube)-.195 F 2.904
(xpression is *\(a+i\) i.e. *T3.)-.195 F 2.904(In the earlier e)9.404 F
2.904(xamples of de-)-.195 F 1.416(referencing a pointer)33.336 696 R
4.666(,w)-.52 G 4.666(ee)-4.666 G 1.416(mitted a LO)-4.666 F 1.416
(AD instruction to fetch the rv)-.455 F 4.666(alue. But)-.325 F 1.417
(here we)4.666 F(ha)33.336 711 Q 1.623 -.195(ve a p)-.26 H 1.232
(ointer to an array type.).195 F 1.232(The rv)7.732 F 1.232
(alue of an array is simply its address, and T3 is)-.325 F .343(already\
 pointing at the array and thus contains its address, so the dereferenc\
e operation is)33.336 726 R 5.433(an)33.336 741 S 2.182
(ull operation, and we do not need to emit an)-5.433 F 5.432(ya)-.195 G
2.182(dditional quads.)-5.432 F 2.182(Returning to our)8.682 F 0 Cg EP
%%Page: 15 15
%%BeginPageSetup
BP
%%EndPageSetup
/F0 9/Times-Roman@0 SF 138.492(ECE466:Compilers Unit)33.336 60 R
(5/pg 15)2.25 E(\2512019 Jef)142.155 E 2.25(fH)-.225 G(akner)-2.25 E/F1
13/Times-Roman@0 SF -.13(wo)33.336 120 S(rk-in-progress).13 E/F2 13
/Courier@0 SF -1.8(gen_rvalue)2.35 G F1
(function, we need to modify it slightly:)4.15 E/F3 10/Courier@0 SF 86.4
(gen_rvalue\(node,target\) //return)33.336 132 R
(value is the result name)6 E({)33.336 144 Q(/*...*/)90.936 156 Q
(if \(node->type == POINTER_DEREF\))90.936 168 Q({)90.936 180 Q
(if \(node->to is of ARRAY type\))148.536 192 Q({)148.536 204 Q
(return gen_rvalue\(node->to,target\);)206.136 216 Q(})148.536 228 Q
(addr=gen_rvalue\(node->to,NULL\);)148.536 240 Q
(if \(!target\) target=new_temporary\(\);)148.536 252 Q
(emit\(LOAD,addr,NULL,target\);)148.536 264 Q(return target;)148.536 276
Q(})90.936 288 Q(*...*/)90.936 300 Q F1(No)33.336 321 Q 3.535(wl)-.325 G
.285(et us complete the quad generation by emitting code for the outerm\
ost addition and)-3.535 F(dereferencing operations:)33.336 336 Q F3 27.6
(%T4= MUL)33.336 348 R(j,4)39.6 E 27.6(%T5= ADD)33.336 360 R(%T3,%T4)
39.6 E 39.6(v= LOAD)33.336 372 R(%T5)33.6 E F1 .588
(The illustration belo)33.336 402 R 3.837(ws)-.325 G(ho)-3.837 E .587
(ws the AST structure of the e)-.325 F .587
(xpression, an AST representation)-.195 F 5.117
(of the type of multi-dimensional array v)33.336 417 R 5.118
(ariable a, and the type promotions and)-.325 F
(transformations which tak)33.336 432 Q 3.25(ep)-.13 G(lace.)-3.25 E 0
Cg EP
%%Page: 16 16
%%BeginPageSetup
BP
%%EndPageSetup
/F0 9/Times-Roman@0 SF 138.492(ECE466:Compilers Unit)33.336 60 R
(5/pg 16)2.25 E(\2512019 Jef)142.155 E 2.25(fH)-.225 G(akner)-2.25 E 0 0
362 362 -357 357 86.336 477 PBEGIN
%%BeginDocument: mdarray.eps
%!PS-Adobe-2.0 EPSF-2.0
%%Title: mdarray.fig
%%Creator: fig2dev Version 3.2 Patchlevel 4
%%CreationDate: Wed Nov 28 18:13:27 2012
%%For: hak@lex ()
%%BoundingBox: 0 0 362 357
%%Magnification: 1.0000
%%EndComments
/$F2psDict 200 dict def
$F2psDict begin
$F2psDict /mtrx matrix put
/col-1 {0 setgray} bind def
/col0 {0.000 0.000 0.000 srgb} bind def
/col1 {0.000 0.000 1.000 srgb} bind def
/col2 {0.000 1.000 0.000 srgb} bind def
/col3 {0.000 1.000 1.000 srgb} bind def
/col4 {1.000 0.000 0.000 srgb} bind def
/col5 {1.000 0.000 1.000 srgb} bind def
/col6 {1.000 1.000 0.000 srgb} bind def
/col7 {1.000 1.000 1.000 srgb} bind def
/col8 {0.000 0.000 0.560 srgb} bind def
/col9 {0.000 0.000 0.690 srgb} bind def
/col10 {0.000 0.000 0.820 srgb} bind def
/col11 {0.530 0.810 1.000 srgb} bind def
/col12 {0.000 0.560 0.000 srgb} bind def
/col13 {0.000 0.690 0.000 srgb} bind def
/col14 {0.000 0.820 0.000 srgb} bind def
/col15 {0.000 0.560 0.560 srgb} bind def
/col16 {0.000 0.690 0.690 srgb} bind def
/col17 {0.000 0.820 0.820 srgb} bind def
/col18 {0.560 0.000 0.000 srgb} bind def
/col19 {0.690 0.000 0.000 srgb} bind def
/col20 {0.820 0.000 0.000 srgb} bind def
/col21 {0.560 0.000 0.560 srgb} bind def
/col22 {0.690 0.000 0.690 srgb} bind def
/col23 {0.820 0.000 0.820 srgb} bind def
/col24 {0.500 0.190 0.000 srgb} bind def
/col25 {0.630 0.250 0.000 srgb} bind def
/col26 {0.750 0.380 0.000 srgb} bind def
/col27 {1.000 0.500 0.500 srgb} bind def
/col28 {1.000 0.630 0.630 srgb} bind def
/col29 {1.000 0.750 0.750 srgb} bind def
/col30 {1.000 0.880 0.880 srgb} bind def
/col31 {1.000 0.840 0.000 srgb} bind def

end
save
newpath 0 357 moveto 0 0 lineto 362 0 lineto 362 357 lineto closepath clip newpath
5.2 360.7 translate
1 -1 scale

/cp {closepath} bind def
/ef {eofill} bind def
/gr {grestore} bind def
/gs {gsave} bind def
/sa {save} bind def
/rs {restore} bind def
/l {lineto} bind def
/m {moveto} bind def
/rm {rmoveto} bind def
/n {newpath} bind def
/s {stroke} bind def
/sh {show} bind def
/slc {setlinecap} bind def
/slj {setlinejoin} bind def
/slw {setlinewidth} bind def
/srgb {setrgbcolor} bind def
/rot {rotate} bind def
/sc {scale} bind def
/sd {setdash} bind def
/ff {findfont} bind def
/sf {setfont} bind def
/scf {scalefont} bind def
/sw {stringwidth} bind def
/tr {translate} bind def
/tnt {dup dup currentrgbcolor
  4 -2 roll dup 1 exch sub 3 -1 roll mul add
  4 -2 roll dup 1 exch sub 3 -1 roll mul add
  4 -2 roll dup 1 exch sub 3 -1 roll mul add srgb}
  bind def
/shd {dup dup currentrgbcolor 4 -2 roll mul 4 -2 roll mul
  4 -2 roll mul srgb} bind def
 /DrawEllipse {
	/endangle exch def
	/startangle exch def
	/yrad exch def
	/xrad exch def
	/y exch def
	/x exch def
	/savematrix mtrx currentmatrix def
	x y tr xrad yrad sc 0 0 1 startangle endangle arc
	closepath
	savematrix setmatrix
	} def

/$F2psBegin {$F2psDict begin /$F2psEnteredState save def} def
/$F2psEnd {$F2psEnteredState restore end} def

$F2psBegin
10 setmiterlimit
0 slj 0 slc
 0.06000 0.06000 sc
%
% Fig objects follow
%
% 
% here starts figure with depth 50
% Ellipse
7.500 slw
n 2102 1734 300 300 0 360 DrawEllipse gs col0 s gr

/Times-Roman ff 166.67 scf sf
2100 1725 m
gs 1 -1 sc (VAR) dup sw pop 2 div neg 0 rm  col0 sh gr
/Times-Roman ff 166.67 scf sf
2100 1950 m
gs 1 -1 sc (v) dup sw pop 2 div neg 0 rm  col0 sh gr
% Ellipse
n 3000 900 300 300 0 360 DrawEllipse gs col0 s gr

/Times-Roman ff 166.67 scf sf
3000 900 m
gs 1 -1 sc (=) dup sw pop 2 div neg 0 rm  col0 sh gr
% Ellipse
n 3900 1800 300 300 0 360 DrawEllipse gs col0 s gr

/Times-Roman ff 166.67 scf sf
3900 1800 m
gs 1 -1 sc (DEREF) dup sw pop 2 div neg 0 rm  col0 sh gr
% Ellipse
n 3000 3600 300 300 0 360 DrawEllipse gs col0 s gr

/Times-Roman ff 166.67 scf sf
3000 3600 m
gs 1 -1 sc (DEREF) dup sw pop 2 div neg 0 rm  col0 sh gr
% Ellipse
n 3900 2700 300 300 0 360 DrawEllipse gs col0 s gr

/Times-Roman ff 166.67 scf sf
3900 2700 m
gs 1 -1 sc (+) dup sw pop 2 div neg 0 rm  col0 sh gr
% Ellipse
n 4502 3609 300 300 0 360 DrawEllipse gs col0 s gr

/Times-Roman ff 166.67 scf sf
4500 3600 m
gs 1 -1 sc (VAR) dup sw pop 2 div neg 0 rm  col0 sh gr
/Times-Roman ff 166.67 scf sf
4500 3825 m
gs 1 -1 sc (j) dup sw pop 2 div neg 0 rm  col0 sh gr
% Ellipse
n 3000 4500 300 300 0 360 DrawEllipse gs col0 s gr

/Times-Roman ff 166.67 scf sf
3000 4500 m
gs 1 -1 sc (+) dup sw pop 2 div neg 0 rm  col0 sh gr
% Ellipse
n 2177 5109 300 300 0 360 DrawEllipse gs col0 s gr

/Times-Roman ff 166.67 scf sf
2175 5100 m
gs 1 -1 sc (VAR) dup sw pop 2 div neg 0 rm  col0 sh gr
/Times-Roman ff 166.67 scf sf
2175 5325 m
gs 1 -1 sc (a) dup sw pop 2 div neg 0 rm  col0 sh gr
% Ellipse
n 3902 5109 300 300 0 360 DrawEllipse gs col0 s gr

/Times-Roman ff 166.67 scf sf
3900 5100 m
gs 1 -1 sc (VAR) dup sw pop 2 div neg 0 rm  col0 sh gr
/Times-Roman ff 166.67 scf sf
3900 5325 m
gs 1 -1 sc (i) dup sw pop 2 div neg 0 rm  col0 sh gr
% Polyline
n 600 3300 m 1200 3300 l 1200 3900 l 600 3900 l
 cp gs col0 s gr 
/Times-Roman ff 166.67 scf sf
900 3600 m
gs 1 -1 sc (ARRAY) dup sw pop 2 div neg 0 rm  col0 sh gr
/Times-Roman ff 166.67 scf sf
900 3825 m
gs 1 -1 sc (10) dup sw pop 2 div neg 0 rm  col0 sh gr
% Polyline
n 600 4200 m 1200 4200 l 1200 4800 l 600 4800 l
 cp gs col0 s gr 
/Times-Roman ff 166.67 scf sf
900 4500 m
gs 1 -1 sc (ARRAY) dup sw pop 2 div neg 0 rm  col0 sh gr
/Times-Roman ff 166.67 scf sf
900 4725 m
gs 1 -1 sc (20) dup sw pop 2 div neg 0 rm  col0 sh gr
% Polyline
n 600 5100 m 1200 5100 l 1200 5700 l 600 5700 l
 cp gs col0 s gr 
/Times-Roman ff 166.67 scf sf
900 5475 m
gs 1 -1 sc (INT) dup sw pop 2 div neg 0 rm  col0 sh gr
% Polyline
n 1500 3900 m 2100 3900 l 2100 4500 l 1500 4500 l
 cp gs col0 s gr 
/Times-Roman ff 166.67 scf sf
1800 4200 m
gs 1 -1 sc (PTR) dup sw pop 2 div neg 0 rm  col0 sh gr
% Polyline
n 1500 3000 m 2100 3000 l 2100 3600 l 1500 3600 l
 cp gs col0 s gr 
/Times-Roman ff 166.67 scf sf
1800 3300 m
gs 1 -1 sc (PTR) dup sw pop 2 div neg 0 rm  col0 sh gr
% Arc
gs  clippath
2565 4845 m 2516 4880 l 2606 5002 l 2560 4888 l 2655 4966 l cp
eoclip
 [15 45] 45 sd
n 2185.1 5225.3 505.9 127.8 -43.8 arcn
gs col0 s gr
 gr
 [] 0 sd
% arrowhead
n 2655 4966 m 2560 4888 l 2606 5002 l  col0 s
% Arc
gs  clippath
3558 2847 m 3503 2824 l 3443 2963 l 3518 2865 l 3498 2987 l cp
eoclip
 [15 45] 45 sd
n 3029.2 2712.5 514.5 84.9 15.5 arcn
gs col0 s gr
 gr
 [] 0 sd
% arrowhead
n 3498 2987 m 3518 2865 l 3443 2963 l  col0 s
% Polyline
n 2700 1050 m
 2250 1500 l gs col0 s gr 
% Polyline
n 3225 1050 m
 3750 1575 l gs col0 s gr 
% Polyline
n 3900 2100 m
 3900 2400 l gs col0 s gr 
% Polyline
n 3675 2925 m
 3225 3375 l gs col0 s gr 
% Polyline
n 4050 2925 m
 4350 3375 l gs col0 s gr 
% Polyline
n 3000 3900 m
 3000 4200 l gs col0 s gr 
% Polyline
n 2775 4650 m
 2400 4950 l gs col0 s gr 
% Polyline
n 3225 4650 m
 3675 4950 l gs col0 s gr 
% Polyline
gs  clippath
870 4215 m 930 4215 l 930 4063 l 900 4183 l 870 4063 l cp
eoclip
n 900 3900 m
 900 4200 l gs col0 s gr gr

% arrowhead
n 870 4063 m 900 4183 l 930 4063 l  col0 s
% Polyline
gs  clippath
870 5115 m 930 5115 l 930 4963 l 900 5083 l 870 4963 l cp
eoclip
n 900 4800 m
 900 5100 l gs col0 s gr gr

% arrowhead
n 870 4963 m 900 5083 l 930 4963 l  col0 s
% Polyline
gs  clippath
944 4110 m 981 4157 l 1101 4065 l 988 4115 l 1064 4017 l cp
eoclip
n 1650 3600 m
 975 4125 l gs col0 s gr gr

% arrowhead
n 1064 4017 m 988 4115 l 1101 4065 l  col0 s
% Polyline
gs  clippath
945 5084 m 980 5133 l 1102 5043 l 988 5090 l 1067 4995 l cp
eoclip
n 1800 4500 m
 975 5100 l gs col0 s gr gr

% arrowhead
n 1067 4995 m 988 5090 l 1102 5043 l  col0 s
% Polyline
 [60] 0 sd
gs  clippath
592 3332 m 630 3285 l 512 3191 l 587 3290 l 474 3238 l cp
eoclip
n 2025 5400 m 1500 6000 l 225 6000 l 225 3000 l
 600 3300 l gs col0 s gr gr
 [] 0 sd
% arrowhead
n 474 3238 m 587 3290 l 512 3191 l  col0 s
% Polyline
 [60] 0 sd
gs  clippath
1845 3015 m 1905 3015 l 1905 2863 l 1875 2983 l 1845 2863 l cp
eoclip
n 2700 4575 m 2400 4725 l 2400 2850 l 1875 2850 l
 1875 3000 l gs col0 s gr gr
 [] 0 sd
% arrowhead
n 1845 2863 m 1875 2983 l 1905 2863 l  col0 s
% Polyline
 [60] 0 sd
gs  clippath
2405 3566 m 2370 3615 l 2493 3704 l 2413 3610 l 2528 3655 l cp
eoclip
n 2925 3975 m
 2400 3600 l gs col0 s gr gr
 [] 0 sd
% arrowhead
n 2528 3655 m 2413 3610 l 2493 3704 l  col0 s
% Polyline
 [60] 0 sd
gs  clippath
601 4383 m 625 4328 l 486 4268 l 585 4343 l 462 4323 l cp
eoclip
n 3075 3300 m 3075 3000 l 2475 2700 l 75 2700 l 75 4125 l
 600 4350 l gs col0 s gr gr
 [] 0 sd
% arrowhead
n 462 4323 m 585 4343 l 486 4268 l  col0 s
% Polyline
 [60] 0 sd
gs  clippath
2070 3809 m 2104 3858 l 2229 3771 l 2114 3816 l 2195 3722 l cp
eoclip
n 3600 2775 m
 2100 3825 l gs col0 s gr gr
 [] 0 sd
% arrowhead
n 2195 3722 m 2114 3816 l 2229 3771 l  col0 s
% Polyline
 [60] 0 sd
gs  clippath
3266 2920 m 3315 2954 l 3402 2829 l 3309 2911 l 3353 2795 l cp
eoclip
n 3825 2175 m
 3300 2925 l gs col0 s gr gr
 [] 0 sd
% arrowhead
n 3353 2795 m 3309 2911 l 3402 2829 l  col0 s
% Polyline
 [60] 0 sd
gs  clippath
615 5355 m 615 5295 l 463 5295 l 583 5325 l 463 5355 l cp
eoclip
n 3300 1200 m 3600 1500 l 3000 2175 l 825 2475 l -75 2475 l -75 5325 l

 600 5325 l gs col0 s gr gr
 [] 0 sd
% arrowhead
n 463 5355 m 583 5325 l 463 5295 l  col0 s
/Times-Roman ff 200.00 scf sf
1500 225 m
gs 1 -1 sc (Possible AST representation of expression) col0 sh gr
/Times-Roman ff 200.00 scf sf
1500 480 m
gs 1 -1 sc (and types \(solid lines==expr, dashed lines==types\)) col0 sh gr
/Times-Roman ff 200.00 scf sf
4275 1200 m
gs 1 -1 sc (v=a[i][j];) dup sw pop 2 div neg 0 rm  col0 sh gr
/Times-Roman ff 200.00 scf sf
4125 975 m
gs 1 -1 sc (int v;) dup sw pop 2 div neg 0 rm  col0 sh gr
/Times-Roman ff 200.00 scf sf
4350 750 m
gs 1 -1 sc (int a[10][20];) dup sw pop 2 div neg 0 rm  col0 sh gr
/Times-Roman ff 166.67 scf sf
2625 5625 m
gs 1 -1 sc (promotion of array) col0 sh gr
/Times-Roman ff 166.67 scf sf
2625 5820 m
gs 1 -1 sc (to pointer type) col0 sh gr
/Times-Roman ff 166.67 scf sf
2775 2625 m
gs 1 -1 sc (promotion) col0 sh gr
% here ends figure;
$F2psEnd
rs
showpage
%%EndDocument
end PEND/F1 13/Times-Bold@0 SF(Structur)238.209 528 Q(es)-.234 E/F2 13
/Times-Roman@0 SF 4.112(As)33.336 564 S .862(tructure is a b)-4.112 F
.862(unch of bytes of kno)-.26 F .861
(wn size, containing within it structure members at)-.325 F 1.809
(speci\214c of)33.336 579 R 5.059(fsets. When)-.325 F 5.059(a\()5.059 G
1.809(complete\) structure de\214nition is processed, the layout of the)
-5.059 F 1.664(structure can be determined.)33.336 594 R 1.663
(In order to do so, we must ha)8.163 F 2.053 -.195(ve k)-.26 H(no).195 E
1.663(wledge of the tar)-.325 F(get)-.234 E .637
(architecture, as we need to be able to compute the sizeof each member)
33.336 609 R 7.137(.W)-.715 G 3.887(ea)-8.177 G .637(lso need to)-3.887
F(kno)33.336 624 Q 4.23(wa)-.325 G .98
(bout possible alignment issues on that architecture.)-4.23 F 3.06 -1.04
(We w)7.48 H .98(ill tak)1.04 F 4.23(eu)-.13 G 4.23(pt)-4.23 G .98
(hese issues)-4.23 F .71(when we discuss speci\214c tar)33.336 639 R
3.96(gets. F)-.234 F .711(or no)-.195 F 2.401 -.845(w, l)-.325 H .711
(et us assume that the of).845 F .711(fsets of the structure)-.325 F
(members were determined at declaration time.)33.336 654 Q .165
(When we see an e)33.336 675 R(xpression)-.195 E/F3 13/Courier@0 SF -1.8
(s.e)2.515 G F2 3.415(,w).9 G(here)-3.415 E F3(s)2.515 E F2 .165
(is of structure type, and)2.515 F F3(e)2.515 E F2 .165
(is a bare identi\214er)2.515 F 3.414(,w)-.52 G(e)-3.414 E .531
(can consult the symbol table and \214nd the entry for member)33.336 690
R F3(e)2.881 E F2 .531(in that structure type.)2.881 F(This)7.031 E
2.314(entry contains the of)33.336 705 R 2.314
(fset in bytes of the member)-.325 F 5.564(,a)-.52 G 5.564(sw)-5.564 G
2.314(ell as the type of the member)-5.564 F(.)-.715 E(Consider this e)
33.336 720 Q(xample:)-.195 E/F4 10/Courier@0 SF
(struct s {int a,b,c;} *p,s;)33.336 732 Q 0 Cg EP
%%Page: 17 17
%%BeginPageSetup
BP
%%EndPageSetup
/F0 9/Times-Roman@0 SF 138.492(ECE466:Compilers Unit)33.336 60 R
(5/pg 17)2.25 E(\2512019 Jef)142.155 E 2.25(fH)-.225 G(akner)-2.25 E/F1
10/Courier@0 SF(int i;)33.336 117 Q(i=p->b;)90.936 129 Q(i=s.c;)90.936
141 Q/F2 13/Times-Roman@0 SF 4.035 -1.04(We a)33.336 156 T 1.955
(ssume that a,b,c ha)1.04 F 2.345 -.195(ve b)-.26 H 1.956
(een assigned of).195 F 1.956(fsets 0, 4 and 8.)-.325 F 1.956
(The IR which w)8.456 F 1.956(ould be)-.13 F
(generated for the \214rst assignment is:)33.336 171 Q F1 27.6(%T1= ADD)
33.336 183 R(p,4)97.2 E 39.6(i= LOAD)33.336 195 R(T1)91.2 E F2(No)33.336
210 Q 1.69 -.845(w, f)-.325 H(or the second assignment:).845 E F1 27.6
(%T1= LEA)33.336 222 R(s)97.2 E 27.6(%T2= ADD)33.336 234 R(T1,8)97.2 E
39.6(i= LOAD)33.336 246 R(T2)91.2 E F2 .598(In order to access the rv)
33.336 267 R .597(alue of a direct selection e)-.325 F .597
(xpression, we need to, in f)-.195 F .597(act, \214nd the)-.13 F 1.029
(address of its right operand relati)33.336 282 R 1.419 -.195(ve t)-.325
H 4.28(ot).195 G 1.03(he left operand.)-4.28 F 1.03
(The reader may see an analogy)7.53 F 1.499(here with array accesses.)
33.336 297 R(Let')7.999 E 4.749(ss)-.715 G 1.499(ee ho)-4.749 F 4.749
(ww)-.325 G 4.748(ec)-4.749 G 1.498
(an add support for structures to our quad)-4.748 F
(generator functions:)33.336 312 Q F1(gen_rvalue\(node,target\))33.336
324 Q({)33.336 336 Q(/*...*/)90.936 348 Q(if \(node->type == DIRECT_SEL\
ECTION || node->type==INDIRECT_SELECTION\))90.936 360 Q({)90.936 372 Q
(if \(node->type==DIRECT_SELECTION\))148.536 384 Q
(base=gen_addressof\(node->left\);)206.136 396 Q(else)148.536 408 Q
(base=gen_rvalue\(node->left\);)206.136 420 Q
(sym_entry=symbol_lookup\(node->left,node->right\);)148.536 432 Q
(temp=new_temporary\(\);)148.536 444 Q
(emit\(ADD,base,sym_entry->offset,temp\);)148.536 456 Q
(if \(!target\) target=new_temporary\(\);)148.536 468 Q
(emit\(LOAD,temp,NULL,target\);)148.536 480 Q(})90.936 492 Q/F3 13
/Courier@0 SF -1.8(gen_addressof\(\))32.436 513 S F2 .42
(is a function similar to)4.57 F F3 -1.8(gen_lvalue)2.771 G F2 6.921(.D)
.9 G .421(epending on implementation, the)-6.921 F(tw)33.336 528 Q 3.665
(of)-.13 G .415(unctions might be mer)-3.665 F(ged.)-.234 E F3 -1.8
(gen_addressof)9.265 G F2 .415(is also the function we')4.565 F 3.665
(dn)-.65 G .415(eed to handle)-3.665 F(the)33.336 543 Q F3(&)2.35 E F2
(operator)2.35 E(.)-.715 E 3.25(Ca)33.336 564 S(llo)-3.25 E
(ws for the assignment of structs, b)-.325 E(ut not of arrays.)-.26 E
(This is f)6.5 E(airly easily handled:)-.13 E F1(gen_assignment\(node\))
33.336 576 Q({)33.336 588 Q(/*...*/)90.936 600 Q
(if \(type_of\(node->right\) is STRUCT &&)90.936 612 Q
(type_of\(node->left\) is STRUCT\))148.536 624 Q({)90.936 636 Q
(check that types are)148.536 648 Q(identical)12 E
(emit\(COPY,gen_addressof\(node->left\),)148.536 660 Q
(size_of\(node->right\),gen_addressof\(node->right\)\);)206.136 672 Q(})
90.936 684 Q F2 2.551(Here we introduce an IR instruction dst=COPY src,\
sz in which src and dst are both)33.336 705 R .842
(interpreted as memory addresses, and sz is the number of bytes to cop)
33.336 720 R 5.781 -.845(y. I)-.13 H 4.091(ft).845 G .841(he structure)
-4.091 F 2.211(has f)33.336 735 R 2.211(airly fe)-.13 F 5.462(wm)-.325 G
2.212(embers, it might be more ef)-5.462 F 2.212
(\214cient to generate quads which cop)-.325 F 5.462(yt)-.13 G(he)-5.462
E 0 Cg EP
%%Page: 18 18
%%BeginPageSetup
BP
%%EndPageSetup
/F0 9/Times-Roman@0 SF 138.492(ECE466:Compilers Unit)33.336 60 R
(5/pg 18)2.25 E(\2512019 Jef)142.155 E 2.25(fH)-.225 G(akner)-2.25 E/F1
13/Times-Roman@0 SF(structure member)33.336 120 Q(-by-member)-.26 E(.)
-.715 E 2.718(It is left as an e)33.336 141 R -.195(xe)-.195 G 2.718
(rcise for the reader to e).195 F 2.718(xplore ho)-.195 F 5.968(wm)-.325
G 2.718(ore complicated e)-5.968 F(xpressions)-.195 E(in)33.336 156 Q
-.26(vo)-.52 G(lving arrays, pointers and structures w).26 E
(ould be handled.)-.13 E .201(An ar)33.336 177 R .201
(gument could be made for not breaking do)-.234 F .202
(wn the structure access mechanism in the)-.325 F .847(IR, and instead \
introducing speci\214c operations which mimic the . and -> operators in\
 C.)33.336 192 R .964(The Dragon te)33.336 207 R .964
(xt uses this approach.)-.195 F .965(In the schema which we ha)7.464 F
1.355 -.195(ve b)-.26 H .965(een using, all quad).195 F 3.951
(operations in)33.336 222 R -.26(vo)-.52 G(lv).26 E 7.201(ep)-.195 G
(rimiti)-7.201 E 4.341 -.195(ve s)-.325 H 3.951
(calars, and there is no mechanism for representing a).195 F
(composite v)33.336 237 Q(alue.)-.325 E .166(Because LL)33.336 258 R
.166(VM has a rich type system, structures are carried as a composite t\
ype, and the)-1.3 F 1.286(member selection operator is carried through \
as a quad opcode, with the actual address)33.336 273 R
(computations pushed do)33.336 288 Q(wn to tar)-.325 E
(get code generation phase.)-.234 E/F2 13/Times-Bold@0 SF(Unions)247.829
318 Q F1 3.655(Au)33.336 354 S .405(nion is a b)-3.655 F .405
(unch of bytes whose size is lar)-.26 F .405(ge enough to hold the lar)
-.234 F .406(gest member of the)-.234 F .221(union \(including possible\
 padding needed for alignment restrictions\).)33.336 369 R .221
(From an assembly-)6.721 F(language standpoint, the e)33.336 384 Q
(xistence of a union is a "don')-.195 E 3.25(t-care." Consider:)-.234 F
/F3 10/Courier@0 SF(union u {)33.336 396 Q(int i;)90.936 408 Q
(int a[10];)90.936 420 Q 6(}u)33.336 432 S(;)-6 E(u.i++;)33.336 456 Q F1
(The access to the union member is basically equi)33.336 477 Q -.325(va)
-.325 G(lent to:).325 E F3(*\(int *\)\(&u\)++;)33.336 489 Q F1 3.635(Ac)
33.336 504 S .386(ast which changes a pointer to X to a pointer to Y is\
 a null operation, because \(unless)-3.635 F 3.953
(the architecture is such that these pointers ha)33.336 519 R 4.343
-.195(ve d)-.26 H(if).195 E 3.953(ferent representations, which is)-.325
F .173(generally not the case\) the v)33.336 534 R .173
(alue of the pointer itself will not change.)-.325 F .174
(Therefore, the quad)6.674 F(for the e)33.336 549 Q(xample abo)-.195 E
.39 -.195(ve i)-.195 H 3.25(ss).195 G(imply:)-3.25 E F3 21.6(u=ADD 1,u)
33.336 561 R F2(Constant F)176.427 606 Q(olding & Pr)-.325 E(opagation)
-.234 E F1 1.105(It is possible during IR generation to see certain opp\
ortunities for replacing e)33.336 642 R(xpressions)-.195 E
(with constants.)33.336 657 Q(E.g.)6.5 E F3(a=3+4*2;)33.336 669 Q 27.6
(%T1= MUL)33.336 693 R(4,2)39.6 E 39.6(a= ADD)33.336 705 R(3,T1)39.6 E
F1 1.137(Clearly this can be replaced with a simple)33.336 726 R/F4 13
/Courier@0 SF 1.138 -1.8(a=MOV 11)3.488 H F1 7.638(.I).9 G 4.388(no)
-7.638 G 1.138(rder to perform this)-4.388 F F2(constant)4.388 E -.325
(fo)33.336 741 S(lding).325 E F1 3.871(,o)C(ur)-3.871 E F4 -1.8
(gen_rvalue)2.971 G F1 .621(needs to be gi)4.771 F -.195(ve)-.325 G
3.871(nt).195 G .62(he intelligence to recognize that an operation)
-3.871 F 0 Cg EP
%%Page: 19 19
%%BeginPageSetup
BP
%%EndPageSetup
/F0 9/Times-Roman@0 SF 138.492(ECE466:Compilers Unit)33.336 60 R
(5/pg 19)2.25 E(\2512019 Jef)142.155 E 2.25(fH)-.225 G(akner)-2.25 E/F1
13/Times-Roman@0 SF 2.016(being considered can be e)33.336 120 R -.325
(va)-.325 G 2.016(luated entirely at compile-time, and return a CONST)
.325 F(ANT)-1.209 E 2.191(node for that v)33.336 135 R 5.441(alue. It)
-.325 F 2.19
(may be the case that all of the operands of an AST node are)5.441 F
(CONST)33.336 150 Q(ANT)-1.209 E 3.25(,o)-.962 G 3.25(ra)-3.25 G 3.25
(na)-3.25 G
(lgebraic identity might be seen, e.g. a multiply by a constant 0.)-3.25
E -1.04(We)33.336 171 S -.13('l)1.04 G 9.725(ls).13 G 6.475
(ee during the optimization unit that much more sophisticated)-9.725 F
/F2 13/Times-Bold@0 SF(constant)9.726 E(pr)33.336 186 Q(opagation)-.234
E F1(is possible.)3.25 E(E.g.:)6.5 E/F3 10/Courier@0 SF(a=2+2;)90.936
198 Q(f\(\);)90.936 210 Q(b=a;)90.936 222 Q(c=b+1;)90.936 234 Q F1 .563
(Simple constant folding during AST tra)33.336 255 R -.195(ve)-.26 G
.562(rsal w).195 F .562(ould eliminate the \214rst computation of a,)
-.13 F 1.031(replacing it with a constant a=MO)33.336 270 R 4.281(V4)
-.65 G 7.531(.B)-4.281 G 1.031
(ut whether or not the computation of c can be)-7.531 F 1.629
(replaced with a c=MO)33.336 285 R 4.879(V5c)-.65 G 1.628
(an not be determined in this manner)-4.879 F 8.128(.W)-.715 G 4.878(en)
-9.168 G 1.628(eed to perform)-4.878 F(data\215o)33.336 300 Q 3.7(wa)
-.325 G .45(nalysis to realize that the constant v)-3.7 F .45
(alue which went into a in the \214rst line then)-.325 F 1.403
(reached the 3rd and 4th lines.)33.336 315 R 1.402
(Complicating this analysis is the function call.)7.903 F 1.402
(If a is a)7.902 F -.325(va)33.336 330 S 2.639
(riable which might possibly be e).325 F 2.639
(xposed to function f\(\), and the code of f\(\) is not)-.195 F(kno)
33.336 345 Q(wn, then the function call in)-.325 E -.325(va)-.52 G
(lidates an).325 E 3.25(yk)-.195 G(no)-3.25 E(wledge of a')-.325 E 3.25
(sv)-.715 G(alue.)-3.575 E 1.492
(In general, both constant folding during AST tra)33.336 366 R -.195(ve)
-.26 G 1.491(rsal and more sophisticated constant).195 F(propag)33.336
381 Q 1.992(ation data\215o)-.065 F 5.242(wa)-.325 G 1.992
(nalysis are done.)-5.242 F 1.993(The former is needed to e)8.492 F
-.325(va)-.325 G 1.993(luate e).325 F(xpressions)-.195 E
(which must be constant, e.g.)33.336 396 Q F3(int a[sizeof\(int\)*4];)
90.936 408 Q F1 .332(In standard C)33.336 429 R .331
(the array dimension must be constant and computable at compile time, b)
6.832 F(ut)-.26 E .458(can be e)33.336 444 R .459(xpressed by an)-.195 F
3.709(ya)-.195 G .459(rbitrary e)-3.709 F .459(xpression, e.g.)-.195 F
/F4 13/Courier@0 SF .459 -1.8(int a[2*2])2.809 H F1(vs)4.609 E F4 .459
-1.8(int a[3+1])2.809 H F1 6.959(.W).9 G 3.709(ew)-7.999 G(ould)-3.839 E
.893(need to perform this computation during semantic analysis, so we c\
an establish the type)33.336 459 R 2.579(of the v)33.336 474 R 2.579
(ariable a.)-.325 F 4.659 -1.04(We c)9.079 H 2.58(an not w)1.04 F 2.58
(ait until after the IR is generated.)-.13 F 2.58(In C99, v)9.08 F
(ariably)-.325 E .539(modi\214ed array types are allo)33.336 489 R .539
(wed for automatic v)-.325 F .539(ariables \(as we ha)-.325 F .929 -.195
(ve s)-.26 H .539(een, these actually).195 F .484(result in imperati)
33.336 504 R .874 -.195(ve c)-.325 H .485
(ode as a result of the declaration\), b).195 F .485(ut because of link)
-.26 F .485(er restrictions,)-.13 F(the)33.336 519 Q 6.625(ya)-.195 G
3.375(re not allo)-6.625 F 3.375(wed for static or e)-.325 F 3.375
(xtern types, and thus the same sort of constant)-.195 F .677
(requirement is imposed.)33.336 534 R .678
(So, we still need to be able to determine if the array dimension)7.177
F(is a compile-time constant, and this requires constant-folding analys\
is.)33.336 549 Q F2(Contr)198.553 579 Q(ol Flo)-.234 E 3.25(wC)-.13 G
(onstructs)-3.25 E F1 2.273 -1.04(We h)33.336 615 T -2.925 -.26(av e)
1.04 H(no)3.703 E 3.443(ws)-.325 G .193
(een techniques for generating linear 3-address IR for pure e)-3.443 F
.193(xpressions \(i.e.)-.195 F -.195(ex)33.336 630 S 2.126
(pressions which do not ha).195 F 2.516 -.195(ve i)-.26 H 2.126
(mplied \215o).195 F 2.126(w-of-control constructs\).)-.325 F 4.206
-1.04(We s)8.626 H 2.126(ay that these)1.04 F 1.116(pure e)33.336 645 R
1.116(xpressions are containable in a single)-.195 F F2 1.116
(basic block)4.366 F F1 4.366(,w)C 1.116(hich is de\214ned belo)-4.366 F
6.056 -.845(w. N)-.325 H -.325(ow).845 G(,)-.52 E 1.931
(we will consider ho)33.336 660 R 5.181(wt)-.325 G 5.181(og)-5.181 G
1.931(enerate IR for control \215o)-5.181 F 5.181(ws)-.325 G 1.931
(tatements and e)-5.181 F 1.931(xpressions with)-.195 F
(hidden control \215o)33.336 675 Q 3.25(ws)-.325 G
(uch as the && or || operators.)-3.25 E 1.158
(During IR generation, the source-le)33.336 696 R -.195(ve)-.325 G 4.408
(lc).195 G 1.158(ontrol constructs such as)-4.408 F F4 -1.8(if-else)
3.507 G F1(and)5.307 E F4 -1.8(for)3.507 G F1(must)5.307 E 1.775
(be translated into IR form.)33.336 711 R 1.775(Some compilers b)8.275 F
1.775(uild an AST representation for an entire)-.26 F 2.7(function or o\
ther translation unit, and then descend that tree, generating IR for bo\
th)33.336 726 R 1.465(control constructs and e)33.336 741 R 4.715
(xpressions. Others)-.195 F 1.466(generate the control \215o)4.715 F
4.716(wI)-.325 G 4.716(Rd)-4.716 G 1.466(irectly during)-4.716 F 0 Cg EP
%%Page: 20 20
%%BeginPageSetup
BP
%%EndPageSetup
/F0 9/Times-Roman@0 SF 138.492(ECE466:Compilers Unit)33.336 60 R
(5/pg 20)2.25 E(\2512019 Jef)142.155 E 2.25(fH)-.225 G(akner)-2.25 E/F1
13/Times-Roman@0 SF(parsing.)33.336 120 Q/F2 13/Times-Bold@0 SF
(The Basic Block)222.551 150 Q F1(A)33.336 186 Q F2(Basic Block)3.25 E
F1(is a contiguous sequence of linear IR that has the follo)3.25 E
(wing properties:)-.325 E 3.25<8345>33.336 201 S(ach basic block has a \
unique label \(this is not the same as the C language label\))-3.25 E
3.25<8354>33.336 216 S
(herefore the \214rst operation in the basic block can be the tar)-3.25
E(get of a branch.)-.234 E 3.25<8349>33.336 231 S 3.25(te)-3.25 G
(nds with a branch \(conditional or unconditional\), or an e)-3.25 E
(xit/function return.)-.195 E 4.144<8349>33.336 246 S 4.144(ns)-4.144 G
.893(ome de\214nitions, a function/procedure call is also considered a \
branch and ends the)-4.144 F(basic block.)33.336 261 Q 4.266<834f>33.336
276 S 1.016(ther than the \214rst quad, the internal quads of the basic\
 block do not ha)-4.266 F 1.407 -.195(ve l)-.26 H 1.017(abels, and).195
F(therefore it is not possible to branch into the middle of a basic blo\
ck.)33.336 291 Q 4.543<8349>33.336 306 S 4.543(tm)-4.543 G 1.293
(ust not contain an)-4.543 F 4.543(yi)-.195 G 1.292
(nternal branches, just the branch which terminates the block.)-4.543 F
(Therefore, control \215o)33.336 321 Q 3.25(wc)-.325 G(an not lea)-3.25
E .39 -.195(ve i)-.26 H 3.25(nt).195 G(he middle of the block.)-3.25 E
2.103
(The basic block is of vital importance in IR design and optimization.)
33.336 351 R -.52(Wi)8.604 G 2.104(thin a basic).52 F .703
(block, the optimizer is free to re-arrange the code in an)33.336 366 R
3.953(yw)-.195 G(ay)-4.083 E 3.953(,s)-.845 G 3.953(ol)-3.953 G .702
(ong as it preserv)-3.953 F .702(es the)-.195 F .61
(functionality of the block.)33.336 381 R .61
(It has this freedom because it kno)7.11 F .61(ws that e)-.325 F -.195
(xe)-.195 G .61(cution can ne).195 F -.195(ve)-.325 G(r).195 E .363
(possibly enter or lea)33.336 396 R .753 -.195(ve i)-.26 H 3.613(nt).195
G .362(he middle of a basic block.)-3.613 F .362
(Do not confuse "basic block" with)6.862 F 3.25(a")33.336 411 S
(block" in high-le)-3.25 E -.195(ve)-.325 G 3.25(lp).195 G
(rogramming languages such as C.)-3.25 E F2(Repr)194.146 441 Q
(esenting Basic Blocks)-.234 E F1 1.518(There are man)33.336 477 R 4.768
(yp)-.195 G 1.518(ossible w)-4.768 F 1.519
(ays of storing a linear IR and grouping it into basic blocks.)-.13 F
.619(One possible approach is to represent each basic block as a dynami\
cally allocated struct,)33.336 492 R .139(then ha)33.336 507 R .529
-.195(ve t)-.26 H .139(he list of IR codes be attached to that struct e\
ither by using a re-allocable array).195 F 1.362
(and storing them directly therein, or by creating a link)33.336 522 R
1.361(ed list.)-.13 F 1.361(The address of the basic)7.861 F
(block struct can be used directly in the IR for branch tar)33.336 537 Q
(gets.)-.234 E 1.319(Most assembly languages use a single-tar)33.336 558
R 1.319(get conditional branch with f)-.234 F 1.319(all-through if the)
-.13 F 1.554(branch is not tak)33.336 573 R 4.804(en. In)-.13 F 1.554
(IR design, it is cleaner to mak)4.804 F 4.804(ec)-.13 G 1.554
(onditional branches ha)-4.804 F 1.943 -.195(ve t)-.26 H -.13(wo).195 G
-.195(ex)33.336 588 S .463(plicit tar).195 F .463
(gets, one for true and one for f)-.234 F 3.713(alse. Then)-.13 F .463
(in tar)3.713 F .463(get code generation, one of the)-.234 F 3.035
(branch tar)33.336 603 R 3.035(gets becomes an e)-.234 F 3.034
(xplicit branch, and the other becomes a f)-.195 F 3.034(all-through by)
-.13 F 2.44(placing its tar)33.336 618 R 2.44
(get basic block immediately after the branch.)-.234 F 2.44
(By storing in each basic)8.94 F 1.735(block the tw)33.336 633 R 4.985
(op)-.13 G 1.735(ossible e)-4.985 F 1.735(xiting branch tar)-.195 F
1.734(gets, a)-.234 F F2(Contr)4.984 E 1.734(ol Flo)-.234 F 4.984(wG)
-.13 G(raph)-4.984 E F1 1.734(is automatically)4.984 F(constructed.)
33.336 648 Q .93(When writing a compiler for the C language, it is natu\
ral to perform IR generation on a)33.336 669 R 3.149
(function-by-function basis.)33.336 684 R 3.149
(After IR generation is completed, much of the semantic)9.649 F 3.614(i\
nformation which is limited to the scope of the function may be discard\
ed.)33.336 699 R 3.614(It is)10.114 F(concei)33.336 714 Q -.325(va)-.325
G 1.103(ble that the entire function contains only pure e).325 F 1.103
(xpressions and can therefore be)-.195 F 2.286
(contained in a single basic block.)33.336 729 R 2.286
(In most cases, ho)8.786 F(we)-.325 E -.195(ve)-.325 G 3.326 -.52(r, f)
.195 H 2.286(unctions require multiple).52 F 3.998(basic blocks.)33.336
744 R 3.998(There is al)10.498 F -.13(wa)-.13 G 3.998
(ys an initial basic block which represents the start of).13 F 0 Cg EP
%%Page: 21 21
%%BeginPageSetup
BP
%%EndPageSetup
/F0 9/Times-Roman@0 SF 138.492(ECE466:Compilers Unit)33.336 60 R
(5/pg 21)2.25 E(\2512019 Jef)142.155 E 2.25(fH)-.225 G(akner)-2.25 E/F1
13/Times-Roman@0 SF -.195(exe)33.336 120 S(cution of the function.).195
E .14(After quads ha)33.336 141 R .53 -.195(ve b)-.26 H .14(een generat\
ed into basic blocks for the entire function, the control \215o).195 F
(w)-.325 E .909
(graph can be searched and the basic blocks ordered to place the `)
33.336 156 R(`f)-.962 E(alse')-.13 E 4.159('t)-.962 G(ar)-4.159 E .909
(gets of basic)-.234 F 5.11(blocks as their immediate successors, thus \
reducing it to a single branch tar)33.336 171 R(get)-.234 E
(representation.)33.336 186 Q 3.732
(Another technique is to represent branches e)33.336 207 R 3.732
(xplicitly as IR instructions which will)-.195 F 3.204
(necessarily be the last instruction of a basic block.)33.336 222 R
3.205(Then, typically)9.705 F 6.455(,t)-.845 G 3.205(he conditional)
-6.455 F .068(branches are represented as ha)33.336 237 R .068
(ving just a "TR)-.26 F .068(UE" tar)-.52 F .068(get, with the "F)-.234
F .067(ALSE" tar)-.962 F .067(get being a)-.234 F -.13(fa)33.336 252 S
4.244(ll-through \(to the ne).13 F 4.244(xt basic block\).)-.195 F 4.245
(This representation is closer to what most)10.744 F
(processors actually pro)33.336 267 Q(vide, b)-.195 E
(ut may obscure opportunities for basic block reordering.)-.26 E .966
(It is typical of C compilers to w)33.336 288 R .966
(ork one function at a time.)-.13 F .965(This is because C functions)
7.466 F 1.965(could wind up being called by "foreign" code.)33.336 303 R
/F2 13/Courier@0 SF -1.8(main\(\))7.565 G F1 1.966
(is the root of the CFG for the)6.115 F 1.484
(entire program, in most cases, b)33.336 318 R 1.483
(ut it is possible to write a C program which starts at a)-.26 F(dif)
33.336 333 Q .117(ferent place!)-.325 F .118
(The CFG for a C program therefore is usually not the entire program, b)
6.617 F(ut)-.26 E 1.051(one CFG for each function.)33.336 348 R 1.051
(Some C compilers attempt to look at inter)7.551 F 1.051
(-function control)-.26 F(and data \215o)33.336 363 Q 4.94 -.845(w. T)
-.325 H(his is a dif).845 E(\214cult problem.)-.325 E/F3 13/Times-Bold@0
SF(Lists of statements, declarations and simple branches)119.825 393 Q
F1 2.364(Recall that the C language speci\214cation states that a funct\
ion de\214nition consists of a)33.336 429 R .327
(declaration of the function itself \(including the return type and ar)
33.336 444 R .327(guments\), follo)-.234 F .327(wed by a)-.325 F 1.188(\
block \(compound statement\), which contains a list of statements and d\
eclarations \(prior)33.336 459 R(to C99, declarations were required to \
come before the \214rst statement\).)33.336 474 Q .098
(Most declarations do not cause the generation of IR code, the)33.336
495 R 3.347(ym)-.195 G .097(erely de\214ne the meaning)-3.347 F .626
(of an identi\214er to the semantic analysis phase.)33.336 510 R .626
(There are some e)7.126 F 3.877(xceptions. Declarations)-.195 F .619
(of v)33.336 525 R .619(ariable-length arrays require emission of code \
to calculate the array size and allocate)-.325 F(space for the array)
33.336 540 Q(.)-.845 E .052(Some e)33.336 561 R .052
(xternal IRs, such as LL)-.195 F .052(VM, emit declarati)-1.3 F .442
-.195(ve c)-.325 H .052(ode when a declaration is processed.).195 F
(This is because some aspects of a v)33.336 576 Q(ariable')-.325 E 3.25
(st)-.715 G(ype need to be passed on into the IR.)-3.25 E .876
(Declarations of automatic v)33.336 597 R .875
(ariables which include an initializer result in the emission of)-.325 F
1.322(code to calculate the initializer v)33.336 612 R 1.322
(alue and assign it to the v)-.325 F 1.322(ariable \(the)-.325 F 4.572
(ya)-.195 G 1.322(re similar to a)-4.572 F 1.849
(declaration immediately follo)33.336 627 R 1.849
(wed by an assignment\).)-.325 F 1.849
(Initialized declarations of global)8.349 F -.325(va)33.336 642 S 1.062
(riables do not cause IR to be generated, because the initializer v).325
F 1.062(alue is required to be)-.325 F(kno)33.336 657 Q 1.448
(wn at compile-time.)-.325 F 1.447
(The compiler must emit an assembly-language pseudo-opcode)7.948 F 1.877
(to associate the name of the identi\214er with its initialized v)33.336
672 R 5.127(alue. W)-.325 F 5.127(ew)-1.04 G 1.878(ill co)-5.127 F -.195
(ve)-.195 G 5.128(rt).195 G 1.878(his in)-5.128 F(another unit.)33.336
687 Q .368(In generating IR for a compound statement, we simply generat\
e IR for each statement, in)33.336 708 R(order)33.336 723 Q 8.967(.T)
-.715 G 5.717(od)-10.007 G 5.717(os)-5.717 G 5.717(or)-5.717 G 2.467
(equires that we maintain a "cursor" of state information.)-5.717 F
2.468(This will)8.968 F .011(include the basic block into which IR code\
 should be emitted \(implicit in which is the f)33.336 738 R(act)-.13 E
0 Cg EP
%%Page: 22 22
%%BeginPageSetup
BP
%%EndPageSetup
/F0 9/Times-Roman@0 SF 138.492(ECE466:Compilers Unit)33.336 60 R
(5/pg 22)2.25 E(\2512019 Jef)142.155 E 2.25(fH)-.225 G(akner)-2.25 E/F1
13/Times-Roman@0 SF 4.229(that code is al)33.336 120 R -.13(wa)-.13 G
4.23(ys appended to the end of current basic block\), and other state)
.13 F(information such as the nearest enclosing switch or loop statemen\
t, if an)33.336 135 Q -.845(y.)-.195 G 3.826(ACl)33.336 156 S .576
(anguage label may be attached to an)-3.826 F 3.826(ys)-.195 G .576
(tatement \(including a compound statement\).)-3.826 F 1.144
(Recall that labels e)33.336 171 R 1.144
(xist in a namespace separate from other identi\214ers, and that the)
-.195 F 4.394(ya)-.195 G(re)-4.394 E .548
(not required to be declared before use.)33.336 186 R .548
(By de\214nition, a labeled statement must cause the)7.048 F .847
(termination of the current basic block, and the creation of a ne)33.336
201 R 4.098(wc)-.325 G .848(urrent basic block.)-4.098 F(In)7.348 E .493
(the symbol table, the association between that ne)33.336 216 R 3.743
(wb)-.325 G .493(lock and the label must be recorded.)-3.743 F .056(It \
will turn out that, during \214nal code generation, the assembly langua\
ge label emitted can)33.336 231 R 2.145(not be the actual label used in\
 the program, because of possible con\215icts with global)33.336 246 R
-.325(va)33.336 261 S 1.315(riables, function names and other symbols.)
.325 F 1.316(At that time, an assembly-language label)7.815 F 1.281
(name will need to be generated.)33.336 276 R 1.281
(E.g. the GNU CC compiler uses internal labels of the)7.781 F(form)
33.336 291 Q/F2 13/Courier@0 SF -1.8(.L0)2.905 G F1(,).9 E F2 -1.8(.L1)
2.905 G F1 3.805(,e).9 G .555(tc. for each basic block.)-3.805 F .556
(Since these names start with a period character)7.055 F(,)-.52 E(the)
33.336 306 Q 3.25(yc)-.195 G
(an not con\215ict with C language identi\214ers.)-3.25 E(Note that it \
is possible for multiple labels to be attached to the same statement:)
33.336 327 Q/F3 10/Courier@0 SF(label1:)90.936 339 Q(label2:)90.936 351
Q(label3:)90.936 363 Q(a=b;)148.536 375 Q F1 1.844(After processing the\
 label, code generation continues for the attached statement in the)
33.336 396 R(ne)33.336 411 Q 6.197(wb)-.325 G 2.947(asic block.)-6.197 F
2.947(An unconditional branch must be recorded linking the end of the)
9.447 F(pre)33.336 426 Q(vious basic block to the start of the ne)-.325
E 3.25(wo)-.325 G(ne.)-3.25 E(A)33.336 447 Q F2 -1.8(goto)3.841 G F1
1.491(statement also causes the termination of the basic block, with an\
 unconditional)5.641 F .378
(branch to the basic block associated with the label pro)33.336 462 R
.378(vided in the goto statement.)-.195 F .378(If this)6.878 F .855(lab\
el has not yet been seen, an empty basic block can be created and the i\
dentity of this)33.336 477 R 1.079
(block associated with the label in the symbol table.)33.336 492 R 1.079
(Then, when the tar)7.579 F 1.079(get label is later)-.234 F .366
(seen, this basic block can be used as the ne)33.336 507 R 3.615(wb)
-.325 G .365(asic block instead of creating one.)-3.615 F .365(After a)
6.865 F .965(goto statement, it is still necessary to continue processi\
ng subsequent statements, with a)33.336 522 R(ne)33.336 537 Q 3.902(wb)
-.325 G .652(asic block created.)-3.902 F .652(This ne)7.152 F 3.902(wb)
-.325 G .652(lock is not yet link)-3.902 F .651(ed to an)-.13 F 3.901
(yo)-.195 G .651(ther block.)-3.901 F .651(This does)7.151 F 1.616
(not necessarily mean that it will remain unreachable.)33.336 552 R
1.616(Consider \(yes, this is an endless)8.116 F(loop\):)33.336 567 Q F3
(f\(\))33.336 579 Q({)33.336 591 Q(/*stmt 1a */)90.936 603 Q
(/*stmt 1b */)90.936 615 Q
(goto label3; /* forward declaration, create incomplete sym tab entry*/)
90.936 627 Q 112.8(label2: /*)45.336 639 R
(create complete symtab entry */)6 E(/*stmt 2a */)90.936 651 Q
(/*stmt 2b */)90.936 663 Q 55.2(label3: /*)45.336 675 R
(complete previously installed symtab entry */)6 E(/*stmt 3a */)90.936
687 Q(/*stmt 3b */)90.936 699 Q(goto label2;)90.936 711 Q
(/* look up previously installed symtab entry */)43.2 E(})33.336 723 Q
F1 1.937
(After the IR has been generated for an entire function, we must e)
33.336 744 R 1.937(xamine all of the C)-.195 F 0 Cg EP
%%Page: 23 23
%%BeginPageSetup
BP
%%EndPageSetup
/F0 9/Times-Roman@0 SF 138.492(ECE466:Compilers Unit)33.336 60 R
(5/pg 23)2.25 E(\2512019 Jef)142.155 E 2.25(fH)-.225 G(akner)-2.25 E/F1
13/Times-Roman@0 SF .533
(language statement labels in the symbol table for that function.)33.336
120 R .533(Labels that were de\214ned)7.033 F -.26(bu)33.336 135 S 3.926
(tn).26 G -2.795 -.325(ev e)-3.926 H 3.926(ru).325 G .675
(sed by a goto are a w)-3.926 F .675(arning, b)-.13 F .675(ut the con)
-.26 F -.195(ve)-.52 G .675(rse is an error).195 F 7.175(.L)-.715 G(ik)
-7.175 E -.325(ew)-.13 G .675(ise, when we).325 F(tra)33.336 150 Q -.195
(ve)-.26 G .026(rse the control \215o).195 F 3.277(wg)-.325 G .027
(raph \(linkages of basic blocks\) to create the tar)-3.277 F .027
(get code, we will)-.234 F .034(learn if there are an)33.336 165 R 3.284
(yb)-.195 G .034(asic blocks which can ne)-3.284 F -.195(ve)-.325 G
3.284(rb).195 G 3.284(er)-3.284 G 3.284(eached. These)-3.284 F .033
(too should generate)3.283 F 3.25(aw)33.336 180 S(arning.)-3.38 E/F2 13
/Times-Bold@0 SF(if-then-else)236.649 240 Q F1 3.174(There are three pa\
rts to an if-then-else statement \(of course, in C there is no)33.336
276 R/F3 13/Courier@0 SF -1.8(then)5.524 G F1 -.13(ke)33.336 291 S(yw)
-.065 E 2.373(ord\): the conditional e)-.13 F 2.373
(xpression, the true arm, and the f)-.195 F 2.373
(alse arm \(if present\).)-.13 F(A)8.873 E .337
(possible algorithm for generating the IR is as follo)33.336 306 R 3.587
(ws: When,)-.325 F .337(in the course of processing)3.587 F .39
(statements, we see an IF statement, we create three ne)33.336 321 R
3.64(wb)-.325 G .39(asic blocks.)-3.64 F .39(Let us called them)6.89 F
1.065(Bt, Bf and Bn.)33.336 336 R 1.065(These will represent the TR)
7.565 F 1.065(UE arm, the F)-.52 F 1.065(ALSE arm, and the statement)
-.962 F(which follo)33.336 351 Q(ws the)-.325 E F3 -1.8(if)2.35 G F1
3.25(statement. If)4.15 F(there is no F)3.25 E
(ALSE arm, then Bf and Bn are the same.)-.962 E 3.218 -1.04(We i)33.336
372 T 1.137(ntroduce a ne)1.04 F 4.387(wr)-.325 G 1.137(outine, call it)
-4.387 F F3 -1.8(gen_condexpr\(E,Bt,Bf\)\))3.487 G F1 4.387(,w).9 G
(here)-4.387 E F3(E)3.487 E F1 1.137(is the conditional)3.487 F -.195
(ex)33.336 387 S 1.924(pression AST).195 F 8.424(.I)-.962 G 1.924
(nstead of attempting to produce an rv)-8.424 F 1.924(alue, lv)-.325 F
1.924(alue or address \(as we)-.325 F(ha)33.336 402 Q 1.226 -.195(ve s)
-.26 H .836(een abo).195 F 1.226 -.195(ve f)-.195 H .836(or e).195 F
.836(xpressions\), the goal of)-.195 F F3 -1.8(gen_condexpr)3.185 G F1
.835(is to e)4.985 F -.325(va)-.325 G .835(luate the e).325 F(xpression)
-.195 E 2.012(and branch to either the true tar)33.336 417 R 2.012
(get or the f)-.234 F 2.013(alse tar)-.13 F 2.013(get \(these tar)-.234
F 2.013(gets being supplied as)-.234 F 3.991(parameters\). The)33.336
432 R .741(code for e)3.991 F -.325(va)-.325 G .741
(luating the conditional e).325 F .741
(xpression will be generated in the)-.195 F .112
(current basic block \(although e)33.336 447 R -.325(va)-.325 G .112
(luation may cause additional basic blocks to arise, e.g. if).325 F
2.102(there are && operators\).)33.336 462 R 2.102
(It will create the conditional branch at the end of the basic)8.602 F
.183(block to the Bt and Bf tar)33.336 477 R 3.433(gets. W)-.234 F 3.433
(ec)-1.04 G .184(an then recurse on the true and f)-3.433 F .184
(alse arms, setting the)-.13 F 3.096
(initial current basic block to Bt or Bf respecti)33.336 492 R -.195(ve)
-.325 G(ly).195 E 9.596(.E)-.845 G 3.096(ach of these arms may create)
-9.596 F 1.797(additional basic blocks.)33.336 507 R(Whate)8.297 E -.195
(ve)-.325 G 5.047(rt).195 G 1.797
(he current basic block is at the conclusion of each)-5.047 F 2.03
(arm gets link)33.336 522 R 2.03
(ed to the basic block Bn which will hold the statement follo)-.13 F
2.029(wing the IF)-.325 F(node.)33.336 537 Q/F4 10/Courier@0 SF
(gen_if\(if_node\))33.336 549 Q({)33.336 561 Q(Bt=new_bb\(\);)90.936 573
Q(Bf=new_bb\(\);)90.936 585 Q(if \(if_node->else_arm\))90.936 597 Q({)
90.936 609 Q(Bn=new_bb\(\);)148.536 621 Q(})90.936 633 Q(else)90.936 645
Q(Bn=Bf;)148.536 657 Q -1.2(gen_condexpr\(if_node,Bt,Bf\); //creates)
90.936 669 R(branches to Bt,Bf)6 E(cur_bb=Bt;)90.936 681 Q
(gen_stmt\(if_node->then_arm\);)90.936 693 Q
(link_bb\(cur_bb,ALWAYS,Bn,NULL\);)90.936 705 Q
(if \(if_node->else_arm\))90.936 717 Q({)90.936 729 Q(cur_bb=Bf;)148.536
741 Q 0 Cg EP
%%Page: 24 24
%%BeginPageSetup
BP
%%EndPageSetup
/F0 9/Times-Roman@0 SF 138.492(ECE466:Compilers Unit)33.336 60 R
(5/pg 24)2.25 E(\2512019 Jef)142.155 E 2.25(fH)-.225 G(akner)-2.25 E/F1
10/Courier@0 SF(gen_stmt\(if_node->else_arm\);)148.536 117 Q
(link_bb\(cur_bb,ALWAYS,Bn,NULL\);)148.536 129 Q(})90.936 141 Q
(cur_bb=Bn;)90.936 153 Q(})33.336 165 Q/F2 13/Times-Roman@0 SF .026(Not\
e that with nested IF statements, it is possible that empty basic block\
s will get created.)33.336 186 R 5.713
(These are of no real concern, as the)33.336 201 R 8.962(ya)-.195 G
5.712(re easily eliminated during subsequent)-8.962 F
(optimization passes and will not bloat the \214nal code.)33.336 216 Q 0
0 298 298 -289 289 118.336 541 PBEGIN
%%BeginDocument: ifelse.eps
%!PS-Adobe-2.0 EPSF-2.0
%%Title: ifelse.fig
%%Creator: fig2dev Version 3.2 Patchlevel 4
%%CreationDate: Mon Nov 10 18:38:13 2008
%%For: hak@lex ()
%%BoundingBox: 0 0 298 289
%%Magnification: 1.0000
%%EndComments
/$F2psDict 200 dict def
$F2psDict begin
$F2psDict /mtrx matrix put
/col-1 {0 setgray} bind def
/col0 {0.000 0.000 0.000 srgb} bind def
/col1 {0.000 0.000 1.000 srgb} bind def
/col2 {0.000 1.000 0.000 srgb} bind def
/col3 {0.000 1.000 1.000 srgb} bind def
/col4 {1.000 0.000 0.000 srgb} bind def
/col5 {1.000 0.000 1.000 srgb} bind def
/col6 {1.000 1.000 0.000 srgb} bind def
/col7 {1.000 1.000 1.000 srgb} bind def
/col8 {0.000 0.000 0.560 srgb} bind def
/col9 {0.000 0.000 0.690 srgb} bind def
/col10 {0.000 0.000 0.820 srgb} bind def
/col11 {0.530 0.810 1.000 srgb} bind def
/col12 {0.000 0.560 0.000 srgb} bind def
/col13 {0.000 0.690 0.000 srgb} bind def
/col14 {0.000 0.820 0.000 srgb} bind def
/col15 {0.000 0.560 0.560 srgb} bind def
/col16 {0.000 0.690 0.690 srgb} bind def
/col17 {0.000 0.820 0.820 srgb} bind def
/col18 {0.560 0.000 0.000 srgb} bind def
/col19 {0.690 0.000 0.000 srgb} bind def
/col20 {0.820 0.000 0.000 srgb} bind def
/col21 {0.560 0.000 0.560 srgb} bind def
/col22 {0.690 0.000 0.690 srgb} bind def
/col23 {0.820 0.000 0.820 srgb} bind def
/col24 {0.500 0.190 0.000 srgb} bind def
/col25 {0.630 0.250 0.000 srgb} bind def
/col26 {0.750 0.380 0.000 srgb} bind def
/col27 {1.000 0.500 0.500 srgb} bind def
/col28 {1.000 0.630 0.630 srgb} bind def
/col29 {1.000 0.750 0.750 srgb} bind def
/col30 {1.000 0.880 0.880 srgb} bind def
/col31 {1.000 0.840 0.000 srgb} bind def

end
save
newpath 0 289 moveto 0 0 lineto 298 0 lineto 298 289 lineto closepath clip newpath
-135.0 378.7 translate
1 -1 scale

/cp {closepath} bind def
/ef {eofill} bind def
/gr {grestore} bind def
/gs {gsave} bind def
/sa {save} bind def
/rs {restore} bind def
/l {lineto} bind def
/m {moveto} bind def
/rm {rmoveto} bind def
/n {newpath} bind def
/s {stroke} bind def
/sh {show} bind def
/slc {setlinecap} bind def
/slj {setlinejoin} bind def
/slw {setlinewidth} bind def
/srgb {setrgbcolor} bind def
/rot {rotate} bind def
/sc {scale} bind def
/sd {setdash} bind def
/ff {findfont} bind def
/sf {setfont} bind def
/scf {scalefont} bind def
/sw {stringwidth} bind def
/tr {translate} bind def
/tnt {dup dup currentrgbcolor
  4 -2 roll dup 1 exch sub 3 -1 roll mul add
  4 -2 roll dup 1 exch sub 3 -1 roll mul add
  4 -2 roll dup 1 exch sub 3 -1 roll mul add srgb}
  bind def
/shd {dup dup currentrgbcolor 4 -2 roll mul 4 -2 roll mul
  4 -2 roll mul srgb} bind def
/$F2psBegin {$F2psDict begin /$F2psEnteredState save def} def
/$F2psEnd {$F2psEnteredState restore end} def

$F2psBegin
10 setmiterlimit
0 slj 0 slc
 0.06000 0.06000 sc
%
% Fig objects follow
%
% 
% here starts figure with depth 50
% Polyline
7.500 slw
n 4200 1800 m 5700 1800 l 5700 3000 l 4200 3000 l
 cp gs col0 s gr 
% Polyline
n 4200 5100 m 5700 5100 l 5700 6300 l 4200 6300 l
 cp gs col0 s gr 
% Polyline
n 2700 3300 m 4200 3300 l 4200 4500 l 2700 4500 l
 cp gs col0 s gr 
% Polyline
n 5700 3300 m 7200 3300 l 7200 4500 l 5700 4500 l
 cp gs col0 s gr 
% Polyline
gs  clippath
4924 5077 m 4947 5133 l 5087 5077 l 4965 5094 l 5065 5021 l cp
eoclip
n 6450 4500 m
 4950 5100 l gs col0 s gr gr

% arrowhead
n 5065 5021 m 4965 5094 l 5087 5077 l  col0 s
% Polyline
gs  clippath
4953 5133 m 4974 5076 l 4831 5024 l 4934 5094 l 4810 5081 l cp
eoclip
n 3300 4500 m
 4950 5100 l gs col0 s gr gr

% arrowhead
n 4810 5081 m 4934 5094 l 4831 5024 l  col0 s
% Polyline
gs  clippath
3577 3275 m 3593 3332 l 3739 3290 l 3616 3295 l 3723 3233 l cp
eoclip
n 4650 3000 m
 3600 3300 l gs col0 s gr gr

% arrowhead
n 3723 3233 m 3616 3295 l 3739 3290 l  col0 s
% Polyline
gs  clippath
6304 3333 m 6323 3276 l 6179 3228 l 6284 3295 l 6160 3285 l cp
eoclip
n 5400 3000 m
 6300 3300 l gs col0 s gr gr

% arrowhead
n 6160 3285 m 6284 3295 l 6179 3228 l  col0 s
/Times-Roman ff 200.00 scf sf
4350 2550 m
gs 1 -1 sc (eval cond) col0 sh gr
/Times-Roman ff 200.00 scf sf
4350 2805 m
gs 1 -1 sc (expr) col0 sh gr
/Times-Roman ff 200.00 scf sf
3000 3600 m
gs 1 -1 sc (true arm) col0 sh gr
/Times-Roman ff 200.00 scf sf
6000 3600 m
gs 1 -1 sc (false arm) col0 sh gr
/Times-Roman ff 200.00 scf sf
4650 1650 m
gs 1 -1 sc (current BB) col0 sh gr
/Times-Roman ff 200.00 scf sf
2250 3450 m
gs 1 -1 sc (Bt:) col0 sh gr
/Times-Roman ff 200.00 scf sf
5250 3450 m
gs 1 -1 sc (Bf:) col0 sh gr
/Times-Roman ff 200.00 scf sf
3600 5250 m
gs 1 -1 sc (Bn:) col0 sh gr
% here ends figure;
$F2psEnd
rs
showpage
%%EndDocument
end PEND/F3 13/Times-Bold@0 SF(Ev)93.877 577 Q
(aluation of Comparison Operators in a Conditional Context)-.13 E/F4 13
/Courier@0 SF -1.8(gen_condexpr\(\))32.436 607 S F2 .214
(is responsible for generating code to e)4.363 F -.325(va)-.325 G .214
(luate conditional e).325 F 3.464(xpressions. If)-.195 F 1.133(its tar)
33.336 622 R 1.133(get is already a boolean e)-.234 F 1.132
(xpression, such as an == or < operator)-.195 F 4.382(,t)-.52 G 1.132
(he task is f)-4.382 F(airly)-.13 E 4.259(simple. The)33.336 637 R 1.009
(equality and comparison operators translate to a)4.259 F F4 -1.8(CMP)
3.36 G F2 1.01(quad, which models a)5.16 F 1.201
(similarly named instruction that almost all processors ha)33.336 652 R
-.195(ve)-.26 G 7.701(.T).195 G 1.201(he CMP is follo)-7.701 F 1.201
(wed by a)-.325 F 3.257(branch on the appropriate condition code.)33.336
667 R 3.257(E.g. we could designate condition codes)9.757 F F4 -1.8
(EQ,NE,LT,LE,GT,GE)32.436 682 S F2(.).9 E 1.843
(The CMP operation is a subtraction, with the result discarded.)33.336
703 R 1.842(Comparisions between)8.342 F 2.133(signed numbers dif)33.336
718 R 2.133(fer from those between unsigned number)-.325 F 8.634(.C)
-.715 G 2.134(onsider comparing the)-8.634 F 1.153(16-bit inte)33.336
733 R 1.153(ger 0xFFFF to 0x07FF)-.195 F 7.653(.I)-1.04 G 4.403(ft)
-7.653 G 1.153(hese bit patterns are interpreted as unsigned, then)
-4.403 F 0 Cg EP
%%Page: 25 25
%%BeginPageSetup
BP
%%EndPageSetup
/F0 9/Times-Roman@0 SF 138.492(ECE466:Compilers Unit)33.336 60 R
(5/pg 25)2.25 E(\2512019 Jef)142.155 E 2.25(fH)-.225 G(akner)-2.25 E/F1
13/Times-Roman@0 SF .514(the \214rst one is greater than the second.)
33.336 120 R .515(If, ho)7.014 F(we)-.325 E -.195(ve)-.325 G 1.555 -.52
(r, t).195 H(he).52 E 3.765(ya)-.195 G .515(re signed \(tw)-3.765 F(o')
-.13 E 3.765(sc)-.715 G(omplement\),)-3.765 E
(then the \214rst one is -1, which is less than the second one.)33.336
135 Q 2.594(Most processors maintain Carry)33.336 156 R 5.844(,Z)-.845 G
2.594(ero, Ne)-5.844 F -.065(ga)-.195 G(ti).065 E 2.984 -.195(ve a)-.325
H 2.593(nd Ov).195 F(er\215o)-.195 E 5.843<778d>-.325 G 2.593
(ags which are set or)-5.843 F 3.331
(cleared by arithmetic operations such as CMP)33.336 171 R 6.582(,A)
-1.443 G 3.332(DD or SUB.)-6.582 F 3.332(The Carry \215ag is a)9.832 F
(carry/borro)33.336 186 Q 5.364(wo)-.325 G 2.114
(ut of the Most Signi\214cant Bit \(MSB\).)-5.364 F 2.114(The Ne)8.614 F
-.065(ga)-.195 G(ti).065 E 2.504 -.195(ve \215)-.325 H 2.114
(ag is simply the).195 F -.325(va)33.336 201 S .247
(lue of the sign bit \(MSB\) or the result.).325 F .247
(The Zero \215ag indicates if the result is all 0 bits.)6.747 F .696
(Finally the Ov)33.336 216 R(er\215o)-.195 E 3.946(w\()-.325 G .696
(V\) bit is set if the operation resulted in a tw)-3.946 F .696
(os complement signed)-.13 F -.195(ove)33.336 231 S(r\215o).195 E 2.559
-.845(w, i)-.325 H 4.119(.e. the).845 F(carry/borro)4.119 E 4.119(ws)
-.325 G .869(tatus out of the MSB XOR with the carry/borro)-4.119 F
4.119(ws)-.325 G(tatus)-4.119 E .191
(from the second most signi\214cant bit to the MSB.)33.336 246 R .191
(The V bit indicates that the N bit "can')6.691 F(t)-.234 E
(be trusted" because the o)33.336 261 Q -.195(ve)-.195 G(r\215o).195 E
3.25(ww)-.325 G(rongly \215ipped the sign bit.)-3.25 E 2.349
(EQ and NE conditions are e)33.336 282 R -.325(va)-.325 G 2.349
(luated by e).325 F 2.349(xamining the Z \215ag.)-.195 F -.195(Fo)8.85 G
5.6(rg).195 G 2.35(reater/ less than)-5.6 F .582(comparisons, the proce\
dure depends on whether the operands are being treated as signed)33.336
297 R 1.449(or unsigned.)33.336 312 R -.195(Fo)7.949 G 4.699(ru).195 G
1.449(nsigned comparisions, only the Carry \215ag is e)-4.699 F 1.449
(xamined, and the \214rst)-.195 F(ar)33.336 327 Q .848
(gument is less than the second if the C \215ag is set.)-.234 F -.195
(Fo)7.348 G 4.098(rs).195 G .848(igned, the \214rst operand is less)
-4.098 F(than the second if \(N&&!V || !N&&V\), i.e. N XOR V)33.336 342
Q(.)-1.677 E 0 0 468 817 -124.876 218 33.336 487.876 PBEGIN
%%BeginDocument: signed.eps
%!PS-Adobe-3.0 EPSF-3.0
%%Title: signed.fig
%%Creator: fig2dev Version 3.2 Patchlevel 5e
%%CreationDate: Tue Mar 26 23:01:02 2019
%%For: hak@lex ()
%%BoundingBox: 0 0 817 218
%Magnification: 1.0000
%%EndComments
%%BeginProlog
/$F2psDict 200 dict def
$F2psDict begin
$F2psDict /mtrx matrix put
/col-1 {0 setgray} bind def
/col0 {0.000 0.000 0.000 srgb} bind def
/col1 {0.000 0.000 1.000 srgb} bind def
/col2 {0.000 1.000 0.000 srgb} bind def
/col3 {0.000 1.000 1.000 srgb} bind def
/col4 {1.000 0.000 0.000 srgb} bind def
/col5 {1.000 0.000 1.000 srgb} bind def
/col6 {1.000 1.000 0.000 srgb} bind def
/col7 {1.000 1.000 1.000 srgb} bind def
/col8 {0.000 0.000 0.560 srgb} bind def
/col9 {0.000 0.000 0.690 srgb} bind def
/col10 {0.000 0.000 0.820 srgb} bind def
/col11 {0.530 0.810 1.000 srgb} bind def
/col12 {0.000 0.560 0.000 srgb} bind def
/col13 {0.000 0.690 0.000 srgb} bind def
/col14 {0.000 0.820 0.000 srgb} bind def
/col15 {0.000 0.560 0.560 srgb} bind def
/col16 {0.000 0.690 0.690 srgb} bind def
/col17 {0.000 0.820 0.820 srgb} bind def
/col18 {0.560 0.000 0.000 srgb} bind def
/col19 {0.690 0.000 0.000 srgb} bind def
/col20 {0.820 0.000 0.000 srgb} bind def
/col21 {0.560 0.000 0.560 srgb} bind def
/col22 {0.690 0.000 0.690 srgb} bind def
/col23 {0.820 0.000 0.820 srgb} bind def
/col24 {0.500 0.190 0.000 srgb} bind def
/col25 {0.630 0.250 0.000 srgb} bind def
/col26 {0.750 0.380 0.000 srgb} bind def
/col27 {1.000 0.500 0.500 srgb} bind def
/col28 {1.000 0.630 0.630 srgb} bind def
/col29 {1.000 0.750 0.750 srgb} bind def
/col30 {1.000 0.880 0.880 srgb} bind def
/col31 {1.000 0.840 0.000 srgb} bind def

end

/cp {closepath} bind def
/ef {eofill} bind def
/gr {grestore} bind def
/gs {gsave} bind def
/sa {save} bind def
/rs {restore} bind def
/l {lineto} bind def
/m {moveto} bind def
/rm {rmoveto} bind def
/n {newpath} bind def
/s {stroke} bind def
/sh {show} bind def
/slc {setlinecap} bind def
/slj {setlinejoin} bind def
/slw {setlinewidth} bind def
/srgb {setrgbcolor} bind def
/rot {rotate} bind def
/sc {scale} bind def
/sd {setdash} bind def
/ff {findfont} bind def
/sf {setfont} bind def
/scf {scalefont} bind def
/sw {stringwidth} bind def
/tr {translate} bind def
/tnt {dup dup currentrgbcolor
  4 -2 roll dup 1 exch sub 3 -1 roll mul add
  4 -2 roll dup 1 exch sub 3 -1 roll mul add
  4 -2 roll dup 1 exch sub 3 -1 roll mul add srgb}
  bind def
/shd {dup dup currentrgbcolor 4 -2 roll mul 4 -2 roll mul
  4 -2 roll mul srgb} bind def
/reencdict 12 dict def /ReEncode { reencdict begin
/newcodesandnames exch def /newfontname exch def /basefontname exch def
/basefontdict basefontname findfont def /newfont basefontdict maxlength dict def
basefontdict { exch dup /FID ne { dup /Encoding eq
{ exch dup length array copy newfont 3 1 roll put }
{ exch newfont 3 1 roll put } ifelse } { pop pop } ifelse } forall
newfont /FontName newfontname put newcodesandnames aload pop
128 1 255 { newfont /Encoding get exch /.notdef put } for
newcodesandnames length 2 idiv { newfont /Encoding get 3 1 roll put } repeat
newfontname newfont definefont pop end } def
/isovec [
8#055 /minus 8#200 /grave 8#201 /acute 8#202 /circumflex 8#203 /tilde
8#204 /macron 8#205 /breve 8#206 /dotaccent 8#207 /dieresis
8#210 /ring 8#211 /cedilla 8#212 /hungarumlaut 8#213 /ogonek 8#214 /caron
8#220 /dotlessi 8#230 /oe 8#231 /OE
8#240 /space 8#241 /exclamdown 8#242 /cent 8#243 /sterling
8#244 /currency 8#245 /yen 8#246 /brokenbar 8#247 /section 8#250 /dieresis
8#251 /copyright 8#252 /ordfeminine 8#253 /guillemotleft 8#254 /logicalnot
8#255 /hyphen 8#256 /registered 8#257 /macron 8#260 /degree 8#261 /plusminus
8#262 /twosuperior 8#263 /threesuperior 8#264 /acute 8#265 /mu 8#266 /paragraph
8#267 /periodcentered 8#270 /cedilla 8#271 /onesuperior 8#272 /ordmasculine
8#273 /guillemotright 8#274 /onequarter 8#275 /onehalf
8#276 /threequarters 8#277 /questiondown 8#300 /Agrave 8#301 /Aacute
8#302 /Acircumflex 8#303 /Atilde 8#304 /Adieresis 8#305 /Aring
8#306 /AE 8#307 /Ccedilla 8#310 /Egrave 8#311 /Eacute
8#312 /Ecircumflex 8#313 /Edieresis 8#314 /Igrave 8#315 /Iacute
8#316 /Icircumflex 8#317 /Idieresis 8#320 /Eth 8#321 /Ntilde 8#322 /Ograve
8#323 /Oacute 8#324 /Ocircumflex 8#325 /Otilde 8#326 /Odieresis 8#327 /multiply
8#330 /Oslash 8#331 /Ugrave 8#332 /Uacute 8#333 /Ucircumflex
8#334 /Udieresis 8#335 /Yacute 8#336 /Thorn 8#337 /germandbls 8#340 /agrave
8#341 /aacute 8#342 /acircumflex 8#343 /atilde 8#344 /adieresis 8#345 /aring
8#346 /ae 8#347 /ccedilla 8#350 /egrave 8#351 /eacute
8#352 /ecircumflex 8#353 /edieresis 8#354 /igrave 8#355 /iacute
8#356 /icircumflex 8#357 /idieresis 8#360 /eth 8#361 /ntilde 8#362 /ograve
8#363 /oacute 8#364 /ocircumflex 8#365 /otilde 8#366 /odieresis 8#367 /divide
8#370 /oslash 8#371 /ugrave 8#372 /uacute 8#373 /ucircumflex
8#374 /udieresis 8#375 /yacute 8#376 /thorn 8#377 /ydieresis] def
/Times-Roman /Times-Roman-iso isovec ReEncode
/$F2psBegin {$F2psDict begin /$F2psEnteredState save def} def
/$F2psEnd {$F2psEnteredState restore end} def

/pageheader {
save
newpath 0 218 moveto 0 0 lineto 817 0 lineto 817 218 lineto closepath clip newpath
-62.1 244.8 translate
1 -1 scale
$F2psBegin
10 setmiterlimit
0 slj 0 slc
 0.06000 0.06000 sc
} bind def
/pagefooter {
$F2psEnd
restore
} bind def
%%EndProlog
pageheader
%
% Fig objects follow
%
% 
% here starts figure with depth 50
% Arc
7.500 slw
0 slc
gs  clippath
1273 1307 m 1327 1449 l 1383 1428 l 1330 1286 l 1330 1286 l 1344 1409 l 1273 1307 l cp
eoclip
n 1425.0 1325.0 125.0 53.1301 126.8699 arcn
gs col0 s gr
 gr

% arrowhead
0 slj
n 1273 1307 m 1344 1409 l 1330 1286 l  col0 s
% Arc
gs  clippath
4152 1330 m 4021 1406 l 4052 1458 l 4182 1382 l 4182 1382 l 4064 1417 l 4152 1330 l cp
eoclip
n 4237.5 1612.5 265.2 -45.0000 -135.0000 arcn
gs col0 s gr
 gr

% arrowhead
n 4152 1330 m 4064 1417 l 4182 1382 l  col0 s
% Arc
gs  clippath
13436 1300 m 13474 1447 l 13532 1431 l 13494 1285 l 13494 1285 l 13496 1409 l 13436 1300 l cp
eoclip
n 13593.8 1331.2 132.6 8.1301 135.0000 arcn
gs col0 s gr
 gr

% arrowhead
n 13436 1300 m 13496 1409 l 13494 1285 l  col0 s
% Arc
gs  clippath
13051 1307 m 12943 1414 l 12985 1456 l 13093 1349 l 13093 1349 l 12987 1413 l 13051 1307 l cp
eoclip
n 13256.2 1612.5 338.0 -19.4400 -146.3099 arcn
gs col0 s gr
 gr

% arrowhead
n 13051 1307 m 12987 1413 l 13093 1349 l  col0 s
% Polyline
n 1275 2100 m 1350 2100 l 1425 2100 l 1500 2100 l 1575 2100 l 1650 2100 l
 1725 2100 l 1800 2100 l 1875 2100 l 1950 2100 l 2025 2100 l
 2100 2100 l 2175 2100 l 2250 2100 l 2325 2100 l 2400 2100 l

 2475 2100 l gs col0 s gr 
% Polyline
n 4350 2100 m 4425 2100 l 4500 2100 l 4575 2100 l 4650 2100 l 4725 2100 l
 4800 2100 l 4875 2100 l 4950 2100 l 5025 2100 l 5100 2100 l
 5175 2100 l 5250 2100 l 5325 2100 l 5400 2100 l 5475 2100 l

 5550 2100 l gs col0 s gr 
% Polyline
n 7575 2100 m 7650 2100 l 7725 2100 l 7800 2100 l 7875 2100 l 7950 2100 l
 8025 2100 l 8100 2100 l 8175 2100 l 8250 2100 l 8325 2100 l
 8400 2100 l 8475 2100 l 8550 2100 l 8625 2100 l 8700 2100 l

 8775 2100 l gs col0 s gr 
% Polyline
n 10650 2100 m 10725 2100 l 10800 2100 l 10875 2100 l 10950 2100 l 11025 2100 l
 11100 2100 l 11175 2100 l 11250 2100 l 11325 2100 l 11400 2100 l
 11475 2100 l 11550 2100 l 11625 2100 l 11700 2100 l 11775 2100 l

 11850 2100 l gs col0 s gr 
% Polyline
n 13425 2100 m 13500 2100 l 13575 2100 l 13650 2100 l 13725 2100 l 13800 2100 l
 13875 2100 l 13950 2100 l 14025 2100 l 14100 2100 l 14175 2100 l
 14250 2100 l 14325 2100 l 14400 2100 l 14475 2100 l 14550 2100 l

 14625 2100 l gs col0 s gr 
/Times-Roman-iso ff 300.00 scf sf
1275 1650 m
gs 1 -1 sc (10000000) col0 sh gr
/Times-Roman-iso ff 300.00 scf sf
1275 1980 m
gs 1 -1 sc (01111111) col0 sh gr
/Times-Roman-iso ff 300.00 scf sf
1050 1950 m
gs 1 -1 sc (-) col0 sh gr
/Times-Roman-iso ff 300.00 scf sf
1275 2475 m
gs 1 -1 sc (00000001) col0 sh gr
/Times-Roman-iso ff 300.00 scf sf
1350 675 m
gs 1 -1 sc (Signed Compare) col0 sh gr
/Times-Roman-iso ff 300.00 scf sf
1350 1005 m
gs 1 -1 sc (-128<127) col0 sh gr
/Times-Roman-iso ff 300.00 scf sf
1200 3000 m
gs 1 -1 sc (C=0) col0 sh gr
/Times-Roman-iso ff 300.00 scf sf
1200 3330 m
gs 1 -1 sc (V=1) col0 sh gr
/Times-Roman-iso ff 300.00 scf sf
1200 3660 m
gs 1 -1 sc (N=0) col0 sh gr
/Times-Roman-iso ff 300.00 scf sf
1200 3990 m
gs 1 -1 sc (Res: <) col0 sh gr
/Times-Roman-iso ff 300.00 scf sf
4350 1650 m
gs 1 -1 sc (01111111) col0 sh gr
/Times-Roman-iso ff 300.00 scf sf
4350 1980 m
gs 1 -1 sc (10000000) col0 sh gr
/Times-Roman-iso ff 300.00 scf sf
4350 2475 m
gs 1 -1 sc (11111111) col0 sh gr
/Times-Roman-iso ff 300.00 scf sf
4500 3075 m
gs 1 -1 sc (C=1) col0 sh gr
/Times-Roman-iso ff 300.00 scf sf
4500 3405 m
gs 1 -1 sc (V=1) col0 sh gr
/Times-Roman-iso ff 300.00 scf sf
4500 3735 m
gs 1 -1 sc (N=1) col0 sh gr
/Times-Roman-iso ff 300.00 scf sf
4500 4065 m
gs 1 -1 sc (Res: >) col0 sh gr
/Times-Roman-iso ff 300.00 scf sf
4275 1005 m
gs 1 -1 sc (127 < -128) col0 sh gr
/Times-Roman-iso ff 300.00 scf sf
7425 1005 m
gs 1 -1 sc (-1 < -2) col0 sh gr
/Times-Roman-iso ff 300.00 scf sf
7575 1650 m
gs 1 -1 sc (11111111) col0 sh gr
/Times-Roman-iso ff 300.00 scf sf
7575 1980 m
gs 1 -1 sc (11111110) col0 sh gr
/Times-Roman-iso ff 300.00 scf sf
7575 2475 m
gs 1 -1 sc (00000001) col0 sh gr
/Times-Roman-iso ff 300.00 scf sf
7800 3075 m
gs 1 -1 sc (C=0) col0 sh gr
/Times-Roman-iso ff 300.00 scf sf
7800 3405 m
gs 1 -1 sc (V=0) col0 sh gr
/Times-Roman-iso ff 300.00 scf sf
7800 3735 m
gs 1 -1 sc (N=0) col0 sh gr
/Times-Roman-iso ff 300.00 scf sf
7800 4065 m
gs 1 -1 sc (Res: >) col0 sh gr
/Times-Roman-iso ff 300.00 scf sf
10650 1980 m
gs 1 -1 sc (00000001) col0 sh gr
/Times-Roman-iso ff 300.00 scf sf
10650 2475 m
gs 1 -1 sc (00000001) col0 sh gr
/Times-Roman-iso ff 300.00 scf sf
10650 1650 m
gs 1 -1 sc (11111111) col0 sh gr
/Times-Roman-iso ff 300.00 scf sf
10875 3075 m
gs 1 -1 sc (C=0) col0 sh gr
/Times-Roman-iso ff 300.00 scf sf
10875 3405 m
gs 1 -1 sc (V=0) col0 sh gr
/Times-Roman-iso ff 300.00 scf sf
10875 3735 m
gs 1 -1 sc (N=1) col0 sh gr
/Times-Roman-iso ff 300.00 scf sf
10875 4065 m
gs 1 -1 sc (Res: <) col0 sh gr
/Times-Roman-iso ff 300.00 scf sf
10725 1005 m
gs 1 -1 sc (-1 < 1) col0 sh gr
/Times-Roman-iso ff 300.00 scf sf
13575 1005 m
gs 1 -1 sc (1 < -1) col0 sh gr
/Times-Roman-iso ff 300.00 scf sf
13500 1650 m
gs 1 -1 sc (00000001) col0 sh gr
/Times-Roman-iso ff 300.00 scf sf
13500 1980 m
gs 1 -1 sc (11111111) col0 sh gr
/Times-Roman-iso ff 300.00 scf sf
13500 2475 m
gs 1 -1 sc (00000010) col0 sh gr
/Times-Roman-iso ff 300.00 scf sf
13725 3075 m
gs 1 -1 sc (C=1) col0 sh gr
/Times-Roman-iso ff 300.00 scf sf
13725 3405 m
gs 1 -1 sc (V=0) col0 sh gr
/Times-Roman-iso ff 300.00 scf sf
13725 3735 m
gs 1 -1 sc (N=0) col0 sh gr
/Times-Roman-iso ff 300.00 scf sf
13725 4065 m
gs 1 -1 sc (Res: >) col0 sh gr
% here ends figure;
pagefooter
showpage
%%Trailer
%EOF
%%EndDocument
end PEND 4.461 -1.04(We c)33.336 508.876 T 2.381
(an designate additional condition codes, such as)1.04 F/F2 13/Courier@0
SF -1.8(LEU)4.732 G F1 5.632(,t).9 G 5.632(od)-5.632 G 2.382
(istinguish signed from)-5.632 F .526(unsigned comparison.)33.336
523.876 R .526
(The selection of signed vs unsigned condition codes follo)7.026 F .525
(ws from)-.325 F .881(the analysis of the type of the comparison e)
33.336 538.876 R 4.131(xpression. When)-.195 F .881
(unsigned and signed types)4.131 F .687
(are compared, the rules can be counter)33.336 553.876 R(-intuiti)-.26 E
-.195(ve)-.325 G 7.186(.T).195 G .686
(he reader is referred to H&S or the C)-7.186 F
(standard for a more complete discussion.)33.336 568.876 Q .164
(In these e)33.336 589.876 R .164(xamples which follo)-.195 F 1.854
-.845(w, t)-.325 H .165(here is an implicit data \215o).845 F 3.415(wo)
-.325 G 3.415(fc)-3.415 G .165(ondition codes from the)-3.415 F 3.106
(CMP operation which sets them, to the branch which references them.)
33.336 604.876 R 3.105(Another IR)9.606 F(philosoph)33.336 619.876 Q
5.577(yi)-.065 G 5.577(st)-5.577 G 5.577(or)-5.577 G 2.327
(epresent condition codes e)-5.577 F(xplicitly)-.195 E 5.577(,a)-.845 G
5.577(si)-5.577 G 5.577(ft)-5.577 G(he)-5.577 E 5.577(yw)-.195 G 2.327
(ere another form of)-5.577 F(temporary v)33.336 634.876 Q 3.25
(alue. E.g.)-.325 F/F3 10/Courier@0 SF 9.6(%CC100= CMP)33.336 646.876 R
(a,10)39.6 E 39.6(BR %CC100,GE,BB20,BB30)90.936 658.876 R F1 2.461
(If the tar)33.336 679.876 R 2.461(get of)-.234 F F2 -1.8
(gen_condexpr\(\))4.811 G F1 2.461(is a numeric e).9 F 2.46
(xpression, that must be e)-.195 F -.325(va)-.325 G 2.46(luated as an)
.325 F(rv)33.336 694.876 Q .38
(alue, and then the result must be compared ag)-.325 F .381(ainst 0.)
-.065 F(E.g.)6.881 E F2 .381 -1.8(if \(a+b\))2.731 H F1 .381(is equi)
4.531 F -.325(va)-.325 G .381(lent to).325 F F2 -1.8(if)2.731 G -1.8
(\(\(a+b\)!=0\))32.436 709.876 S/F4 13/Times-Bold@0 SF(Condition In)
211.858 739.876 Q -.13(ve)-.52 G(rsion).13 E 0 Cg EP
%%Page: 26 26
%%BeginPageSetup
BP
%%EndPageSetup
/F0 9/Times-Roman@0 SF 138.492(ECE466:Compilers Unit)33.336 60 R
(5/pg 26)2.25 E(\2512019 Jef)142.155 E 2.25(fH)-.225 G(akner)-2.25 E/F1
13/Times-Roman@0 SF(Consider this if-then statement with no else arm:)
33.336 120 Q/F2 10/Courier@0 SF(if \(a<b\))90.936 132 Q(g++;)148.536 144
Q(x=1;)90.936 156 Q 27.6(BB1: CMP)33.336 192 R(a,b)39.6 E 27.6
(BRLT BB2,BB3)90.936 204 R 27.6(BB2: g=)33.336 216 R 33.6(ADD g,1)45.6 F
39.6(BR BB3)90.936 228 R(BB3:)33.336 240 Q 39.6(x= MOV)90.936 252 R(1)
39.6 E F1 3.437 -1.04(We h)33.336 273 T -2.925 -.26(av e)1.04 H 1.356
(noted that most real assembly languages use single-tar)4.867 F 1.356
(get branches.)-.234 F 1.356(Once the)7.856 F 5.717(basic blocks ha)
33.336 288 R 6.108 -.195(ve b)-.26 H 5.718(een \214lled in, we w).195 F
5.718(ould re-tra)-.13 F -.195(ve)-.26 G 5.718(rse the control \215o)
.195 F 8.968(wg)-.325 G(raph,)-8.968 E 3.012
(concatenating basic blocks.)33.336 303 R(Whene)9.512 E -.195(ve)-.325 G
6.261(rt).195 G 3.011(here is an unconditional branch, that can be)
-6.261 F 3.997(eliminated and the tar)33.336 318 R 3.997
(get basic block can simply be placed right after the branch)-.234 F
1.653(\(assuming the tar)33.336 333 R 1.653
(get block has not yet already been placed\), taking adv)-.234 F 1.653
(antage of "f)-.325 F(all-)-.13 E 4.093(through". Lik)33.336 348 R -.325
(ew)-.13 G .843(ise, an).325 F 4.093(yt)-.195 G -.13(wo)-4.093 G(-tar)
.13 E .844(get true/f)-.234 F .844
(alse branches are simpli\214ed to be single-tar)-.13 F(get,)-.234 E
2.685(true-only branches.)33.336 363 R 2.685(The f)9.185 F 2.685
(alse le)-.13 F 5.935(gs)-.195 G 2.685(imply becomes the ne)-5.935 F
2.685(xt basic block in the linear)-.195 F(sequence, ag)33.336 378 Q
(ain utilizing f)-.065 E(all-through.)-.13 E .597(In the e)33.336 399 R
.597(xample abo)-.195 F -.195(ve)-.195 G 3.847(,w).195 G 3.847(ew)-3.847
G .597(ould be unable to eliminate the)-3.977 F/F3 13/Courier@0 SF .597
-1.8(BR bb3)2.947 H F1 3.847(,b).9 G .597(ecause the f)-3.847 F .597
(alse le)-.13 F(g)-.195 E .242(of the BRL)33.336 414 R 3.492(Tq)-1.196 G
.241(uad is bb3, and therefore bb2 could not follo)-3.492 F 3.491(wb)
-.325 G .241(b1, b)-3.491 F .241(ut instead w)-.26 F .241(ould ha)-.13 F
-.195(ve)-.26 G .645(to be isolated some)33.336 429 R .645
(where else in the linear output, resulting in an e)-.325 F .646
(xtra, w)-.195 F .646(asteful branch.)-.13 F
(But, if the condition code is re)33.336 444 Q -.195(ve)-.325 G(rsed:)
.195 E F2(BB1:)33.336 456 Q 33.6(CMP a,b)90.936 468 R 27.6(BRGE bb3,bb2)
90.936 480 R(BB2:)33.336 492 Q 39.6(g= ADD)33.336 504 R(g,1)39.6 E 39.6
(BR bb3)90.936 516 R(BB3:)33.336 528 Q 39.6(x= MOV)33.336 540 R(1)39.6 E
(...)90.936 552 Q F1(No)33.336 573 Q 2.315 -.845(w, b)-.325 H .625
(b2 , which is the true le).845 F 3.875(go)-.195 G 3.875(ft)-3.875 G
.625(he if-then statement, winds up as the f)-3.875 F .624(alse le)-.13
F 3.874(go)-.195 G 3.874(ft)-3.874 G(he)-3.874 E 5.979(branch. This)
33.336 588 R(doesn')5.979 E 5.979(tc)-.234 G 2.729
(hange the meaning of the program.)-5.979 F 2.729(It is ef)9.229 F
(fecti)-.325 E -.195(ve)-.325 G 2.729(ly a double).195 F(ne)33.336 603 Q
-.065(ga)-.195 G 3.25(tion. But).065 F(it allo)3.25 E(ws bb2 to follo)
-.325 E 3.25(wb)-.325 G(b1, resulting in the follo)-3.25 E
(wing linearization:)-.325 E F2(bb1:)33.336 615 Q 33.6(CMP a,b)90.936
627 R 27.6(BRGE bb3)90.936 639 R(bb2:)33.336 651 Q 39.6(g= ADD)33.336
663 R(g,1)39.6 E(bb3:)33.336 675 Q(...)90.936 687 Q/F4 13/Times-Bold@0
SF(Conditional Expr)143.166 732 Q(essions in an r)-.234 E -.13(va)-.13 G
(lue context).13 E 0 Cg EP
%%Page: 27 27
%%BeginPageSetup
BP
%%EndPageSetup
/F0 9/Times-Roman@0 SF 138.492(ECE466:Compilers Unit)33.336 60 R
(5/pg 27)2.25 E(\2512019 Jef)142.155 E 2.25(fH)-.225 G(akner)-2.25 E/F1
13/Times-Roman@0 SF(Consider)33.336 120 Q/F2 10/Courier@0 SF(f\(\))
33.336 144 Q({)33.336 156 Q(g= \(a<b\);)90.936 168 Q(})33.336 180 Q F1
.68(Here the conditional e)33.336 201 R(xpression)-.195 E/F3 13
/Courier@0 SF -1.8(a<b)3.029 G F1 .679
(does not appear in a control \215o)4.829 F 3.929(wc)-.325 G(onte)-3.929
E 3.929(xt. Instead)-.195 F(it)3.929 E 1.205(must generate a v)33.336
216 R 1.206(alue 0 or 1.)-.325 F 1.206(One w)7.706 F 1.206
(ay to code this is \(note conditional in)-.13 F -.195(ve)-.52 G 1.206
(rsion from).195 F(implied if-then control \215o)33.336 231 Q(w\):)-.325
E F2(bb1:)33.336 243 Q 33.6(CMP a,b)90.936 255 R 27.6(BRGE bb3,bb2)
90.936 267 R(bb2:)33.336 279 Q 39.6(g= MOV)33.336 291 R(1)39.6 E(BR bb4)
90.936 303 Q(bb3:)33.336 315 Q 39.6(g= MOV)33.336 327 R(0)39.6 E(BR bb4)
90.936 339 Q(bb4:)33.336 351 Q F1 2.057
(Another choice might be to add a feature to the IR which allo)33.336
366 R 2.057(ws direct access to the)-.325 F .592(condition codes.)33.336
381 R(Belo)7.092 E 3.842(ww)-.325 G 3.842(ei)-3.842 G .593
(ntroduce an operation)-3.842 F F3 -1.8(CC_LT)2.943 G F1 .593
(which generates a v)4.743 F .593(alue of 1 if)-.325 F
(the condition codes indicate L)33.336 396 Q 1.924 -.962(T, a)-1.196 H
(nd 0 otherwise.).962 E F2(bb1:)33.336 408 Q 33.6(CMP a,b)90.936 420 R
39.6(g= CC_LT)33.336 432 R F1 .622(Some processors)33.336 453 R(ha)7.121
E 1.011 -.195(ve a)-.26 H 3.871(ni).195 G .621
(nstruction which does this directly)-3.871 F 3.871(,e)-.845 G .621
(.g. the)-3.871 F F3 -1.8(setcc)2.971 G F1(instructions)4.771 E 2.009
(on the X86 architecture.)33.336 468 R 2.009
(If such an instruction is lacking, b)8.509 F 2.01
(ut access to the condition)-.26 F 1.241(codes re)33.336 483 R 1.241(gi\
ster is possible, it could be emulated by masking and shifting the appr\
opriate)-.195 F 2.802(condition codes \215ags bits.)33.336 498 R 2.803
(Branches tend to be e)9.302 F(xpensi)-.195 E 3.193 -.195(ve o)-.325 H
6.053(nm).195 G 2.803(odern processors, so)-6.053 F(replacing the branc\
h with straight-line code may be a good optimization.)33.336 513 Q/F4 13
/Times-Bold@0 SF(Short-cir)200.834 543 Q(cuit operations)-.234 E F1
(In man)33.336 579 Q 3.25(yp)-.195 G
(rogramming languages, a construct such as:)-3.25 E F2
(IF \(A<B AND D>E\))33.336 591 Q F1 2.061
(does not de\214ne the order in which the tw)33.336 606 R 5.311(oo)-.13
G 2.061(perands to the logical AND operator are)-5.311 F -.325(eva)
33.336 621 S 3.805(luated. On).325 F .555(the other hand, C is among th\
ose languages which speci\214cally de\214nes the)3.805 F 3.58
(order using the so-called "short-circuit" rule.)33.336 636 R 3.58
(In the e)10.08 F(xpression)-.195 E F3 3.58 -1.8(\(a<b && d>e\))5.93 H
F1 6.829(,t).9 G(he)-6.829 E(sube)33.336 651 Q(xpression)-.195 E F3 -1.8
(a<b)2.742 G F1 .392(is al)4.542 F -.13(wa)-.13 G .392(ys e).13 F -.325
(va)-.325 G .392(luated \214rst.).325 F .392(If this e)6.892 F .392
(xpression is f)-.195 F .392(alse, there is no need to)-.13 F -.325(eva)
33.336 666 S(luate).325 E F3 -1.8(d<e)4.549 G F1 5.449(,b).9 G 2.199
(ecause it doesn')-5.449 F 5.449(tm)-.234 G 2.199(atter an)-5.449 F
5.449(ymore. This)-.195 F(isn')5.448 E 5.448(tj)-.234 G 2.198
(ust laziness, short-circuit)-5.448 F
(rules are a traditional C metaphor for handling a potentially unsafe e)
33.336 681 Q -.325(va)-.325 G(luation:).325 E F2(char *p;)33.336 693 Q
(if \(p && *p=='X'\))90.936 717 Q({d++;})13.2 E F1 .481(The e)33.336 738
R(xpression)-.195 E F3 -1.8(*p=='X')2.831 G F1 .481(will ne)4.631 F
-.195(ve)-.325 G 3.731(rg).195 G .481(et e)-3.731 F -.325(va)-.325 G
.481(luated \(and therefore).325 F F3 -1.8(*p)2.831 G F1 .482
(will not get e)4.631 F -.325(va)-.325 G(luated\)).325 E 0 Cg EP
%%Page: 28 28
%%BeginPageSetup
BP
%%EndPageSetup
/F0 9/Times-Roman@0 SF 138.492(ECE466:Compilers Unit)33.336 60 R
(5/pg 28)2.25 E(\2512019 Jef)142.155 E 2.25(fH)-.225 G(akner)-2.25 E/F1
13/Times-Roman@0 SF(if p is NULL.)33.336 120 Q 1.482(In terms of IR gen\
eration, logical operators create additional hidden basic blocks.)33.336
141 R(The)7.982 E(code abo)33.336 156 Q .39 -.195(ve i)-.195 H 3.25(se)
.195 G(qui)-3.25 E -.325(va)-.325 G(lent to:).325 E/F2 10/Courier@0 SF
(if \(p\))90.936 168 Q({)90.936 180 Q(if \(*p=='X'\))148.536 192 Q(d++;)
206.136 216 Q(})148.536 228 Q(})90.936 240 Q F1 1.151(i.e. gen_conde)
33.336 255 R 1.151(xpr\(\) or gen_rv)-.195 F 1.151
(alue\(\) must create additional implicit conditional branches)-.325 F
(when the && or || operators are part of a conditional or rv)33.336 270
Q(alue e)-.325 E(xpression.)-.195 E -1.04(We)33.336 291 S -2.145 -.65
('v e)1.04 H .347(already seen ho)4.247 F 3.597(wt)-.325 G 3.597(og)
-3.597 G .347
(enerate quads for if-then statements, so it should come as no)-3.597 F
(surprise to see something lik)33.336 306 Q 3.25(et)-.13 G(his:)-3.25 E
F2(bb1:)33.336 318 Q 33.6(CMP p,0)90.936 330 R 27.6(BREQ bb3,bb2)90.936
342 R(bb2:)33.336 354 Q 27.6(%T1= LOAD p)33.336 366 R 33.6(CMP T1,'X')
90.936 378 R 27.6(BRNE bb3,bb4)90.936 390 R(bb4:)33.336 402 Q 39.6
(d= ADD)33.336 414 R(d,1)39.6 E 39.6(BR bb3)90.936 426 R 27.6(bb3: ...)
33.336 438 R/F3 13/Times-Bold@0 SF(Loops)250.358 483 Q F1 1.705
(The C language de\214nes three types of loop: while, do-while and for)
33.336 519 R 8.205(.B)-.715 G(elo)-8.205 E 4.955(wa)-.325 G 1.705
(re some)-4.955 F 1.483(schematic IRs for these constructs.)33.336 534 R
1.483(Note that an)7.983 F 4.733(ye)-.195 G 1.483
(xtra basic blocks which conditional)-4.928 F -.195(ex)33.336 549 S
(pressions, loop bodies, etc.).195 E(generate are ignored:)6.5 E F2
(while \(a<b\))33.336 561 Q({)33.336 573 Q(BODY)90.936 585 Q(})33.336
597 Q(bb2:)33.336 621 Q 33.6(CMP a,b)90.936 633 R 27.6(BRGE bb4,bb3)
90.936 645 R(bb3:)33.336 657 Q(...IR for BODY ...)90.936 669 Q 39.6
(BR bb2)90.936 681 R(bb4:)33.336 693 Q F1 1.789(Once ag)33.336 714 R
1.79(ain, note the use of conditional in)-.065 F -.195(ve)-.52 G 1.79
(rsion to put the IR in a form which lends).195 F .017
(itself to a single branch tar)33.336 729 R .016(get architecture.)-.234
F .016(Note that if, in the BOD)6.516 F 3.266(Yo)-.715 G 3.266(ft)-3.266
G .016(he loop, a)-3.266 F/F4 13/Courier@0 SF -1.8(break)2.366 G F1 .034
(statement is encountered, that is equi)33.336 744 R -.325(va)-.325 G
.034(lent to an unconditional branch to bb3.).325 F(Lik)6.534 E -.325
(ew)-.13 G .034(ise a).325 F 0 Cg EP
%%Page: 29 29
%%BeginPageSetup
BP
%%EndPageSetup
/F0 9/Times-Roman@0 SF 138.492(ECE466:Compilers Unit)33.336 60 R
(5/pg 29)2.25 E(\2512019 Jef)142.155 E 2.25(fH)-.225 G(akner)-2.25 E/F1
13/Courier@0 SF -1.8(continue)32.436 120 S/F2 13/Times-Roman@0 SF
(goes to bb1.)4.15 E(Here is an alternate implementation:)6.5 E/F3 10
/Courier@0 SF 27.6(BB1: ...)33.336 132 R 39.6(BR BB3)90.936 144 R(BB2:)
33.336 156 Q(... BODY ...)90.936 168 Q 27.6(BB3: CMP)33.336 180 R 91.2
(a,b #continue)39.6 F(point)6 E 27.6(BRLT BB2,BB4)90.936 192 R(BB4:)
33.336 204 Q(... break point ...)90.936 216 Q F2 1.015(This alternati)
33.336 231 R 1.405 -.195(ve e)-.325 H 1.015
(liminates one branch in the iteration, and w).195 F 1.015(ould be f)
-.13 F 1.015(aster than the \214rst)-.13 F .212
(form if the number of iterations is tw)33.336 246 R 3.463(oo)-.13 G
3.463(rg)-3.463 G(reater)-3.463 E 3.463(,w)-.52 G .213
(hich is usually the case.)-3.463 F .213(Note that the)6.713 F .576
(condition code is NO)33.336 261 R 3.826(Ti)-.52 G -2.405 -.52(nv e)
-3.826 H .576(rted in this case, because the f).52 F .575(alse le)-.13 F
3.825(gi)-.195 G 3.825(st)-3.825 G .575(he f)-3.825 F .575
(all-through, and)-.13 F(the true le)33.336 276 Q 3.25(gi)-.195 G 3.25
(st)-3.25 G(he branch.)-3.25 E(Let')33.336 297 Q 3.25(ss)-.715 G
(ee a do-while loop:)-3.25 E F3(do)33.336 309 Q({)33.336 321 Q(BODY)
90.936 333 Q 6(}w)33.336 345 S(hile \(a<b\))-6 E(bb1:)33.336 381 Q
(...code prior to do loop ...)90.936 393 Q(bb2:)33.336 405 Q
(IR for BODY)90.936 417 Q(bb3:)33.336 429 Q 33.6(CMP a,b)90.936 441 R
27.6(BRLT bb2,bb4)90.936 453 R(bb4:)33.336 465 Q(...)90.936 477 Q F2
2.199(Although there does not appear to be a reason for introducing bas\
ic block bb2, there)33.336 498 R .006(could be a)33.336 513 R F1 -1.8
(continue)2.356 G F2 .005
(statement inside the loop body and bb2 represents the continue point.)
4.156 F 1.189(The condition code is NO)33.336 528 R 4.439(Ti)-.52 G
-2.405 -.52(nv e)-4.439 H 4.439(rted. But).52 F 1.19
(consider this do-while loop with short-circuit)4.44 F
(operators in the conditional e)33.336 543 Q(xpression:)-.195 E F3(do)
33.336 555 Q({)33.336 567 Q(BODY)90.936 579 Q 6(}w)33.336 591 S
(hile \(a<b && d<e\);)-6 E(bb1:)33.336 615 Q
(... code prior to do loop ...)90.936 627 Q(bb2:)33.336 639 Q
(IR for BODY)90.936 651 Q 27.6(bb3: /*)33.336 663 R(continue point */)6
E 33.6(CMP a,b)90.936 675 R 27.6(BRGE bb4,bb5)90.936 687 R(bb5:)33.336
699 Q 33.6(CMP d,e)90.936 711 R 27.6(BRLT bb2,bb4)90.936 723 R(bb4:)
33.336 735 Q 0 Cg EP
%%Page: 30 30
%%BeginPageSetup
BP
%%EndPageSetup
/F0 9/Times-Roman@0 SF 138.492(ECE466:Compilers Unit)33.336 60 R
(5/pg 30)2.25 E(\2512019 Jef)142.155 E 2.25(fH)-.225 G(akner)-2.25 E/F1
13/Times-Roman@0 SF 2.207(Here the \214rst test w)33.336 120 R 2.207
(as in)-.13 F -.195(ve)-.52 G 2.207(rted, b).195 F 2.207
(ut the second w)-.26 F(asn')-.13 E 5.456(t. What)-.234 F(gi)5.456 E
-.195(ve)-.325 G 5.456(s? W).195 F 5.456(ec)-1.04 G 2.206(an use the)
-5.456 F(follo)33.336 135 Q .521(wing method: P)-.325 F(ass)-.195 E/F2
13/Courier@0 SF -1.8(gen_condexpr\(\))2.871 G F1 3.772<618d>4.672 G .522
(ag indicating whether the statement in which)-3.772 F 2.227
(the conditional e)33.336 150 R 2.227(xpression appears naturally "w)
-.195 F 2.227(ants" a condition code in)-.13 F -.195(ve)-.52 G 5.476
(rsion. This).195 F .398(\215ag is honored for a simple comparison, b)
33.336 165 R .398(ut if a boolean short-circuit operator \(&& or ||\))
-.26 F .198(is in)33.336 180 R -.26(vo)-.52 G(lv).26 E .198
(ed, the left side of that operator is recursi)-.195 F -.195(ve)-.325 G
.198(ly e).195 F -.325(va)-.325 G .198(luated with in).325 F -.195(ve)
-.52 G .198(rsion requested,).195 F 1.287(then the v)33.336 195 R 1.287
(alue of the \215ag is used to determine in)-.325 F -.195(ve)-.52 G
1.287(rsion of the right side.).195 F 1.287(This process)7.787 F 1.787
(can of course be e)33.336 210 R 1.787(xtended to arbitrarily comple)
-.195 F 5.037(xe)-.195 G 5.037(xpressions. The)-5.232 F 1.787
(reader is in)5.037 F 1.787(vited to)-.52 F(contemplate)33.336 225 Q F2
-1.8(do { BODY }\(while \(a<b || c==d && e!=f\);)2.35 G F1(No)33.336 246
Q 3.25(wl)-.325 G(et')-3.25 E 3.25(sl)-.715 G
(ook at the most complicated loop statement:)-3.25 E/F3 10/Courier@0 SF
(for\(a=1;a<40;a++\))33.336 273 Q({)33.336 285 Q(BODY)90.936 297 Q(})
33.336 309 Q(FIRST FORM:)33.336 333 Q(BB1:)33.336 345 Q 39.6(a= MOV)
33.336 357 R(1)39.6 E 39.6(BR BB4)90.936 369 R 27.6(BB2: ...BODY...)
33.336 381 R 39.6(BR BB3)90.936 393 R 27.6(BB3: #continue)33.336 405 R
(point)6 E 39.6(a= ADD)33.336 417 R(a,1)39.6 E(BB4:)33.336 429 Q 33.6
(CMP a,40)90.936 441 R 27.6(BRLT BB2,BB5)90.936 453 R 27.6(BB5: #break)
33.336 465 R(point)6 E(SECOND FORM:)33.336 501 Q(bb1:)33.336 513 Q 39.6
(a= MOV)33.336 525 R(1)39.6 E 33.6(CMP a,40)90.936 537 R 27.6
(BRGE bb4,bb2)90.936 549 R(bb2:)33.336 561 Q(IR for BODY)90.936 573 Q
39.6(BR bb3)90.936 585 R(bb3:)33.336 597 Q 39.6(a= ADD)33.336 609 R(a,1)
39.6 E 33.6(CMP a,40)90.936 621 R 27.6(BRLT bb2,bb4)90.936 633 R(bb4:)
33.336 645 Q(...)90.936 657 Q F1 .49
(In both forms, the condition code is not in)33.336 678 R -.195(ve)-.52
G .491(rted, because the true le).195 F 3.741(gi)-.195 G 3.741(st)-3.741
G .491(he branch back.)-3.741 F 2.027(The \214rst form uses fe)33.336
693 R 2.026(wer quads, b)-.325 F 2.026
(ut the second form will be slightly f)-.26 F 2.026(aster when the)-.13
F .017(number of iterations is small, because it a)33.336 708 R -.26(vo)
-.26 G .017(ids the cost of the e).26 F .017(xtra branch, at the e)-.195
F(xpense)-.195 E .326(of duplication the "test" part \(middle le)33.336
723 R .326(g\) of the for loop.)-.195 F .325
(Note that in the second form, a)6.826 F(tri)33.336 738 Q 1.066
(vial optimization is possible via constant propag)-.325 F 4.316
(ation. It)-.065 F 1.067(is kno)4.317 F 1.067(wn that)-.325 F F2(a)3.417
E F1 1.067(contains the)3.417 F 0 Cg EP
%%Page: 31 31
%%BeginPageSetup
BP
%%EndPageSetup
/F0 9/Times-Roman@0 SF 138.492(ECE466:Compilers Unit)33.336 60 R
(5/pg 31)2.25 E(\2512019 Jef)142.155 E 2.25(fH)-.225 G(akner)-2.25 E/F1
13/Times-Roman@0 SF -.325(va)33.336 120 S .599(lue 1 and therefore the \
outcome of the compare and branch is determinable at compile).325 F
(time, and can be eliminated.)33.336 135 Q 0 0 468 969 -263.703 546
33.336 434.703 PBEGIN
%%BeginDocument: loops.eps
%!PS-Adobe-2.0 EPSF-2.0
%%Title: loops.fig
%%Creator: fig2dev Version 3.2 Patchlevel 4
%%CreationDate: Thu Nov 22 23:33:05 2012
%%For: hak@lex ()
%%BoundingBox: 0 0 969 546
%%Magnification: 1.0000
%%EndComments
/$F2psDict 200 dict def
$F2psDict begin
$F2psDict /mtrx matrix put
/col-1 {0 setgray} bind def
/col0 {0.000 0.000 0.000 srgb} bind def
/col1 {0.000 0.000 1.000 srgb} bind def
/col2 {0.000 1.000 0.000 srgb} bind def
/col3 {0.000 1.000 1.000 srgb} bind def
/col4 {1.000 0.000 0.000 srgb} bind def
/col5 {1.000 0.000 1.000 srgb} bind def
/col6 {1.000 1.000 0.000 srgb} bind def
/col7 {1.000 1.000 1.000 srgb} bind def
/col8 {0.000 0.000 0.560 srgb} bind def
/col9 {0.000 0.000 0.690 srgb} bind def
/col10 {0.000 0.000 0.820 srgb} bind def
/col11 {0.530 0.810 1.000 srgb} bind def
/col12 {0.000 0.560 0.000 srgb} bind def
/col13 {0.000 0.690 0.000 srgb} bind def
/col14 {0.000 0.820 0.000 srgb} bind def
/col15 {0.000 0.560 0.560 srgb} bind def
/col16 {0.000 0.690 0.690 srgb} bind def
/col17 {0.000 0.820 0.820 srgb} bind def
/col18 {0.560 0.000 0.000 srgb} bind def
/col19 {0.690 0.000 0.000 srgb} bind def
/col20 {0.820 0.000 0.000 srgb} bind def
/col21 {0.560 0.000 0.560 srgb} bind def
/col22 {0.690 0.000 0.690 srgb} bind def
/col23 {0.820 0.000 0.820 srgb} bind def
/col24 {0.500 0.190 0.000 srgb} bind def
/col25 {0.630 0.250 0.000 srgb} bind def
/col26 {0.750 0.380 0.000 srgb} bind def
/col27 {1.000 0.500 0.500 srgb} bind def
/col28 {1.000 0.630 0.630 srgb} bind def
/col29 {1.000 0.750 0.750 srgb} bind def
/col30 {1.000 0.880 0.880 srgb} bind def
/col31 {1.000 0.840 0.000 srgb} bind def

end
save
newpath 0 546 moveto 0 0 lineto 969 0 lineto 969 546 lineto closepath clip newpath
4.5 594.7 translate
1 -1 scale

/cp {closepath} bind def
/ef {eofill} bind def
/gr {grestore} bind def
/gs {gsave} bind def
/sa {save} bind def
/rs {restore} bind def
/l {lineto} bind def
/m {moveto} bind def
/rm {rmoveto} bind def
/n {newpath} bind def
/s {stroke} bind def
/sh {show} bind def
/slc {setlinecap} bind def
/slj {setlinejoin} bind def
/slw {setlinewidth} bind def
/srgb {setrgbcolor} bind def
/rot {rotate} bind def
/sc {scale} bind def
/sd {setdash} bind def
/ff {findfont} bind def
/sf {setfont} bind def
/scf {scalefont} bind def
/sw {stringwidth} bind def
/tr {translate} bind def
/tnt {dup dup currentrgbcolor
  4 -2 roll dup 1 exch sub 3 -1 roll mul add
  4 -2 roll dup 1 exch sub 3 -1 roll mul add
  4 -2 roll dup 1 exch sub 3 -1 roll mul add srgb}
  bind def
/shd {dup dup currentrgbcolor 4 -2 roll mul 4 -2 roll mul
  4 -2 roll mul srgb} bind def
/reencdict 12 dict def /ReEncode { reencdict begin
/newcodesandnames exch def /newfontname exch def /basefontname exch def
/basefontdict basefontname findfont def /newfont basefontdict maxlength dict def
basefontdict { exch dup /FID ne { dup /Encoding eq
{ exch dup length array copy newfont 3 1 roll put }
{ exch newfont 3 1 roll put } ifelse } { pop pop } ifelse } forall
newfont /FontName newfontname put newcodesandnames aload pop
128 1 255 { newfont /Encoding get exch /.notdef put } for
newcodesandnames length 2 idiv { newfont /Encoding get 3 1 roll put } repeat
newfontname newfont definefont pop end } def
/isovec [
8#055 /minus 8#200 /grave 8#201 /acute 8#202 /circumflex 8#203 /tilde
8#204 /macron 8#205 /breve 8#206 /dotaccent 8#207 /dieresis
8#210 /ring 8#211 /cedilla 8#212 /hungarumlaut 8#213 /ogonek 8#214 /caron
8#220 /dotlessi 8#230 /oe 8#231 /OE
8#240 /space 8#241 /exclamdown 8#242 /cent 8#243 /sterling
8#244 /currency 8#245 /yen 8#246 /brokenbar 8#247 /section 8#250 /dieresis
8#251 /copyright 8#252 /ordfeminine 8#253 /guillemotleft 8#254 /logicalnot
8#255 /hyphen 8#256 /registered 8#257 /macron 8#260 /degree 8#261 /plusminus
8#262 /twosuperior 8#263 /threesuperior 8#264 /acute 8#265 /mu 8#266 /paragraph
8#267 /periodcentered 8#270 /cedilla 8#271 /onesuperior 8#272 /ordmasculine
8#273 /guillemotright 8#274 /onequarter 8#275 /onehalf
8#276 /threequarters 8#277 /questiondown 8#300 /Agrave 8#301 /Aacute
8#302 /Acircumflex 8#303 /Atilde 8#304 /Adieresis 8#305 /Aring
8#306 /AE 8#307 /Ccedilla 8#310 /Egrave 8#311 /Eacute
8#312 /Ecircumflex 8#313 /Edieresis 8#314 /Igrave 8#315 /Iacute
8#316 /Icircumflex 8#317 /Idieresis 8#320 /Eth 8#321 /Ntilde 8#322 /Ograve
8#323 /Oacute 8#324 /Ocircumflex 8#325 /Otilde 8#326 /Odieresis 8#327 /multiply
8#330 /Oslash 8#331 /Ugrave 8#332 /Uacute 8#333 /Ucircumflex
8#334 /Udieresis 8#335 /Yacute 8#336 /Thorn 8#337 /germandbls 8#340 /agrave
8#341 /aacute 8#342 /acircumflex 8#343 /atilde 8#344 /adieresis 8#345 /aring
8#346 /ae 8#347 /ccedilla 8#350 /egrave 8#351 /eacute
8#352 /ecircumflex 8#353 /edieresis 8#354 /igrave 8#355 /iacute
8#356 /icircumflex 8#357 /idieresis 8#360 /eth 8#361 /ntilde 8#362 /ograve
8#363 /oacute 8#364 /ocircumflex 8#365 /otilde 8#366 /odieresis 8#367 /divide
8#370 /oslash 8#371 /ugrave 8#372 /uacute 8#373 /ucircumflex
8#374 /udieresis 8#375 /yacute 8#376 /thorn 8#377 /ydieresis] def
/Times-Roman /Times-Roman-iso isovec ReEncode
/$F2psBegin {$F2psDict begin /$F2psEnteredState save def} def
/$F2psEnd {$F2psEnteredState restore end} def

$F2psBegin
10 setmiterlimit
0 slj 0 slc
 0.06000 0.06000 sc
%
% Fig objects follow
%
% 
% here starts figure with depth 50
% Polyline
7.500 slw
n 825 3450 m 2325 3450 l 2325 4650 l 825 4650 l
 cp gs col0 s gr 
% Polyline
n 825 5250 m 2325 5250 l 2325 6450 l 825 6450 l
 cp gs col0 s gr 
% Polyline
n 825 7050 m 2325 7050 l 2325 8250 l 825 8250 l
 cp gs col0 s gr 
% Polyline
gs  clippath
1545 5265 m 1605 5265 l 1605 5113 l 1575 5233 l 1545 5113 l cp
eoclip
n 1575 4650 m
 1575 5250 l gs col0 s gr gr

% arrowhead
n 1545 5113 m 1575 5233 l 1605 5113 l  col0 s
% Polyline
gs  clippath
1851 7026 m 1870 7083 l 2014 7035 l 1891 7045 l 1995 6978 l cp
eoclip
n 1875 4650 m 2775 5250 l 2775 6750 l
 1875 7050 l gs col0 s gr gr

% arrowhead
n 1995 6978 m 1891 7045 l 2014 7035 l  col0 s
% Polyline
gs  clippath
1545 3465 m 1605 3465 l 1605 3313 l 1575 3433 l 1545 3313 l cp
eoclip
n 1575 6450 m 1575 6750 l 525 6750 l 525 3150 l 1575 3150 l
 1575 3450 l gs col0 s gr gr

% arrowhead
n 1545 3313 m 1575 3433 l 1605 3313 l  col0 s
% Polyline
n 825 1650 m 2325 1650 l 2325 2850 l 825 2850 l
 cp gs col0 s gr 
% Polyline
gs  clippath
1695 3465 m 1755 3465 l 1755 3313 l 1725 3433 l 1695 3313 l cp
eoclip
n 1725 2850 m
 1725 3450 l gs col0 s gr gr

% arrowhead
n 1695 3313 m 1725 3433 l 1755 3313 l  col0 s
/Times-Roman-iso ff 200.00 scf sf
975 4200 m
gs 1 -1 sc (eval cond) col0 sh gr
/Times-Roman-iso ff 200.00 scf sf
975 4455 m
gs 1 -1 sc (expr) col0 sh gr
/Times-Roman-iso ff 200.00 scf sf
1425 4950 m
gs 1 -1 sc (T) col0 sh gr
/Times-Roman-iso ff 200.00 scf sf
2475 4950 m
gs 1 -1 sc (F) col0 sh gr
/Times-Roman-iso ff 200.00 scf sf
1275 5550 m
gs 1 -1 sc (BODY) col0 sh gr
/Times-Roman-iso ff 200.00 scf sf
1275 1500 m
gs 1 -1 sc (current BB) col0 sh gr
/Times-Roman-iso ff 200.00 scf sf
75 7200 m
gs 1 -1 sc (Bbreak:) col0 sh gr
/Times-Roman-iso ff 200.00 scf sf
-75 5400 m
gs 1 -1 sc (Bbody:) col0 sh gr
/Times-Roman-iso ff 200.00 scf sf
-75 3600 m
gs 1 -1 sc (Bcont:) col0 sh gr
/Times-Roman-iso ff 200.00 scf sf
975 1050 m
gs 1 -1 sc (WHILE LOOP) col0 sh gr
% Polyline
n 10500 1800 m 12000 1800 l 12000 3000 l 10500 3000 l
 cp gs col0 s gr 
% Polyline
n 10500 3600 m 12000 3600 l 12000 4800 l 10500 4800 l
 cp gs col0 s gr 
% Polyline
gs  clippath
11220 3615 m 11280 3615 l 11280 3463 l 11250 3583 l 11220 3463 l cp
eoclip
n 11250 3000 m
 11250 3600 l gs col0 s gr gr

% arrowhead
n 11220 3463 m 11250 3583 l 11280 3463 l  col0 s
% Polyline
n 10500 5100 m 12000 5100 l 12000 6300 l 10500 6300 l
 cp gs col0 s gr 
% Polyline
gs  clippath
11220 6915 m 11280 6915 l 11280 6763 l 11250 6883 l 11220 6763 l cp
eoclip
n 11700 3000 m 11700 3300 l 12600 3300 l 12600 6600 l 11250 6600 l
 11250 6900 l gs col0 s gr gr

% arrowhead
n 11220 6763 m 11250 6883 l 11280 6763 l  col0 s
% Polyline
n 10500 6900 m 12000 6900 l 12000 8100 l 10500 8100 l
 cp gs col0 s gr 
% Polyline
gs  clippath
10770 3615 m 10830 3615 l 10830 3463 l 10800 3583 l 10770 3463 l cp
eoclip
n 10800 6300 m 10800 6600 l 9600 6600 l 9600 3300 l 10800 3300 l
 10800 3600 l gs col0 s gr gr

% arrowhead
n 10770 3463 m 10800 3583 l 10830 3463 l  col0 s
% Polyline
gs  clippath
11070 6915 m 11130 6915 l 11130 6763 l 11100 6883 l 11070 6763 l cp
eoclip
n 11100 6300 m
 11100 6900 l gs col0 s gr gr

% arrowhead
n 11070 6763 m 11100 6883 l 11130 6763 l  col0 s
/Times-Roman-iso ff 200.00 scf sf
10650 2550 m
gs 1 -1 sc (eval cond) col0 sh gr
/Times-Roman-iso ff 200.00 scf sf
10650 2805 m
gs 1 -1 sc (expr) col0 sh gr
/Times-Roman-iso ff 200.00 scf sf
12750 3300 m
gs 1 -1 sc (F) col0 sh gr
/Times-Roman-iso ff 200.00 scf sf
9750 7050 m
gs 1 -1 sc (Bbreak:) col0 sh gr
/Times-Roman-iso ff 200.00 scf sf
9750 5400 m
gs 1 -1 sc (Bcont:) col0 sh gr
/Times-Roman-iso ff 200.00 scf sf
10650 5400 m
gs 1 -1 sc (incr expr) col0 sh gr
/Times-Roman-iso ff 200.00 scf sf
10650 6150 m
gs 1 -1 sc (expr) col0 sh gr
/Times-Roman-iso ff 200.00 scf sf
10650 5850 m
gs 1 -1 sc (eval cond) col0 sh gr
/Times-Roman-iso ff 200.00 scf sf
10950 4200 m
gs 1 -1 sc (BODY) col0 sh gr
/Times-Roman-iso ff 200.00 scf sf
10950 3300 m
gs 1 -1 sc (T) col0 sh gr
/Times-Roman-iso ff 200.00 scf sf
10200 6450 m
gs 1 -1 sc (T) col0 sh gr
/Times-Roman-iso ff 200.00 scf sf
11250 6450 m
gs 1 -1 sc (F) col0 sh gr
/Times-Roman-iso ff 200.00 scf sf
9750 3750 m
gs 1 -1 sc (Bbody:) col0 sh gr
/Times-Roman-iso ff 200.00 scf sf
10950 2250 m
gs 1 -1 sc (init expr) col0 sh gr
/Times-Roman-iso ff 200.00 scf sf
10950 1650 m
gs 1 -1 sc (current BB) col0 sh gr
% Polyline
n 3975 3450 m 5475 3450 l 5475 4650 l 3975 4650 l
 cp gs col0 s gr 
% Polyline
n 3975 5250 m 5475 5250 l 5475 6450 l 3975 6450 l
 cp gs col0 s gr 
% Polyline
n 3975 7050 m 5475 7050 l 5475 8250 l 3975 8250 l
 cp gs col0 s gr 
% Polyline
n 3975 1650 m 5475 1650 l 5475 2850 l 3975 2850 l
 cp gs col0 s gr 
% Polyline
gs  clippath
4695 5265 m 4755 5265 l 4755 5113 l 4725 5233 l 4695 5113 l cp
eoclip
n 4650 2850 m 4650 3075 l 5700 3075 l 5700 5025 l 4725 5025 l
 4725 5250 l gs col0 s gr gr

% arrowhead
n 4695 5113 m 4725 5233 l 4755 5113 l  col0 s
% Polyline
gs  clippath
4470 5265 m 4530 5265 l 4530 5113 l 4500 5233 l 4470 5113 l cp
eoclip
n 4500 4650 m
 4500 5250 l gs col0 s gr gr

% arrowhead
n 4470 5113 m 4500 5233 l 4530 5113 l  col0 s
% Polyline
gs  clippath
4245 3465 m 4305 3465 l 4305 3313 l 4275 3433 l 4245 3313 l cp
eoclip
n 4125 6450 m 4125 6750 l 3825 6750 l 3825 3150 l 4275 3150 l
 4275 3450 l gs col0 s gr gr

% arrowhead
n 4245 3313 m 4275 3433 l 4305 3313 l  col0 s
% Polyline
gs  clippath
4995 7065 m 5055 7065 l 5055 6913 l 5025 7033 l 4995 6913 l cp
eoclip
n 5025 6450 m
 5025 7050 l gs col0 s gr gr

% arrowhead
n 4995 6913 m 5025 7033 l 5055 6913 l  col0 s
% Polyline
n 6900 5400 m 8400 5400 l 8400 6600 l 6900 6600 l
 cp gs col0 s gr 
% Polyline
n 6900 7200 m 8400 7200 l 8400 8400 l 6900 8400 l
 cp gs col0 s gr 
% Polyline
gs  clippath
7620 7215 m 7680 7215 l 7680 7063 l 7650 7183 l 7620 7063 l cp
eoclip
n 7650 6600 m
 7650 7200 l gs col0 s gr gr

% arrowhead
n 7620 7063 m 7650 7183 l 7680 7063 l  col0 s
% Polyline
n 6900 3600 m 8400 3600 l 8400 4800 l 6900 4800 l
 cp gs col0 s gr 
% Polyline
gs  clippath
7770 5415 m 7830 5415 l 7830 5263 l 7800 5383 l 7770 5263 l cp
eoclip
n 7800 4800 m
 7800 5400 l gs col0 s gr gr

% arrowhead
n 7770 5263 m 7800 5383 l 7830 5263 l  col0 s
% Polyline
gs  clippath
7920 3615 m 7980 3615 l 7980 3463 l 7950 3583 l 7920 3463 l cp
eoclip
n 8100 6600 m 8100 6900 l 8700 6900 l 8700 3300 l 7950 3300 l
 7950 3600 l gs col0 s gr gr

% arrowhead
n 7920 3463 m 7950 3583 l 7980 3463 l  col0 s
% Polyline
gs  clippath
7620 3615 m 7680 3615 l 7680 3463 l 7650 3583 l 7620 3463 l cp
eoclip
n 7650 3000 m
 7650 3600 l gs col0 s gr gr

% arrowhead
n 7620 3463 m 7650 3583 l 7680 3463 l  col0 s
% Polyline
n 6900 1800 m 8400 1800 l 8400 3000 l 6900 3000 l
 cp gs col0 s gr 
% Polyline
gs  clippath
11295 5115 m 11355 5115 l 11355 4963 l 11325 5083 l 11295 4963 l cp
eoclip
n 11325 4800 m
 11325 5100 l gs col0 s gr gr

% arrowhead
n 11295 4963 m 11325 5083 l 11355 4963 l  col0 s
% Polyline
n 13950 1800 m 15450 1800 l 15450 3000 l 13950 3000 l
 cp gs col0 s gr 
% Polyline
n 13950 3600 m 15450 3600 l 15450 4800 l 13950 4800 l
 cp gs col0 s gr 
% Polyline
n 13950 5100 m 15450 5100 l 15450 6300 l 13950 6300 l
 cp gs col0 s gr 
% Polyline
gs  clippath
14670 6915 m 14730 6915 l 14730 6763 l 14700 6883 l 14670 6763 l cp
eoclip
n 15150 3000 m 15150 3300 l 16050 3300 l 16050 6600 l 14700 6600 l
 14700 6900 l gs col0 s gr gr

% arrowhead
n 14670 6763 m 14700 6883 l 14730 6763 l  col0 s
% Polyline
n 13950 6900 m 15450 6900 l 15450 8100 l 13950 8100 l
 cp gs col0 s gr 
% Polyline
gs  clippath
14220 3615 m 14280 3615 l 14280 3463 l 14250 3583 l 14220 3463 l cp
eoclip
n 14325 8100 m 14325 8550 l 13050 8550 l 13050 3300 l 14250 3300 l
 14250 3600 l gs col0 s gr gr

% arrowhead
n 14220 3463 m 14250 3583 l 14280 3463 l  col0 s
% Polyline
gs  clippath
14520 6915 m 14580 6915 l 14580 6763 l 14550 6883 l 14520 6763 l cp
eoclip
n 14550 6300 m
 14550 6900 l gs col0 s gr gr

% arrowhead
n 14520 6763 m 14550 6883 l 14580 6763 l  col0 s
% Polyline
n 13950 8700 m 15450 8700 l 15450 9900 l 13950 9900 l
 cp gs col0 s gr 
% Polyline
gs  clippath
14970 8790 m 15030 8790 l 15030 8638 l 15000 8758 l 14970 8638 l cp
eoclip
n 15000 8100 m
 15000 8775 l gs col0 s gr gr

% arrowhead
n 14970 8638 m 15000 8758 l 15030 8638 l  col0 s
% Polyline
gs  clippath
14670 5115 m 14730 5115 l 14730 4963 l 14700 5083 l 14670 4963 l cp
eoclip
n 14700 4800 m
 14700 5100 l gs col0 s gr gr

% arrowhead
n 14670 4963 m 14700 5083 l 14730 4963 l  col0 s
/Times-Roman-iso ff 200.00 scf sf
7050 1050 m
gs 1 -1 sc (DO-WHILE LOOP) col0 sh gr
/Times-Roman-iso ff 200.00 scf sf
10800 1050 m
gs 1 -1 sc (FOR LOOP) col0 sh gr
/Times-Roman-iso ff 200.00 scf sf
4425 1500 m
gs 1 -1 sc (current BB) col0 sh gr
/Times-Roman-iso ff 200.00 scf sf
3225 7200 m
gs 1 -1 sc (Bbreak:) col0 sh gr
/Times-Roman-iso ff 200.00 scf sf
4125 1275 m
gs 1 -1 sc (\(ALTERNATE\)) col0 sh gr
/Times-Roman-iso ff 200.00 scf sf
4125 975 m
gs 1 -1 sc (WHILE LOOP) col0 sh gr
/Times-Roman-iso ff 200.00 scf sf
4125 6300 m
gs 1 -1 sc (expr) col0 sh gr
/Times-Roman-iso ff 200.00 scf sf
4125 6075 m
gs 1 -1 sc (eval cond) col0 sh gr
/Times-Roman-iso ff 200.00 scf sf
4425 3825 m
gs 1 -1 sc (BODY) col0 sh gr
/Times-Roman-iso ff 200.00 scf sf
4200 6675 m
gs 1 -1 sc (T) col0 sh gr
/Times-Roman-iso ff 200.00 scf sf
4875 6675 m
gs 1 -1 sc (F) col0 sh gr
/Times-Roman-iso ff 200.00 scf sf
3225 3600 m
gs 1 -1 sc (Bbody:) col0 sh gr
/Times-Roman-iso ff 200.00 scf sf
3225 5400 m
gs 1 -1 sc (Bcont:) col0 sh gr
/Times-Roman-iso ff 200.00 scf sf
7050 6150 m
gs 1 -1 sc (eval cond) col0 sh gr
/Times-Roman-iso ff 200.00 scf sf
7050 6405 m
gs 1 -1 sc (expr) col0 sh gr
/Times-Roman-iso ff 200.00 scf sf
6150 5550 m
gs 1 -1 sc (Bcont:) col0 sh gr
/Times-Roman-iso ff 200.00 scf sf
7350 4350 m
gs 1 -1 sc (BODY) col0 sh gr
/Times-Roman-iso ff 200.00 scf sf
6150 7350 m
gs 1 -1 sc (Bbreak:) col0 sh gr
/Times-Roman-iso ff 200.00 scf sf
8850 6900 m
gs 1 -1 sc (T) col0 sh gr
/Times-Roman-iso ff 200.00 scf sf
7350 6900 m
gs 1 -1 sc (F) col0 sh gr
/Times-Roman-iso ff 200.00 scf sf
7200 1650 m
gs 1 -1 sc (current BB) col0 sh gr
/Times-Roman-iso ff 200.00 scf sf
6150 3600 m
gs 1 -1 sc (Bbody:) col0 sh gr
/Times-Roman-iso ff 200.00 scf sf
13500 1050 m
gs 1 -1 sc (FOR LOOP\(alt\)) col0 sh gr
/Times-Roman-iso ff 200.00 scf sf
13200 5400 m
gs 1 -1 sc (Bcont:) col0 sh gr
/Times-Roman-iso ff 200.00 scf sf
14100 5400 m
gs 1 -1 sc (incr expr) col0 sh gr
/Times-Roman-iso ff 200.00 scf sf
14400 4200 m
gs 1 -1 sc (BODY) col0 sh gr
/Times-Roman-iso ff 200.00 scf sf
14400 3300 m
gs 1 -1 sc (T) col0 sh gr
/Times-Roman-iso ff 200.00 scf sf
13200 3750 m
gs 1 -1 sc (Bbody:) col0 sh gr
/Times-Roman-iso ff 200.00 scf sf
14400 2250 m
gs 1 -1 sc (init expr) col0 sh gr
/Times-Roman-iso ff 200.00 scf sf
14400 1650 m
gs 1 -1 sc (current BB) col0 sh gr
/Times-Roman-iso ff 200.00 scf sf
14175 7500 m
gs 1 -1 sc (eval cond) col0 sh gr
/Times-Roman-iso ff 200.00 scf sf
14400 7650 m
gs 1 -1 sc (expr) col0 sh gr
/Times-Roman-iso ff 200.00 scf sf
15225 8400 m
gs 1 -1 sc (F) col0 sh gr
/Times-Roman-iso ff 200.00 scf sf
14100 8400 m
gs 1 -1 sc (T) col0 sh gr
/Times-Roman-iso ff 200.00 scf sf
13200 9000 m
gs 1 -1 sc (Bbreak:) col0 sh gr
% here ends figure;
$F2psEnd
rs
showpage
%%EndDocument
end PEND/F2 13/Times-Bold@0 SF(br)203.031 470.703 Q(eak, continue, r)
-.234 E(etur)-.234 E(n)-.195 E F1 .957(It should be f)33.336 506.703 R
.957(airly ob)-.13 F .957
(vious that the break and continue statements are e)-.195 F .957
(xactly equi)-.195 F -.325(va)-.325 G(lent).325 E 1.015(to a goto, to t\
he internal basic block label representing the appropriate point in the\
 loop)33.336 521.703 R .984(\(for the continue\) or the statement follo)
33.336 536.703 R .984(wing the loop \(for break\).)-.325 F .985
(This requires, as part)7.485 F .272(of our state "cursor", k)33.336
551.703 R .271
(eeping track of the current break and continue points of the closest)
-.13 F .205(enclosing loop statement.)33.336 566.703 R .206
(There is an additional complication because of the o)6.705 F -.195(ve)
-.195 G(rloading).195 E
(of the break statement between loops and switch statements \(see belo)
33.336 581.703 Q(w\).)-.325 E 3.443 -1.04(We a)33.336 602.703 T 1.363
(lready kno)1.04 F 4.613(wt)-.325 G 1.363
(hat a return statement must terminate the basic block.)-4.613 F 1.363
(Where return)7.863 F .365(statements e)33.336 617.703 R .365
(xist in the middle of a function, we could e)-.195 F .366
(xplicitly place them in the IR as a)-.195 F 1.675(RETURN opcode.)33.336
632.703 R 3.755 -1.04(We h)8.175 H 1.675(ad said earlier that e)1.04 F
-.195(ve)-.325 G 1.674(ry basic block is to be tagged with the).195 F
1.21(possible e)33.336 647.703 R 1.21
(xit branches, either a single unconditional branch, or a true/f)-.195 F
1.21(alse pair)-.13 F 7.71(.W)-.715 G 1.21(ith a)-8.23 F 1.215
(RETURN, we could adopt the con)33.336 662.703 R -.195(ve)-.52 G 1.215
(ntion that there are 0 e).195 F 1.215(xit branches, designating an)
-.195 F 5.613(implied branch to the)33.336 677.703 R 5.613
(EXIT node of the control \215o)12.113 F 8.863(wg)-.325 G 5.613
(raph for the function.)-8.863 F(Alternati)33.336 692.703 Q -.195(ve)
-.325 G(ly).195 E 4.451(,w)-.845 G 4.451(ec)-4.451 G 1.201
(ould designate one basic block as the e)-4.451 F 1.2
(xit node for the function, and)-.195 F
(return statements can be implemented as a branch to that e)33.336
707.703 Q(xit block.)-.195 E F2(switch statements)218.417 737.703 Q 0 Cg
EP
%%Page: 32 32
%%BeginPageSetup
BP
%%EndPageSetup
/F0 9/Times-Roman@0 SF 138.492(ECE466:Compilers Unit)33.336 60 R
(5/pg 32)2.25 E(\2512019 Jef)142.155 E 2.25(fH)-.225 G(akner)-2.25 E/F1
13/Times-Roman@0 SF
(The switch statement in C can be thought of as a series of if tests:)
33.336 120 Q/F2 10/Courier@0 SF(switch\(c\))33.336 132 Q({)33.336 144 Q
(case 1:)39.336 156 Q(/*...*/)90.936 168 Q(break;)90.936 180 Q(case 2:)
39.336 192 Q(/*...*/)90.936 204 Q(break;)90.936 216 Q(default:)39.336
228 Q(/*...*/)90.936 240 Q(break;)90.936 252 Q(})33.336 264 Q
(equivalent:)33.336 288 Q(if \(c==1\) goto case_1;)33.336 312 Q
(else if \(c==2\) goto case_2;)33.336 324 Q(else goto case_default;)
33.336 336 Q({)33.336 348 Q(case_1:)39.336 360 Q(/*...*/)90.936 372 Q
(goto end_switch;)90.936 384 Q(case_2:)39.336 396 Q(/*..*/)90.936 408 Q
(goto end_switch;)90.936 420 Q(case_default:)39.336 432 Q(/*..*/)90.936
444 Q(goto end_switch;)90.936 456 Q(})33.336 468 Q(end_switch:;)33.336
480 Q F1 .313(Although traditional C stylistic guidelines mak)33.336 501
R 3.563(eu)-.13 G 3.563(sw)-3.563 G .313
(rite switch statements in the manner)-3.563 F(sho)33.336 516 Q .827
(wn abo)-.325 F -.195(ve)-.195 G 4.077(,c).195 G .827
(ase labels are in f)-4.077 F .826
(act just another form of label, which only happen to be)-.13 F -.325
(va)33.336 531 S .338(lid inside of a switch statement.).325 F .338
(There is no requirement that the statement attached as)6.838 F 3.144
(the body of a switch be a compound statement, nor is there an)33.336
546 R 6.394(yr)-.195 G 3.144(estriction ag)-6.394 F(ainst)-.065 E
(branching into that statement:)33.336 561 Q F2(/*...*/)90.936 573 Q
(goto plain_label;)90.936 585 Q(/*...*/)90.936 597 Q(switch\(state\))
90.936 621 Q(default: for\(i=0;i<k;i++\))96.936 633 Q({)148.536 645 Q
(/*...*/)206.136 657 Q(case STATE_INIT:)206.136 669 Q(/*...*/)263.736
681 Q(plain_label:/*...*/)206.136 693 Q(/*...*/)263.736 705 Q
(case STATE_CLOSING:)206.136 717 Q(case STATE_WAITING:)206.136 729 Q
(/*...*/)263.736 741 Q 0 Cg EP
%%Page: 33 33
%%BeginPageSetup
BP
%%EndPageSetup
/F0 9/Times-Roman@0 SF 138.492(ECE466:Compilers Unit)33.336 60 R
(5/pg 33)2.25 E(\2512019 Jef)142.155 E 2.25(fH)-.225 G(akner)-2.25 E/F1
10/Courier@0 SF(})148.536 117 Q/F2 13/Times-Roman@0 SF
(Another strange e)33.336 138 Q(xample:)-.195 E F1(switch\(x\))90.936
150 Q(default:)148.536 162 Q(if \(prime\(x\)\))206.136 174 Q(case 2:)
212.136 186 Q(case 3:)212.136 198 Q(case 5:)212.136 210 Q
(process_prime\(x\);)263.736 222 Q(else)206.136 234 Q(case 4:)212.136
246 Q(case 6:)212.136 258 Q(process_comp\(x\);)263.736 270 Q F2
(Such usage is strange and not recommended, b)33.336 285 Q
(ut the compiler must understand it.)-.26 E .136(It is easy to see that\
 this model of generating code for a switch statement will lead to a lo\
t)33.336 306 R .451(of conditional branches.)33.336 321 R 3.701(At)6.951
G .451(raditional w)-3.701 F .45(ay of optimizing this is to use a)-.13
F/F3 13/Times-Bold@0 SF .45(computed goto)3.7 F F2(.)A 2.404
(Let us emplo)33.336 336 R 5.654(yt)-.13 G 2.404(he non-standard GCC e)
-5.654 F 2.404(xtension of the && operator)-.195 F 5.654(,w)-.52 G 2.404
(hich creates a)-5.654 F(pointer to a statement label.)33.336 351 Q
(Then the tw)6.5 E(o-case e)-.13 E(xample abo)-.195 E .39 -.195(ve m)
-.195 H(ight be equi).195 E -.325(va)-.325 G(lent to:).325 E F1
(void *__temp[2]={&&case_1,&&case_2};)33.336 363 Q
(if \(c<1 || c>2\) goto)90.936 375 Q(case_default;)12 E
(else goto *__temp[c-1];)90.936 387 Q F2 .096
(If the number of cases is lar)33.336 408 R .095(ge and the v)-.234 F
.095(alues are contiguous \(or nearly so with only a fe)-.325 F(w)-.325
E -.065(ga)33.336 423 S .345
(ps\) this method can be a considerable optimization.).065 F .345
(It requires that, at code generation)6.845 F 1.839
(time, a table of addresses be constructed.)33.336 438 R 1.838
(This table is referenced only by an internal)8.339 F 2.347
(label which the compiler creates.)33.336 453 R 2.347(\(The abo)12.097 F
2.737 -.195(ve ex)-.195 H 2.347(ample is simpli\214ed b).195 F 2.347
(ut it should be)-.26 F -.13(fa)33.336 468 S(irly self-e).13 E
(vident ho)-.325 E 3.25(wt)-.325 G 3.25(oe)-3.25 G(xtend it for an)
-3.445 E 3.25(yc)-.195 G(ontiguous range\).)-3.25 E .781
(If there are man)33.336 489 R 4.031(yc)-.195 G .781(ase v)-4.031 F .781
(alues b)-.325 F .781(ut the)-.26 F 4.031(ya)-.195 G .781
(re sparse, it may be most ef)-4.031 F .78(\214cient to place all of)
-.325 F .412(the v)33.336 504 R .412(alues and branch tar)-.325 F .413
(gets, in sorted order)-.234 F 3.663(,i)-.52 G .413
(nto a table, and use binary search to select)-3.663 F(the tar)33.336
519 Q(get.)-.234 E .215(The compiler must decide when it is more ef)
33.336 540 R .215(\214cient to use a lookup table vs a sequence of)-.325
F 5.968(tests. This)33.336 555 R 2.719(decision may be dif)5.968 F 2.719
(\214cult to mak)-.325 F 2.719(e, because at the time of IR generation,)
-.13 F(kno)33.336 570 Q 1.019(wledge of the relati)-.325 F 1.409 -.195
(ve ex)-.325 H 1.019(pense of the v).195 F 1.018
(arious assembly-language operations may not)-.325 F .014(be kno)33.336
585 R 3.264(wn. Furthermore,)-.325 F .015
(using a lookup table requires the compiler to e)3.265 F .015
(xtend its notion of)-.195 F .307(basic block e)33.336 600 R .307
(xits to include an arbitrary number of possible tar)-.195 F .307
(gets rather than just tw)-.234 F 3.556(oa)-.13 G(s)-3.556 E(heretofore\
 illustrated, and to include some method in the IR of encoding the jump\
 table.)33.336 615 Q 2.59
(switch statements add to our code generation state "cursor".)33.336 636
R -.52(Wi)9.09 G 2.59(thin the body of the).52 F 1.534
(switch statement, the break tar)33.336 651 R 1.533
(get must be set to the basic block which will follo)-.234 F 4.783(wt)
-.325 G(he)-4.783 E 3.588(switch. The)33.336 666 R .339
(body of the switch statement should be generated \214rst, in a ne)3.588
F 3.589(wb)-.325 G .339(asic block.)-3.589 F .521
(During the course of that generation, an)33.336 681 R 3.771(ys)-.195 G
.521(tatements with a case or def)-3.771 F .521(ault label attached)-.13
F 1.086(should be noted and a list of such labels associated with the e\
nclosing switch statement)33.336 696 R .646(\(in an)33.336 711 R 3.896
(yo)-.195 G .646(ther conte)-3.896 F .646(xt, case and def)-.195 F .646
(ault labels are not v)-.13 F 3.896(alid\). Each)-.325 F .646
(of these labels will, of)3.896 F .656(course, introduce a ne)33.336 726
R 3.906(wb)-.325 G .656(asic block.)-3.906 F .657(The compiler must k)
7.156 F .657(eep track of which label v)-.13 F(alue)-.325 E .533
(is associated with which block.)33.336 741 R .532
(It must also detect errors such as duplicate v)7.032 F 3.782(alues. If)
-.325 F(no)3.782 E 0 Cg EP
%%Page: 34 34
%%BeginPageSetup
BP
%%EndPageSetup
/F0 9/Times-Roman@0 SF 138.492(ECE466:Compilers Unit)33.336 60 R
(5/pg 34)2.25 E(\2512019 Jef)142.155 E 2.25(fH)-.225 G(akner)-2.25 E/F1
13/Times-Roman@0 SF(def)33.336 120 Q .253
(ault label is found within the switch statement body)-.13 F 3.504(,o)
-.845 G .254(ne must be created which points)-3.504 F .485(to the ne)
33.336 135 R .485(xt basic block.)-.195 F .485(Then the code to e)6.985
F -.325(va)-.325 G .484(luate the switch e).325 F .484
(xpression and perform the)-.195 F 1.466(branching \(whiche)33.336 150 R
-.195(ve)-.325 G 4.716(ra).195 G 1.467
(lgorithm is selected\) should be generated into the original basic)
-4.716 F 5.526(block. \(this)33.336 165 R 2.276(may cause that basic bl\
ock to split one or more times as a result of the)5.526 F(branches\))
33.336 180 Q/F2 13/Times-Bold@0 SF(Function Calls)226.704 225 Q F1 .186
(Functions are v)33.336 261 R .186(ery self-contained in C, unlik)-.195
F 3.437(ei)-.13 G 3.437(nm)-3.437 G(an)-3.437 E 3.437(yo)-.195 G .187
(ther languages where the)-3.437 F 3.437(yc)-.195 G .187(an be)-3.437 F
.497(nested within each other)33.336 276 R 6.997(.F)-.715 G .497
(unctions are the basic unit of inter)-6.997 F .497(-\214le linkage.)
-.26 F .497(The compiler)6.997 F .688(can not generally assume an)33.336
291 R 3.938(yk)-.195 G(no)-3.938 E .688
(wledge of the function being called, other than what is)-.325 F(kno)
33.336 306 Q(wn from its prototype.)-.325 E 4.478(Although control al)
33.336 327 R -.13(wa)-.13 G 4.478
(ys returns to the point after the function call, it w).13 F 4.478
(ould be)-.13 F .661
(appropriate to terminate the current basic block and be)33.336 342 R
.661(gin a ne)-.195 F 3.911(wo)-.325 G 3.911(ne. This)-3.911 F .662
(will simplify)3.912 F .454(some data \215o)33.336 357 R 3.704(wa)-.325
G .454(nalysis assumptions, since once control lea)-3.704 F -.195(ve)
-.26 G 3.704(st).195 G .454(he current basic block to)-3.704 F
(enter another function, it is possible that global v)33.336 372 Q
(ariables may be modi\214ed.)-.325 E -1.04(We)33.336 393 S -.13('l)1.04
G 4.008(lh).13 G -2.925 -.26(av e)-4.008 H .759
(to defer a lot of discussion of function calls to a later unit.)4.268 F
.759(The function call)7.259 F .118
(sequence consists of 7 parts: the caller sa)33.336 408 R .118
(ving whate)-.26 F -.195(ve)-.325 G 3.368(rr).195 G -.195(eg)-3.368 G
.118(isters need to be preserv).195 F .117(ed, the)-.195 F 3.022
(caller e)33.336 423 R -.325(va)-.325 G 3.022
(luating and placing the ar).325 F 3.023
(guments in their proper places, the callee sa)-.234 F(ving)-.26 E(re)
33.336 438 Q 2.633(gisters, the callee placing the return v)-.195 F
2.633(alue in the correct place, the callee restoring)-.325 F(re)33.336
453 Q 2.015(gisters which it sa)-.195 F -.195(ve)-.26 G 2.015
(d, the caller e).195 F 2.015(xtracting the return v)-.195 F 2.015
(alue, and the caller restoring)-.325 F(re)33.336 468 Q
(gisters which it sa)-.195 E -.195(ve)-.26 G 3.25(d. At).195 F
(the IR le)3.25 E -.195(ve)-.325 G(l, we are not concerned with re).195
E(gisters, so let')-.195 E 3.25(sl)-.715 G(ook)-3.25 E
(at the other phases.)33.336 483 Q .584(Clearly a function call can not\
 be represented by a single traditional quad, because it has)33.336 504
R 3.699(ap)33.336 519 S .449(otentially lar)-3.699 F .449
(ge number of ar)-.234 F 3.699(guments. Code)-.234 F .448
(is generated in the caller to e)3.699 F -.325(va)-.325 G .448
(luate each).325 F(ar)33.336 534 Q 5.119(gument. The)-.234 F 5.119(Cs)
5.119 G 1.869(tandard says that the order of ar)-5.119 F 1.869(gument e)
-.234 F -.325(va)-.325 G 1.869(luation is not speci\214ed.).325 F
(This is a common source of programmer error if side-ef)33.336 549 Q
(fects e)-.325 E(xist in the ar)-.195 E(guments:)-.234 E/F3 10/Courier@0
SF(main\(\))33.336 561 Q({)33.336 573 Q(char *p="ABC";)39.336 585 Q
(printf\("%c %c %c\\n",*p++,*p++,*p++\);)90.936 597 Q(})33.336 609 Q F1
3.638(On the X86-32 architecture, ar)33.336 630 R 3.638
(guments are passed on the stack, with the left-most)-.234 F(ar)33.336
645 Q 1.122(gument being pushed)-.234 F/F4 13/Times-Italic@0 SF(last)
4.372 E F1 7.622(.T)C 1.122(his ensures that the left-most ar)-7.622 F
1.122(gument will be closest to)-.234 F .474
(the top of the stack as vie)33.336 660 R .473(wed by the callee.)-.325
F .473(In the e)6.973 F -.195(ve)-.325 G .473(nt that more ar).195 F
.473(guments are passed)-.234 F 2.005(than the callee e)33.336 675 R
2.005(xpects, no ill ef)-.195 F 2.005(fects result.)-.325 F 2.005
(If, ho)8.505 F(we)-.325 E -.195(ve)-.325 G 3.045 -.52(r, t).195 H 2.005
(he left-most ar).52 F 2.005(gument were)-.234 F 1.588
(pushed \214rst, then the callee w)33.336 690 R 1.588
(ould not be able to kno)-.13 F 4.837(wi)-.325 G 1.587
(ts position with respect to the)-4.837 F 4.164
(stack pointer on entry to the function if the function tak)33.336 705 R
4.165(es a v)-.13 F 4.165(ariable number of)-.325 F(ar)33.336 720 Q
(guments.)-.234 E .558(Most compilers for X86-32 w)33.336 741 R .558
(ould therefore prefer to e)-.13 F -.325(va)-.325 G .558(luate the ar)
.325 F .558(guments in the same)-.234 F 0 Cg EP
%%Page: 35 35
%%BeginPageSetup
BP
%%EndPageSetup
/F0 9/Times-Roman@0 SF 138.492(ECE466:Compilers Unit)33.336 60 R
(5/pg 35)2.25 E(\2512019 Jef)142.155 E 2.25(fH)-.225 G(akner)-2.25 E/F1
13/Times-Roman@0 SF 4.108(right-to-left order in which the)33.336 120 R
7.358(yw)-.195 G 4.108(ill be pushed.)-7.358 F 4.108(This a)10.608 F
-.26(vo)-.26 G 4.108(ids e).26 F(xcessi)-.195 E 4.498 -.195(ve t)-.325 H
(emporary).195 E -.325(va)33.336 135 S 3.25(riables. The).325 F
(code abo)3.25 E .39 -.195(ve t)-.195 H(herefore prints out the counter)
.195 E(-intuiti)-.26 E .39 -.195(ve ")-.325 H(CB).195 E(A".)-.455 E
4.038(On the other hand, in the SP)33.336 156 R 4.038
(ARC architecture, ar)-1.196 F 4.037(guments are generally passed in)
-.234 F(re)33.336 171 Q 6.874(gisters. The)-.195 F 3.624(left-most ar)
6.874 F 3.624(gument goes in re)-.234 F 3.624(gister %o0, the ne)-.195 F
3.624(xt one in %o1, etc.)-.195 F 1.005
(Compilers for this architecture will probably w)33.336 186 R 1.004
(ant to e)-.13 F -.325(va)-.325 G 1.004
(luate left-to-right, and the code).325 F(abo)33.336 201 Q .39 -.195
(ve o)-.195 H(utputs "ABC".).195 E(Gi)33.336 222 Q -.195(ve)-.325 G
3.924(nt).195 G .675(he architecture dependence of function ar)-3.924 F
.675(gument passing, we')-.234 F 3.925(dw)-.65 G .675(ant to introduce)
-4.055 F 5.449(af)33.336 237 S 2.199(airly \215e)-5.579 F 2.199
(xible and neutral w)-.195 F 2.199(ay of representing it in IR.)-.13 F
4.278 -1.04(We m)8.699 H 2.198(ight introduce the IR)1.04 F 2.267(instr\
uction ARGBEGIN, which has no destination and one source operand gi)
33.336 252 R 2.267(ving the)-.325 F .862(total number of ar)33.336 267 R
.862(guments which follo)-.234 F 5.802 -.845(w. T)-.325 H .862
(hen an ARG instruction with a single source).845 F 1.196
(operand which is used to "push" the ar)33.336 282 R 1.196
(gument, and \214nally a CALL instruction with the)-.234 F .805
(address of the function to call.)33.336 297 R .805(The order of the ar)
7.305 F .804(guments could be left implicit \( or an)-.234 F -.195(ex)
33.336 312 S(plicit ar).195 E
(gument number could be squeezed in to the ARG instruction.)-.234 E/F2
10/Courier@0 SF(/* example of a function call */)33.336 324 Q(z\(a,b\))
90.936 336 Q(BB100:)33.336 360 Q 3.6(ARGBEGIN 2)90.936 372 R 33.6
(ARG 1,a)90.936 384 R 33.6(ARG 2,b)90.936 396 R 27.6(CALL z)90.936 408 R
39.6(BR BB101)90.936 420 R(/* Because the fncall terminates the BB */)
85.2 E(/* This fall-through would be optimized out later and the)90.936
432 Q(above BR quad would not generate an equivalent asm opcode */)
148.536 444 Q(BB101:)33.336 456 Q F1 .308
(On the callee side, formal parameters are just another form of v)33.336
477 R 3.558(ariable. W)-.325 F 3.558(ed)-1.04 G(on')-3.558 E 3.558(tn)
-.234 G .308(eed to)-3.558 F 4.401(do an)33.336 492 R 4.401(ything dif)
-.195 F 4.4
(ferent from an IR standpoint to access these parameters; the)-.325 F
7.65(ya)-.195 G(re)-7.65 E .826
(essentially another "address mode," and analogously we ha)33.336 507 R
1.217 -.195(ve c)-.26 H .827(hosen not to w).195 F .827(orry about)-.13
F(local vs global v)33.336 522 Q(ariable addressing at this time.)-.325
E 3.451 -1.04(We n)33.336 543 T 1.371(eed a RETURN instruction in the I\
R which accepts a single source operand.)1.04 F(The)7.87 E .145
(issuance of a RETURN terminates the current basic block.)33.336 558 R
3.395(Ab)6.645 G .145(asic block thus terminated)-3.395 F .512
(should be noted as it forms an EXIT node for the control \215o)33.336
573 R 3.761(wg)-.325 G .511(raph of the function.)-3.761 F(An)7.011 E
(alternati)33.336 588 Q .635 -.195(ve n)-.325 H .245
(otation is that the RETURN quad sets the return v).195 F .245
(alue from the function, and)-.325 F .591(is follo)33.336 603 R .591
(wed by an e)-.325 F .591(xplicit branch to the e)-.195 F .591
(xit node of the function.)-.195 F .59(The optimizer or back)7.09 F .341
(end could later recognize this and emit a)33.336 618 R/F3 13/Courier@0
SF -1.8(ret)2.691 G F1 .342(instruction which accomplishes both things.)
4.492 F(This latter approach allo)33.336 633 Q
(ws for there to be a single point where control e)-.325 E
(xits a function.)-.195 E .026(The original C de\214nition did not allo)
33.336 654 R 3.276(ws)-.325 G .026
(tructures to be returned from functions.)-3.276 F .026(Based on)6.526 F
1.164(our pre)33.336 669 R 1.164(vious discussion, we can see the probl\
em: structures are not scalar types, and so)-.325 F 1.103
(returning a structure breaks our RETURN model.)33.336 684 R -1.04(We)
7.603 G -.13('l)1.04 G 4.353(lh).13 G -2.925 -.26(av e)-4.353 H 1.103
(to discuss this later when)4.613 F
(we look at speci\214c architectures and calling con)33.336 699 Q -.195
(ve)-.52 G(ntions.).195 E 0 Cg EP
%%Trailer
end
%%EOF
