%!PS-Adobe-3.0
%%Creator: groff version 1.22.2
%%CreationDate: Wed Mar 27 01:36:28 2019
%%DocumentNeededResources: font Times-Roman
%%+ font Times-Bold
%%+ font Courier
%%+ font Times-Italic
%%DocumentSuppliedResources: procset grops 1.22 2
%%Pages: 15
%%PageOrder: Ascend
%%DocumentMedia: Default 612 792 0 () ()
%%Orientation: Portrait
%%EndComments
%%BeginDefaults
%%PageMedia: Default
%%EndDefaults
%%BeginProlog
%%BeginResource: procset grops 1.22 2
%!PS-Adobe-3.0 Resource-ProcSet
/setpacking where{
pop
currentpacking
true setpacking
}if
/grops 120 dict dup begin
/SC 32 def
/A/show load def
/B{0 SC 3 -1 roll widthshow}bind def
/C{0 exch ashow}bind def
/D{0 exch 0 SC 5 2 roll awidthshow}bind def
/E{0 rmoveto show}bind def
/F{0 rmoveto 0 SC 3 -1 roll widthshow}bind def
/G{0 rmoveto 0 exch ashow}bind def
/H{0 rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/I{0 exch rmoveto show}bind def
/J{0 exch rmoveto 0 SC 3 -1 roll widthshow}bind def
/K{0 exch rmoveto 0 exch ashow}bind def
/L{0 exch rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/M{rmoveto show}bind def
/N{rmoveto 0 SC 3 -1 roll widthshow}bind def
/O{rmoveto 0 exch ashow}bind def
/P{rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/Q{moveto show}bind def
/R{moveto 0 SC 3 -1 roll widthshow}bind def
/S{moveto 0 exch ashow}bind def
/T{moveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/SF{
findfont exch
[exch dup 0 exch 0 exch neg 0 0]makefont
dup setfont
[exch/setfont cvx]cvx bind def
}bind def
/MF{
findfont
[5 2 roll
0 3 1 roll
neg 0 0]makefont
dup setfont
[exch/setfont cvx]cvx bind def
}bind def
/level0 0 def
/RES 0 def
/PL 0 def
/LS 0 def
/MANUAL{
statusdict begin/manualfeed true store end
}bind def
/PLG{
gsave newpath clippath pathbbox grestore
exch pop add exch pop
}bind def
/BP{
/level0 save def
1 setlinecap
1 setlinejoin
DEFS/BPhook known{DEFS begin BPhook end}if
72 RES div dup scale
LS{
90 rotate
}{
0 PL translate
}ifelse
1 -1 scale
}bind def
/EP{
level0 restore
showpage
}def
/DA{
newpath arcn stroke
}bind def
/SN{
transform
.25 sub exch .25 sub exch
round .25 add exch round .25 add exch
itransform
}bind def
/DL{
SN
moveto
SN
lineto stroke
}bind def
/DC{
newpath 0 360 arc closepath
}bind def
/TM matrix def
/DE{
TM currentmatrix pop
translate scale newpath 0 0 .5 0 360 arc closepath
TM setmatrix
}bind def
/RC/rcurveto load def
/RL/rlineto load def
/ST/stroke load def
/MT/moveto load def
/CL/closepath load def
/Fr{
setrgbcolor fill
}bind def
/setcmykcolor where{
pop
/Fk{
setcmykcolor fill
}bind def
}if
/Fg{
setgray fill
}bind def
/FL/fill load def
/LW/setlinewidth load def
/Cr/setrgbcolor load def
/setcmykcolor where{
pop
/Ck/setcmykcolor load def
}if
/Cg/setgray load def
/RE{
findfont
dup maxlength 1 index/FontName known not{1 add}if dict begin
{
1 index/FID ne
2 index/UniqueID ne
and
{def}{pop pop}ifelse
}forall
/Encoding exch def
dup/FontName exch def
currentdict end definefont pop
}bind def
/DEFS 0 def
/EBEGIN{
moveto
DEFS begin
}bind def
/EEND/end load def
/CNT 0 def
/level1 0 def
/PBEGIN{
/level1 save def
translate
div 3 1 roll div exch scale
neg exch neg exch translate
0 setgray
0 setlinecap
1 setlinewidth
0 setlinejoin
10 setmiterlimit
[]0 setdash
/setstrokeadjust where{
pop
false setstrokeadjust
}if
/setoverprint where{
pop
false setoverprint
}if
newpath
/CNT countdictstack def
userdict begin
/showpage{}def
/setpagedevice{}def
mark
}bind def
/PEND{
cleartomark
countdictstack CNT sub{end}repeat
level1 restore
}bind def
end def
/setpacking where{
pop
setpacking
}if
%%EndResource
%%EndProlog
%%BeginSetup
%%BeginFeature: *PageSize Default
<< /PageSize [ 612 792 ] /ImagingBBox null >> setpagedevice
%%EndFeature
%%IncludeResource: font Times-Roman
%%IncludeResource: font Times-Bold
%%IncludeResource: font Courier
%%IncludeResource: font Times-Italic
grops begin/DEFS 1 dict def DEFS begin/u{.001 mul}bind def end/RES 72
def/PL 792 def/LS false def/ENC0[/asciicircum/asciitilde/Scaron/Zcaron
/scaron/zcaron/Ydieresis/trademark/quotesingle/Euro/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/space/exclam/quotedbl/numbersign/dollar/percent
/ampersand/quoteright/parenleft/parenright/asterisk/plus/comma/hyphen
/period/slash/zero/one/two/three/four/five/six/seven/eight/nine/colon
/semicolon/less/equal/greater/question/at/A/B/C/D/E/F/G/H/I/J/K/L/M/N/O
/P/Q/R/S/T/U/V/W/X/Y/Z/bracketleft/backslash/bracketright/circumflex
/underscore/quoteleft/a/b/c/d/e/f/g/h/i/j/k/l/m/n/o/p/q/r/s/t/u/v/w/x/y
/z/braceleft/bar/braceright/tilde/.notdef/quotesinglbase/guillemotleft
/guillemotright/bullet/florin/fraction/perthousand/dagger/daggerdbl
/endash/emdash/ff/fi/fl/ffi/ffl/dotlessi/dotlessj/grave/hungarumlaut
/dotaccent/breve/caron/ring/ogonek/quotedblleft/quotedblright/oe/lslash
/quotedblbase/OE/Lslash/.notdef/exclamdown/cent/sterling/currency/yen
/brokenbar/section/dieresis/copyright/ordfeminine/guilsinglleft
/logicalnot/minus/registered/macron/degree/plusminus/twosuperior
/threesuperior/acute/mu/paragraph/periodcentered/cedilla/onesuperior
/ordmasculine/guilsinglright/onequarter/onehalf/threequarters
/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE
/Ccedilla/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex
/Idieresis/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis
/multiply/Oslash/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn
/germandbls/agrave/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla
/egrave/eacute/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis
/eth/ntilde/ograve/oacute/ocircumflex/otilde/odieresis/divide/oslash
/ugrave/uacute/ucircumflex/udieresis/yacute/thorn/ydieresis]def
/Times-Italic@0 ENC0/Times-Italic RE/Courier@0 ENC0/Courier RE
/Times-Bold@0 ENC0/Times-Bold RE/Times-Roman@0 ENC0/Times-Roman RE
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
BP
%%EndPageSetup
/F0 9/Times-Roman@0 SF 122.742(ECE466:Compilers Unit)69.336 60 R(6/pg 1)
2.25 E(\2512019 Jef)126.405 E 2.25(fH)-.225 G(akner)-2.25 E/F1 13
/Times-Bold@0 SF(Optimization)230.5 120 Q/F2 13/Times-Roman@0 SF(Gi)
33.336 156 Q -.195(ve)-.325 G 4.165(nap).195 G .915
(articular input program, there are man)-4.165 F 4.165(ys)-.195 G .915
(equences of output tar)-4.165 F .915(get code which)-.234 F .334
(produce the correct result.)33.336 171 R .335
(The goal of the optimizer is to \214nd the "best" one.)6.834 F .335
(What then)6.835 F 2.362(is the de\214nition of "best?")33.336 186 R
2.362(There are man)8.862 F 5.612(yp)-.195 G 2.362(ossible attrib)-5.612
F 5.612(utes. More)-.26 F 2.362(often than not,)5.612 F 1.441(when one \
speaks of optimizing, one is concerned with the run-time speed of the t\
ar)33.336 201 R(get)-.234 E 4.691(code. In)33.336 216 R(tar)4.691 E
1.441(get en)-.234 F 1.441
(vironments where memory is tight, such as embedded de)-.52 F 1.44
(vices, tar)-.325 F(get)-.234 E
(code size or memory usage may be more important than speed.)33.336 231
Q 1.927(When code is generated in a straightforw)33.336 252 R 1.927
(ard, mechanical f)-.13 F 1.928(ashion such as described in)-.13 F 1.74
(unit #5, it is easy to see the correspondence between elements of the \
source code and)33.336 267 R 3.762
(speci\214c lines of IR and ultimately assembly code.)33.336 282 R 3.762
(An aggressi)10.262 F 4.152 -.195(ve o)-.325 H 3.762(ptimizer which).195
F 1.888
(eliminates redundant operations and restructures code and data \215o)
33.336 297 R 3.577 -.845(w, m)-.325 H 1.887(ay obscure that).845 F 7.068
(relationship. This)33.336 312 R 3.818(may impact "deb)7.068 F(ug)-.26 E
3.818(ability" of the tar)-.065 F 3.819(get code, e.g. when single-)
-.234 F 1.273(stepping the code \(at the assembly-language le)33.336 327
R -.195(ve)-.325 G 1.273(l\) with a deb).195 F 1.273(ugger or emulator)
-.26 F 4.523(,i)-.52 G 4.523(tm)-4.523 G(ay)-4.523 E .321
(not be possible to follo)33.336 342 R 3.571(wa)-.325 G .321
(long in the the source program.)-3.571 F .321(As a result, the hea)
6.821 F .321(viest le)-.26 F -.195(ve)-.325 G(ls).195 E 2.105
(of optimization are often mutually e)33.336 357 R(xclusi)-.195 E 2.495
-.195(ve w)-.325 H 2.105(ith source-le).195 F -.195(ve)-.325 G 5.355(ld)
.195 G(eb)-5.355 E 2.105(ugging \(e.g. the)-.26 F/F3 13/Courier@0 SF(-g)
5.354 E F2(option in UNIX C compilers\).)33.336 372 Q F1(Ar)110.848 402
Q(chitectur)-.234 E 3.25(eD)-.234 G
(ependent and Independent Optimizations)-3.25 E F2 5.661(Optimization i\
s the application of a series of transformations to the IR.)33.336 438 R
(Each)12.162 E 1.9(transformation must ha)33.336 453 R 2.289 -.195(ve t)
-.26 H 1.899
(he property that it retains the "correctness" of the program.).195 F
(Speci\214cally:)33.336 468 Q 5.854<8354>33.336 483 S 2.605
(he optimized program must produce identical output for a gi)-5.854 F
-.195(ve)-.325 G 5.855(ni).195 G 2.605(nput as the un-)-5.855 F
(optimized program.)33.336 498 Q 3.556<8354>33.336 513 S .306
(he optimized program must not cause an)-3.556 F 3.556(ye)-.195 G .305
(xceptions \(such as a di)-3.751 F .305(vision by 0\) that the)-.325 F
(unoptimized one w)33.336 528 Q(ould not gi)-.13 E -.195(ve)-.325 G 3.25
(nt).195 G(he same input.)-3.25 E 3.712<8354>33.336 543 S .462(he optim\
izer is not responsible for maintaining the correctness of incorrect co\
de.)-3.712 F(E.g.)6.962 E 2.462(if in the original program a v)33.336
558 R 2.462(ariable is read before it has been assigned a v)-.325 F
2.461(alue, the)-.325 F
(optimized program is not required to reproduce the same g)33.336 573 Q
(arbage answer)-.065 E(.)-.715 E 3.032 -1.04(We c)33.336 603 T .952
(an broadly di)1.04 F .952
(vide optimizations into those which depend on the tar)-.325 F .953
(get architecture,)-.234 F 3.878(and those which are general.)33.336 618
R 3.878(Another w)10.378 F 3.878
(ay of looking at this is that architecture-)-.13 F .257(independent op\
timizations transform IR into IR, while dependent optimizations are rea\
lly)33.336 633 R(part of the tar)33.336 648 Q
(get code generation process, i.e. the "back-end.")-.234 E 7.231(Exampl\
es of architecture-dependent optimizations include selection of the bes\
t)33.336 669 R 1.41(instructions and addressing modes, scheduling of in\
structions to optimize pipelines and)33.336 684 R 2.804(parallel e)
33.336 699 R -.195(xe)-.195 G 2.804(cution units, and re).195 F 2.804
(gister allocation.)-.195 F 2.803(Modern high-performance CPUs are)9.304
F -.195(ve)33.336 714 S 3.846(ry complicated and rely on a good compile\
r to generate good performing code.).195 F 2.701(Usually the compiler c\
an do a better job than a human on these machine-dependent)33.336 729 R
3.527(optimizations. [Some)33.336 744 R .278
(aspects of back-end optimization are discussed in the "tar)3.527 F .278
(get code")-.234 F 0 Cg EP
%%Page: 2 2
%%BeginPageSetup
BP
%%EndPageSetup
/F0 9/Times-Roman@0 SF 140.742(ECE466:Compilers Unit)33.336 60 R(6/pg 2)
2.25 E(\2512019 Jef)144.405 E 2.25(fH)-.225 G(akner)-2.25 E/F1 13
/Times-Roman@0 SF 3.916(unit.] In)33.336 120 R .665
(this unit, we will tak)3.916 F 3.915(ea)-.13 G 3.915(no)-3.915 G -.195
(ve)-4.11 G(rvie).195 E 3.915(wo)-.325 G 3.915(fa)-3.915 G .665
(rchitecture-independent techniques.)-3.915 F -.195(Fo)7.165 G(r).195 E
3.25(am)33.336 135 S(ore substanti)-3.25 E .39 -.195(ve d)-.325 H
(iscussion of optimization, see the te).195 E(xts.)-.195 E/F2 13
/Times-Bold@0 SF(Wher)167.203 165 Q 3.25(ed)-.234 G
(oes inef\214ciency come fr)-3.25 E(om?)-.234 E F1 2.626(If the task of\
 the architecture-independent optimizer is to transform IR into a "more)
33.336 201 R(ef)33.336 216 Q 2.02
(\214cient" IR, we might ask the question of wh)-.325 F 5.27(yt)-.065 G
2.02(he original IR is inef)-5.27 F 2.02(\214cient to be)-.325 F(gin)
-.195 E 4.077(with? Inef)33.336 231 R(\214cienc)-.325 E 4.077(ym)-.195 G
.828(ay arise as a result of the IR generation algorithm.)-4.077 F .828
(It is not al)7.328 F -.13(wa)-.13 G(ys).13 E .657
(possible to see the most ef)33.336 246 R .656
(\214cient IR for a particular language construct in one pass.)-.325 F
.656(It is)7.156 F 1.496(also often easier to mak)33.336 261 R 4.746(et)
-.13 G 1.496(he IR generation straightforw)-4.746 F 1.496(ard, and allo)
-.13 F 4.746(wt)-.325 G 1.496(he optimizer to)-4.746 F(impro)33.336 276
Q .39 -.195(ve t)-.195 H(he code quality).195 E(.)-.845 E(Inef)33.336
297 Q(\214cienc)-.325 E 3.537(ym)-.195 G .287(ay also arise due to the \
programmer \(author of the source code\) being lazy)-3.537 F(,)-.845 E
4.61(ignorant, or stylistic.)33.336 312 R 4.61(One goal of high-le)11.11
F -.195(ve)-.325 G 7.86(ll).195 G 4.611(anguages is to allo)-7.86 F
7.861(wp)-.325 G(rogramming)-7.861 E .707
(constructs and concepts to be e)33.336 327 R .706(xpressed in higher)
-.195 F(-le)-.26 E -.195(ve)-.325 G 3.956(lt).195 G .706
(erms, such as e)-3.956 F .706(xpressions, types)-.195 F 2.041
(and objects.)33.336 342 R 2.041(This can mean writing code which, if t\
ranslated literally is not the most)8.541 F(ef)33.336 357 Q(\214cient w)
-.325 E(ay of writing it, b)-.13 E
(ut which better presents the meaning or underlying algorithm.)-.26 E
2.401(In the 1980s and into the 1990s, C programmers were encouraged to\
 write "ef)33.336 378 R(\214cient)-.325 E 3.81
(code," which often meant e)33.336 393 R 3.81
(xpressing the program using certain constructs that the)-.195 F 3.832
(programmer kne)33.336 408 R 7.082(ww)-.325 G 3.832
(ould result in more ef)-7.212 F 3.831(\214cient assembly)-.325 F 10.331
(.T)-.845 G 3.831(his w)-10.331 F 3.831(as often tar)-.13 F(get-)-.234 E
7.193(speci\214c. F)33.336 423 R 3.943(or e)-.195 F 3.944
(xample, in an inte)-.195 F 3.944(ger computation, instead of writing)
-.195 F/F3 13/Courier@0 SF(i=i*16)7.194 E F1 7.194(,t)C(he)-7.194 E 3.99
(programmer might write)33.336 438 R F3(i<<=4)7.24 E F1 3.99
(In the former case, the compiler w)10.49 F 3.99(ould select a)-.13 F
.613(Multiply opcode, which on older processors w)33.336 453 R .613
(as often signi\214cantly slo)-.13 F .614(wer than the Shift)-.325 F
1.541(and Add opcodes which the compiler w)33.336 468 R 1.54
(ould generate in the latter case.)-.13 F(Ev)8.04 E 1.54(en the v)-.195
F(ery)-.195 E -.195(ex)33.336 483 S .486
(istence of operators such as += and ++ w).195 F .487
(as a mechanism for allo)-.13 F .487(wing the programmer)-.325 F 1.242
(to "coach" the compiler on good instruction selection.)33.336 498 R
1.241(E.g. the += operator says this is)7.741 F .524(really a 2-address\
 operation \(destination is the same as one of the source operands\).)
33.336 513 R(The)7.024 E 3.015(++ operator might ha)33.336 528 R 3.405
-.195(ve t)-.26 H 3.015
(riggered an "Incremement" instruction rather than an "Add).195 F 1.808
(Immediate", or in the case of pointers, a Re)33.336 543 R 1.809
(gister Indirect with auto-post-incremement)-.195 F(addressing mode.)
33.336 558 Q 2.27
(This sort of hand-optimization is no longer considered good practice.)
33.336 579 R 2.27(Although code)8.77 F 3.453
("bloat" has risen considerably)33.336 594 R 6.703(,d)-.845 G 3.453
(isk, cpu and memory performance has outpaced it,)-6.703 F 1.35(meaning\
 a modern compiler can do much more thorough analysis and still gi)
33.336 609 R 1.74 -.195(ve s)-.325 H(horter).195 E 2.863
(compilation times.)33.336 624 R 2.863(The best coding style no)9.363 F
6.114(wi)-.325 G 6.114(st)-6.114 G 6.114(ow)-6.114 G 2.864
(rite the program as clearly as)-6.114 F 1.062
(possible, and let the compiler')33.336 639 R 4.312(so)-.715 G 1.062
(ptimizer see opportunities for machine-le)-4.312 F -.195(ve)-.325 G
4.312(le).195 G -.325<668c>-4.312 G(cienc).325 E -.845(y.)-.195 G 3.256
(The programmer may also write inef)33.336 654 R 3.256
(\214cient code out of laziness \(e.g.)-.325 F(cut-and-paste)9.756 E
1.798(coding\) or ignorance of what is or is not ef)33.336 669 R 5.048
(\214cient. Finally)-.325 F 5.047(,t)-.845 G 1.797(he programmer may ha)
-5.047 F -.195(ve)-.26 G 2.145
(written errant code, which the optimizer disco)33.336 684 R -.195(ve)
-.195 G 2.145(rs as unreachable or inef).195 F 2.145(fectual code.)-.325
F(This last case is often an error)33.336 699 Q 3.25(,a)-.52 G
(nd the compiler w)-3.25 E(ould be kind to issue a w)-.13 E(arning.)-.13
E .083(Another possible source of inef)33.336 720 R(\214cienc)-.325 E
3.332(yi)-.195 G 3.332(ss)-3.332 G .082
(ource code which is not hand-generated, either)-3.332 F 1.046
(because it passed through the standard C preprocessor or w)33.336 735 R
1.046(as generated by another tool)-.13 F 0 Cg EP
%%Page: 3 3
%%BeginPageSetup
BP
%%EndPageSetup
/F0 9/Times-Roman@0 SF 140.742(ECE466:Compilers Unit)33.336 60 R(6/pg 3)
2.25 E(\2512019 Jef)144.405 E 2.25(fH)-.225 G(akner)-2.25 E/F1 13
/Times-Roman@0 SF(\(e.g. le)33.336 120 Q 3.25(xa)-.195 G(nd yacc\).)
-3.25 E 1.19
(Optimization therefore is a series of passes in which analysis \(e.g.)
33.336 141 R 1.189(control \215o)7.689 F 4.439(wo)-.325 G 4.439(rd)
-4.439 G(ata)-4.439 E<8d6f>33.336 156 Q .086
(w\) is done to understand the program, follo)-.325 F .086
(wed by transformation which can be pro)-.325 F -.195(ve)-.195 G(n).195
E 3.099(correct as a result of the analysis, for all possible v)33.336
171 R 3.098(alid run-time inputs.)-.325 F 3.098(There are)9.598 F 4.864
(situations in which the optimizer can not optimize, because the source\
 language)33.336 186 R .654(constructs do not pro)33.336 201 R .654
(vide enough "hints" into the run-time beha)-.195 F .654
(vior of the program.)-.26 F -.195(Fo)7.154 G(r).195 E -.195(ex)33.336
216 S 3.635(ample, after a call to an e).195 F 3.635
(xternal function, the optimizer must discard an)-.195 F 6.885(yp)-.195
G(rior)-6.885 E(kno)33.336 231 Q .831(wledge of the v)-.325 F .831
(alues \(or constrained ranges of v)-.325 F .831(alues\) of global v)
-.325 F .831(ariables, because it)-.325 F(can not pro)33.336 246 Q .39
-.195(ve t)-.195 H(hat the function did not alter them.).195 E .066(The\
 optimizer is also incapable of understanding the algorithms and data s\
tructures which)33.336 267 R .148(the programmer is using.)33.336 282 R
.148(This w)6.648 F .148(ould ele)-.13 F -.325(va)-.325 G .148
(te the optimizer from being an analysis engine).325 F 1.946
(to being an arti\214cially sentient entity)33.336 297 R 8.446(.T)-.845
G 1.946(he optimizer can not \214x bad design, bad data)-8.446 F 1.396(\
structures, or bad algorithms. There is still plenty of room for optimi\
zed coding on the)33.336 312 R(part of the programmer)33.336 327 Q(.)
-.715 E/F2 13/Times-Bold@0 SF(Optimization Phases & Iterati)154.08 357 Q
.26 -.13(ve a)-.13 H(nalysis).13 E F1 1.893
(Optimization is a complicated process.)33.336 393 R(Man)8.393 E 5.143
(yo)-.195 G 5.143(ft)-5.143 G 1.894
(he optimization phases interact with)-5.143 F .046(each other)33.336
408 R 6.546(.R)-.715 G .046
(unning optimization A, then running B, might re)-6.546 F -.195(ve)-.325
G .045(al further possibilities for).195 F 8.43(A. In)33.336 423 R 5.181
(some cases, optimizations con\215ict, and the result of making a parti\
cular)8.43 F 4.27
(transformation will inhibit another optimization from being disco)
33.336 438 R -.195(ve)-.195 G 7.519(red. Belo).195 F 5.959 -.845(w, a)
-.325 H(n).845 E -.195(ove)33.336 453 S(rvie).195 E 4.936(wo)-.325 G
4.936(fs)-4.936 G -2.795 -.325(ev e)-4.936 H 1.686(ral e).325 F 1.686
(xample optimization phases is presented, without re)-.195 F -.065(ga)
-.195 G 1.687(rd to order).065 F(,)-.52 E 4.225(and without detailed e)
33.336 468 R 4.225(xplanations of the algorithms and implementations in)
-.195 F -.26(vo)-.52 G(lv).26 E(ed.)-.195 E
(Further detail can be found in the te)33.336 483 Q(xts.)-.195 E(Man)
33.336 504 Q 5.502(yo)-.195 G 5.502(ft)-5.502 G 2.252
(hese algorithms are iterati)-5.502 F -.195(ve)-.325 G 8.752(.I).195 G
5.502(ng)-8.752 G 2.252(eneral, data \215o)-5.502 F 5.502(wa)-.325 G
2.252(nalysis within a single)-5.502 F .145(basic block is straightforw)
33.336 519 R .145
(ard because there is only one control path, and the problem can)-.13 F
.982(be solv)33.336 534 R .982(ed by linear tra)-.195 F -.195(ve)-.26 G
.982(rsal of the quads, either from \214rst to last or from last to \
\214rst as).195 F(the case may require.)33.336 549 Q(Ho)33.336 570 Q(we)
-.325 E -.195(ve)-.325 G 1.974 -.52(r, m).195 H .934
(ost real programs e).52 F .934(xtend o)-.195 F -.195(ve)-.195 G 4.184
(rm).195 G .934(ultiple basic blocks and contain at least one)-4.184 F
.061(loop in the control \215o)33.336 585 R 3.311(wg)-.325 G 3.311
(raph. In)-3.311 F .062(these cases an iterati)3.311 F .452 -.195(ve s)
-.325 H .062(olution is required, because the).195 F .906
(results from one basic block may af)33.336 600 R .905
(fect the results of another basic block, which af)-.325 F(fects)-.325 E
(another)33.336 615 Q 3.25(,e)-.52 G(tc. etc. which ultimately af)-3.25
E(fects the \214rst block.)-.325 E .171(In an iterati)33.336 636 R .561
-.195(ve s)-.325 H .171(olution, we associate one or more sets of v).195
F .172(alues with each basic block and)-.325 F 1.308
(initialize all of these sets to some initial condition.)33.336 651 R
1.307(Then we e)7.807 F 1.307(xamine each basic block)-.195 F 1.424
(and recompute the per)33.336 666 R 1.424(-block sets for each.)-.26 F
1.424(This process continues until we ha)7.924 F 1.814 -.195(ve m)-.26 H
(ade).195 E 2.476(one complete iteration and there are no changes to an)
33.336 681 R 5.726(yo)-.195 G 5.726(ft)-5.726 G 2.475(he sets.)-5.726 F
4.555 -1.04(We s)8.975 H 2.475(ay that the)1.04 F(iterati)33.336 696 Q
1.443 -.195(ve s)-.325 H 1.053(olution has then con).195 F -.195(ve)-.52
G -.234(rg).195 G 4.303(ed. In).234 F 1.053(order for an iterati)4.303 F
1.443 -.195(ve a)-.325 H 1.053(pproach to be correct, it).195 F .572
(must be sho)33.336 711 R .572(wn to con)-.325 F -.195(ve)-.52 G -.234
(rg).195 G 3.821(ei).234 G 3.821<6e8c>-3.821 G .571
(nite time, and it must al)-3.821 F -.13(wa)-.13 G .571(ys be "conserv)
.13 F(ati)-.325 E -.195(ve)-.325 G .571(", in that if).195 F .082
(there is an)33.336 726 R 3.333(ya)-.195 G .083(mbiguity about the anal\
ysis, it must err on the side of preserving the original)-3.333 F(code.)
33.336 741 Q 0 Cg EP
%%Page: 4 4
%%BeginPageSetup
BP
%%EndPageSetup
/F0 9/Times-Roman@0 SF 140.742(ECE466:Compilers Unit)33.336 60 R(6/pg 4)
2.25 E(\2512019 Jef)144.405 E 2.25(fH)-.225 G(akner)-2.25 E/F1 13
/Times-Roman@0 SF .474(The te)33.336 120 R .474
(xts contain a theoretical presentation on the frame)-.195 F -.13(wo)
-.325 G .474(rk on which an).13 F 3.724(yi)-.195 G(terati)-3.724 E .864
-.195(ve d)-.325 H(ata).195 E<8d6f>33.336 135 Q 3.25(wa)-.325 G
(nalysis may be constructed.)-3.25 E
(What will be described here are informal e)6.5 E(xamples.)-.195 E/F2 13
/Times-Bold@0 SF(Finding useless or unr)167.418 165 Q(eachable code)
-.234 E F1(Gi)33.336 201 Q -.195(ve)-.325 G 4.041(nt).195 G .791
(hat the IR for a gi)-4.041 F -.195(ve)-.325 G 4.041(nf).195 G .792
(unction \(or the entire program\) is modeled with a Control)-4.041 F
(Flo)33.336 216 Q 4.882(wG)-.325 G 1.632(raph \(CFG\) ha)-4.882 F 1.632
(ving an initial node and a \214nal node, there may be nodes which)-.26
F(ha)33.336 231 Q 1.137 -.195(ve n)-.26 H 3.997(oi).195 G .747
(ncoming edges in the CFG.)-3.997 F .748(These nodes can ne)7.247 F
-.195(ve)-.325 G 3.998(rb).195 G 3.998(er)-3.998 G .748
(eached during program)-3.998 F -.195(exe)33.336 246 S 1.578
(cution, and that f).195 F 1.578
(act is apparent from simple analysis, without looking at data \215o)
-.13 F -.845(w.)-.325 G .765
(This situation sometimes happens as an artif)33.336 261 R .765
(act of code generation techniques.)-.13 F .765(It is also)7.265 F .252
(possible that the programmer has made an error)33.336 276 R 10.002(.L)
-.715 G(ater)-10.002 E 3.502(,w)-.52 G(e')-3.502 E .252
(ll see some techniques which)-.13 F 1.329
(combine data and control \215o)33.336 291 R 4.58(wa)-.325 G 1.33
(nalysis to \214nd other blocks which are not as ob)-4.58 F(viously)
-.195 E(unreachable.)33.336 306 Q 1.501
(Useless code is that which produces no useful result.)33.336 327 R 1.5
(Useful results in the C language)8 F 4.897(are: returning from the fun\
ction, calling a function \(other than inline functions\),)33.336 342 R
.592(modifying a global v)33.336 357 R .592(ariable, modifying a v)-.325
F .592(alue through pointer dereferencing \(unless we)-.325 F(kno)33.336
372 Q 3.25(wt)-.325 G
(hat the pointer is not pointing at something "useful"\).)-3.25 E
(In the follo)6.5 E(wing e)-.325 E(xample:)-.195 E/F3 10/Courier@0 SF
(int f\(\))33.336 384 Q({)33.336 396 Q(int a;)39.336 408 Q(g\(1,2\);)
90.936 420 Q(a=1;)90.936 432 Q(return 2;)90.936 444 Q(})33.336 456 Q F1
.045(the call to)33.336 471 R/F4 13/Courier@0 SF(g\(\))3.295 E F1 .045
(is potentially useful \(we don')3.295 F 3.295(tk)-.234 G(no)-3.295 E
3.295(wu)-.325 G .045(nless we can analyze)-3.295 F F4(g\(\))3.295 E F1
.046(too\), as is)3.295 F 3.237(the return statement.)33.336 486 R 3.237
(The assignment to the local v)9.737 F(ariable)-.325 E F4(a)6.487 E F1
3.237(is useless and can be)6.487 F(eliminated.)33.336 501 Q(Lik)33.336
522 Q 3.813(eu)-.13 G .563(nreachable code, useless code may be generat\
ed by accident during IR generation,)-3.813 F 3.048
(or it may be programmer error)33.336 537 R 6.298(,o)-.52 G 6.298(rp)
-6.298 G 3.048(ossibly stylistic \(e.g.)-6.298 F 6.298(ab)9.548 G 3.048
(ody of code which is)-6.298 F(disabled b)33.336 552 Q(ut which serv)
-.26 E(es a deb)-.195 E(ugging role\).)-.26 E 3.029 -1.04(To \214)33.336
573 T .95(nd useless code, we can use an iterati)1.04 F 1.34 -.195(ve a)
-.325 H 4.2(lgorithm. First,).195 F .95(we visit all IR operations)4.2 F
.035(and mark those which are ob)33.336 588 R .035(viously useful \(the)
-.195 F 3.285(ym)-.195 G .034(eet one of the 4 criteria abo)-3.285 F
-.195(ve)-.195 G 3.284(\). Recall).195 F .54
(that each IR operation is in the form \(src1 OP src2 -> dst\).)33.336
603 R .541(If the operation is useful, we)7.04 F 1.137
(trace back src1 and src2 to the operation\(s\) in which the)33.336 618
R 4.387(yr)-.195 G(ecei)-4.387 E 1.527 -.195(ve t)-.325 H 1.137(heir v)
.195 F 1.137(alue, and mark)-.325 F 1.087(that operation as useful.)
33.336 633 R 3.167 -1.04(We c)7.587 H 1.087
(ontinue this until we are no longer disco)1.04 F -.195(ve)-.195 G 1.087
(ring additional).195 F(useful IR quads.)33.336 648 Q 1.03(Then for eac\
h basic block which contains at least one useful quad, we w)33.336 669 R
1.03(alk back in the)-.13 F 2.029(CFG and visit all)33.336 684 R F2
2.029(decision points)5.279 F F1 2.029
(which determine whether that useful basic block is)5.279 F -.195(exe)
33.336 699 S 3.926(cuted. A).195 F .676
(basic block D is a decision point for basic block B if there are tw)
3.926 F 3.926(oo)-.13 G 3.926(rm)-3.926 G(ore)-3.926 E .549(paths lea)
33.336 714 R .549
(ving D, one of which leads to B, and the other does not.)-.26 F .549
(All decision points for)7.049 F .768(useful basic blocks are mark)
33.336 729 R .768
(ed as useful operations \(i.e. we mark the conditional branch)-.13 F(a\
s useful, then trace back the operands leading to that decision and mar\
k them as well\).)33.336 744 Q 0 Cg EP
%%Page: 5 5
%%BeginPageSetup
BP
%%EndPageSetup
/F0 9/Times-Roman@0 SF 140.742(ECE466:Compilers Unit)33.336 60 R(6/pg 5)
2.25 E(\2512019 Jef)144.405 E 2.25(fH)-.225 G(akner)-2.25 E/F1 13
/Times-Roman@0 SF 1.743(When all of this is done, we ha)33.336 120 R
2.133 -.195(ve m)-.26 H(ark).195 E 1.743
(ed useful vs useless quads and branches.)-.13 F(An)8.243 E(y)-.195 E
.91(useless branches can be replaced with unconditional jumps directly \
to the nearest useful)33.336 135 R .028(basic block in the CFG.)33.336
150 R .029
(Then all useless quads can be deleted from their containing basic)6.528
F 4.223(blocks. As)33.336 165 R 4.223(ar)4.223 G .973(esult of this, ad\
ditional optimizations, such as \214nding and deleting empty)-4.223 F
(basic blocks, or mer)33.336 180 Q(ging basic blocks, may result.)-.234
E 3.25(As)33.336 201 S(econd e)-3.25 E(xample:)-.195 E/F2 10/Courier@0
SF(void f\(a,b\))33.336 213 Q(int a,b;)33.336 225 Q({)33.336 237 Q
(extern int e;)39.336 249 Q(int l;)39.336 261 Q(e++;)90.936 273 Q
(if \(a<b\))90.936 285 Q(l++;)148.536 297 Q(e++;)90.936 309 Q(})33.336
321 Q(Resulting IR:)33.336 345 Q(BB0:)33.336 357 Q 39.6(e= ADD)90.936
369 R 91.2(e,1 *useful)39.6 F 33.6(CMP a,b)90.936 381 R 27.6
(BRGE BB2,BB1)90.936 393 R(BB1:)33.336 405 Q 39.6(l= ADD)90.936 417 R
(l,1)39.6 E 39.6(BR BB2)90.936 429 R(BB2:)33.336 441 Q 39.6(e= ADD)
90.936 453 R 91.2(e,1 *useful)39.6 F F1 .982
(The \214rst and last ADD are mark)33.336 474 R .982(ed as useful.)-.13
F .983(The BRGE is not a useful decision point,)7.482 F 2.931
(because it does not af)33.336 489 R 2.931
(fect whether useful operations tak)-.325 F 6.181(ep)-.13 G 2.931
(lace \(BB1 is not useful\).)-6.181 F .573(Therefore, it can be replace\
d by an unconditional branch, and the CMP instruction is not)33.336 504
R 3.25(useful. The)33.336 519 R(transformed code is:)3.25 E F2(BB0:)
33.336 531 Q 39.6(e= ADD)90.936 543 R(e,1)39.6 E 39.6(BR BB2)90.936 555
R(BB2:)33.336 567 Q 39.6(e= ADD)90.936 579 R(e,1)39.6 E F1 1.66
(Subsequent optimizations will mer)33.336 600 R 1.66
(ge BB0 with BB2 \(if there are no other branches to)-.234 F
(BB2\) and may e)33.336 615 Q -.195(ve)-.325 G 3.25(nb).195 G 3.25(ea)
-3.25 G(ble to replace the tw)-3.25 E 3.25(oA)-.13 G
(DD instructions with one.)-3.25 E/F3 13/Times-Bold@0 SF(Useless contr)
108.235 645 Q(ol \215o)-.234 E 1.43 -.715(w, B)-.13 H(ranch F).715 E
(olding, Empty Basic Blocks)-.325 E F1 2.647 -1.04(We h)33.336 681 T
-2.925 -.26(av e)1.04 H .567(already discussed unreachable basic blocks\
, i.e. a basic block with no incoming)4.077 F 3.309(edges. This)33.336
696 R .059(entire block can be deleted, along with an)3.309 F 3.309(ye)
-.195 G .059(dges lea)-3.309 F .059(ving that block.)-.26 F .058
(This, in)6.559 F 2.013(turn, may e)33.336 711 R 2.014
(xpose additional blocks as being unreachable.)-.195 F 2.014
(Pruning unreachable blocks)8.514 F(reduces code size b)33.336 726 Q
(ut does little to impro)-.26 E .39 -.195(ve exe)-.195 H(cution speed.)
.195 E 0 Cg EP
%%Page: 6 6
%%BeginPageSetup
BP
%%EndPageSetup
/F0 9/Times-Roman@0 SF 140.742(ECE466:Compilers Unit)33.336 60 R(6/pg 6)
2.25 E(\2512019 Jef)144.405 E 2.25(fH)-.225 G(akner)-2.25 E/F1 13
/Times-Roman@0 SF 1.934(Branch folding \214x)33.336 120 R 1.934
(es a situation which may arise during optimization.)-.195 F 1.934
(Let us say that)8.434 F 4.056(BB4 has tw)33.336 135 R 7.306(oc)-.13 G
4.056(onditional e)-7.306 F 4.056
(xits, both of which are directly to BB5, because other)-.195 F .112
(optimization passes ha)33.336 150 R .502 -.195(ve r)-.26 H(emo).195 E
-.195(ve)-.195 G 3.362(do).195 G 3.362(rc)-3.362 G .112(oalesced interv)
-3.362 F .112(ening basic blocks.)-.195 F .111(The conditional)6.611 F
.178(branch \(and the compare or whate)33.336 165 R -.195(ve)-.325 G
3.428(rs).195 G .178(ets the condition code\) can clearly be remo)-3.428
F -.195(ve)-.195 G 3.429(da).195 G(nd)-3.429 E .468
(replaced with an unconditional branch.)33.336 180 R .468
(This may then pa)6.968 F .858 -.195(ve t)-.26 H .468(he w).195 F .468
(ay for combining basic)-.13 F 5.18(blocks. If)33.336 195 R 1.93(there \
is a single edge connecting BB4 with BB5, and no other edges enter)5.18
F(BB5, then BB4 and BB5 can be mer)33.336 210 Q
(ged into a single basic block.)-.234 E .037
(Empty basic blocks frequently arise during optimization.)33.336 246 R
.036(An empty block which contains)6.537 F 1.801
(only an unconditional branch can be remo)33.336 261 R -.195(ve)-.195 G
5.051(d. An).195 F 5.051(ye)-.195 G 1.801
(dges which were pointing to the)-5.051 F .864
(empty block are then retar)33.336 276 R .864
(geted at the successor to the empty block.)-.234 F .864
(If the empty block)7.364 F 2.132(has multiple e)33.336 291 R 2.133(xit\
s \(i.e. a conditional branch\), this is probably a bad sign, because t\
he)-.195 F(determinant for the conditional w)33.336 306 Q
(ould appear to ha)-.13 E .39 -.195(ve v)-.26 H(anished!)-.13 E/F2 13
/Times-Bold@0 SF(Code Motion)231.046 336 Q F1 1.574
(Optimizing transformations in which code is relocated \(b)33.336 372 R
1.574(ut otherwise not changed\) are)-.26 F(kno)33.336 387 Q
(wn as code motion.)-.325 E 3.25(As)6.5 G(imple e)-3.25 E(xample is f)
-.195 E(actoring a loop in)-.13 E -.325(va)-.52 G(riant:).325 E/F3 10
/Courier@0 SF(do)33.336 399 Q({)33.336 411 Q(a=b*c;)90.936 423 Q
(z+=a/f\(z\);)90.936 435 Q 6(}w)33.336 447 S(hile \(z<q\))-6 E F1 .217
(Assume that b and c are local v)33.336 462 R .217
(ariables and thus can not be accessed by function f\(\).)-.325 F(The)
6.718 E 2.371(calculation of)33.336 477 R/F4 13/Courier@0 SF(b*c)5.621 E
F1 2.371(can be sho)5.621 F 2.371(wn to in)-.325 F -.26(vo)-.52 G(lv).26
E 5.621(ev)-.195 G 2.37(alues which can not change during the)-5.946 F
.124(course of the loop.)33.336 492 R .124(The resulting v)6.624 F .125
(alue in)-.325 F F4(a)3.375 E F1 .125(does not depend on ho)3.375 F
3.375(wm)-.325 G(an)-3.375 E 3.375(yt)-.195 G .125(imes the loop)-3.375
F -.195(exe)33.336 507 S 3.283(cutes. Therefore,).195 F .033
(that entire e)3.283 F .033(xpression is in)-.195 F -.325(va)-.52 G .032
(riant with respect to the loop and can be).325 F(mo)33.336 522 Q -.195
(ve)-.195 G 3.25(do).195 G(utside of it.)-3.25 E F2(Reduction in Str)
206.06 567 Q(ength)-.234 E F1 1.544
(The Operator Strength Reduction optimization looks for "e)33.336 603 R
(xpensi)-.195 E -.195(ve)-.325 G 4.795("o).195 G 1.545
(perators inside a)-4.795 F .831(loop in which one operand is a)33.336
618 R/F5 13/Times-Italic@0 SF -.481(re)4.08 G .83(gion constant)-.039 F
F1 4.08(,i)C .83(.e. its v)-4.08 F .83(alue does not change within the)
-.325 F .974(loop, and the other is an)33.336 633 R F5 .974
(induction variable)4.224 F F1 .974(whose v)4.224 F .974
(alue changes consistently with each)-.325 F 7.323(iteration. This)
33.336 648 R -.195(ex)7.323 G(pensi).195 E 4.463 -.195(ve o)-.325 H
4.073(peration can be replaced with a weak).195 F(er)-.13 E 7.322(,l)
-.52 G 4.072(ess e)-7.322 F(xpensi)-.195 E -.195(ve)-.325 G 1.506
(operation which yields the same result by creating a dif)33.336 663 R
1.506(ferent induction v)-.325 F 1.506(ariable which)-.325 F("f)33.336
678 Q(actors out" the e)-.13 E(xpensi)-.195 E .39 -.195(ve o)-.325 H
(peration.).195 E(The classic e)33.336 699 Q
(xample is accessing an array within a loop:)-.195 E F3(int a[1024];)
33.336 711 Q(for\(i=0;i<1024;i++\))33.336 723 Q({)33.336 735 Q 0 Cg EP
%%Page: 7 7
%%BeginPageSetup
BP
%%EndPageSetup
/F0 9/Times-Roman@0 SF 140.742(ECE466:Compilers Unit)33.336 60 R(6/pg 7)
2.25 E(\2512019 Jef)144.405 E 2.25(fH)-.225 G(akner)-2.25 E/F1 10
/Courier@0 SF(sum+=a[i];)90.936 117 Q(})33.336 129 Q/F2 13/Times-Roman@0
SF .384(Recall that)33.336 150 R/F3 13/Courier@0 SF(a[i])3.634 E F2 .384
(is equi)3.634 F -.325(va)-.325 G .384(lent to).325 F F3(*\(a+i\))3.634
E F2 3.634(,a)C .384(nd that the addition of the pointer \(the array)
-3.634 F 2.811(name\) to the inte)33.336 165 R 2.812
(ger contains an inherent multiply)-.195 F 9.312(.I)-.845 G 2.812
(.e. within the loop we will see)-9.312 F(something lik)33.336 180 Q(e:)
-.13 E F1 39.6(i= MOV)90.936 192 R(0)39.6 E(BB100:)33.336 204 Q 21.6
(T100= LEA)90.936 216 R(a)39.6 E 21.6(T101= MUL)90.936 228 R(i,4)39.6 E
21.6(T102= ADD)90.936 240 R(T100,T101)39.6 E 21.6(T103= LOAD)90.936 252
R(\(T102\))33.6 E 27.6(sum= ADD)90.936 264 R(sum,T103)39.6 E(BB101:)
33.336 276 Q 39.6(i= ADD)90.936 288 R(i,1)39.6 E 33.6(CMP i,1024)148.536
300 R 27.6(BRLT BB100,BB102)148.536 312 R(BB102:)33.336 324 Q F2(No)
33.336 345 Q 3.393(wi)-.325 G 3.393(ft)-3.393 G .143(he LEA is mo)-3.393
F -.195(ve)-.195 G 3.392(do).195 G .142
(utside of the loop, so T100 is initialized to the base address of)
-3.392 F(the array)33.336 360 Q 3.25(,w)-.845 G 3.25(ec)-3.25 G
(ould mak)-3.25 E 3.25(ei)-.13 G 3.25(tt)-3.25 G(he induction v)-3.25 E
(ariable:)-.325 E F1 39.6(i= MOV)90.936 372 R(0)39.6 E 21.6(T100= LEA)
90.936 384 R(a)39.6 E(BB100:)33.336 396 Q 21.6(T103= LOAD)90.936 408 R
(\(T100\))33.6 E 27.6(sum= ADD)90.936 420 R(sum,T103)39.6 E(BB101:)
33.336 432 Q 39.6(i= ADD)90.936 444 R(i,1)39.6 E 21.6(T100= ADD)90.936
456 R(T100,4)39.6 E 33.6(CMP i,1024)148.536 468 R 27.6(BRLT BB100,BB102)
148.536 480 R F2 3.301(This is an impro)33.336 501 R -.195(ve)-.195 G
3.301(ment if, on the architecture in question, inte).195 F 3.301
(ger multiplication is)-.195 F("harder" than inte)33.336 516 Q
(ger addition.)-.195 E .324
(As a further optimization, called Linear Function T)33.336 537 R .324
(est Replacement, we could change the)-.91 F(control v)33.336 552 Q
(ariable of the loop to mak)-.325 E 3.25(ei)-.13 G 3.25(tt)-3.25 G
(he induction v)-3.25 E(ariable directly:)-.325 E F1 27.6(T98= LEA)
90.936 564 R(a)39.6 E 27.6(T99= ADD)90.936 576 R(T99, 4096)39.6 E
(BB100:)33.336 588 Q 21.6(T103= LOAD)90.936 600 R(\(T100\))33.6 E 27.6
(sum= ADD)90.936 612 R(sum,T103)39.6 E(BB101:)33.336 624 Q 21.6
(T100= ADD)90.936 636 R(T100,4)39.6 E 33.6(CMP T100,T99)148.536 648 R
27.6(BRLT BB100,BB102)148.536 660 R(BB102:)33.336 672 Q 39.6(i= MOV)
90.936 684 R 27.6(1024 #Not)39.6 F(needed if i is not live)6 E/F4 13
/Times-Bold@0 SF(Loop unr)178.409 729 Q(olling and unswitching)-.234 E 0
Cg EP
%%Page: 8 8
%%BeginPageSetup
BP
%%EndPageSetup
/F0 9/Times-Roman@0 SF 140.742(ECE466:Compilers Unit)33.336 60 R(6/pg 8)
2.25 E(\2512019 Jef)144.405 E 2.25(fH)-.225 G(akner)-2.25 E/F1 13
/Times-Roman@0 SF(Loop unrolling trades code space for e)33.336 120 Q
-.195(xe)-.195 G(cution speed:).195 E/F2 10/Courier@0 SF
(for\(i=0;i<n;i++\))33.336 132 Q(a[i]=b[i]+c[i];)90.936 144 Q(unrolled:)
33.336 168 Q(for\(i=0;i<n;i+=4\))33.336 180 Q({)33.336 192 Q
(a[i]=b[i]+c[i];)90.936 204 Q(a[i+1]=b[i+1]+c[i+1];)90.936 216 Q
(a[i+2]=b[i+2]+c[i+2];)90.936 228 Q(a[i+3]=b[i+3]+c[i+3];)90.936 240 Q
(})33.336 252 Q F1 .825(\(this e)33.336 267 R .826(xample is some)-.195
F .826(what o)-.325 F -.195(ve)-.195 G -.26(r-).195 G .826
(simpli\214ed in that is assumes n is a multiple of 4\).).26 F(Each)
7.326 E .304(iteration of the loop in)33.336 282 R -.26(vo)-.52 G(lv).26
E .304(es some o)-.195 F -.195(ve)-.195 G .304
(rhead of the comparison and branch.).195 F .304(By unrolling)6.804 F
1.727(the loop, we get more computation for each iteration.)33.336 297 R
1.727(If through constant propag)8.227 F(ation)-.065 E .433
(analysis \(to be co)33.336 312 R -.195(ve)-.195 G .432
(red shortly\) we can learn that n has a kno).195 F .432(wn, constant v)
-.325 F .432(alue, then the)-.325 F 3.979(entire for loop can be remo)
33.336 327 R -.195(ve)-.195 G 7.229(da).195 G 3.979
(nd replaced with the kno)-7.229 F 3.979(wn number of unrolled)-.325 F
(iterations.)33.336 342 Q 2.514(Loop unswitching f)33.336 363 R 2.514
(actors a conditional out of the loop, when the determinant of the)-.13
F(conditional is in)33.336 378 Q -.325(va)-.52 G
(riant with respect to the loop:).325 E F2(for\(i=0;i<n;i++\))33.336 390
Q({)33.336 402 Q(if \(x>y\))90.936 414 Q(a[i]=b[i]+c[i];)148.536 426 Q
(else)90.936 438 Q(a[i]=b[i]*c[i];)148.536 450 Q(})33.336 462 Q
(transformed:)33.336 486 Q(if \(x>y\))33.336 510 Q(for\(i=0;i<n;i++\))
90.936 522 Q(a[i]=b[i]+c[i];)148.536 534 Q(else)33.336 546 Q
(for\(i=0;i<n;i++\))90.936 558 Q(a[i]=b[i]*c[i];)148.536 570 Q F1(Ag)
33.336 591 Q 4.729(ain, the same number of iterations are performed, b)
-.065 F 4.729(ut we eliminate a useless)-.26 F 1.889
(comparison and branch inside the loop, where there are man)33.336 606 R
5.139(yp)-.195 G 1.889(otential iterations, and)-5.139 F(mo)33.336 621 Q
.39 -.195(ve i)-.195 H 3.25(tt).195 G 3.25(oal)-3.25 G
(ess costly place outside the loop.)-3.25 E/F3 13/Times-Bold@0 SF
(Data Flo)213.594 666 Q 3.25(wA)-.13 G(nalysis)-3.25 E F1 -1.04(We)
33.336 702 S -.13('l)1.04 G 3.861(ln).13 G 1.261 -.325(ow l)-3.861 H
.611(ook at se).325 F -.195(ve)-.325 G .611
(ral algorithms which analyze the \215o).195 F 3.861(wo)-.325 G 3.861
(fd)-3.861 G .611(ata within the program.)-3.861 F(Kno)33.336 717 Q .035
(wledge g)-.325 F .035(ained about data \215o)-.065 F 3.285(wc)-.325 G
.034(an guide further optimizations, e.g. the elimination of)-3.285 F
1.892(computations where the result will not be used \("li)33.336 732 R
2.282 -.195(ve v)-.325 H 1.892(ariables"\) or the elimination of)-.13 F
0 Cg EP
%%Page: 9 9
%%BeginPageSetup
BP
%%EndPageSetup
/F0 9/Times-Roman@0 SF 140.742(ECE466:Compilers Unit)33.336 60 R(6/pg 9)
2.25 E(\2512019 Jef)144.405 E 2.25(fH)-.225 G(akner)-2.25 E/F1 13
/Times-Roman@0 SF(duplicate computations \("a)33.336 120 Q -.325(va)-.26
G(ilable e).325 E(xpressions"\).)-.195 E/F2 13/Times-Bold@0 SF(Li)
227.439 150 Q .26 -.13(ve V)-.13 H(ariables)-1.066 E F1 .517
(The concept of whether a v)33.336 180 R .517(ariable is "li)-.325 F
-.195(ve)-.325 G 3.767("o).195 G 3.767(rn)-3.767 G .517
(ot at a particular point in the code is v)-3.767 F(ery)-.195 E 1.567(c\
ritical both for architecture-neutral IR optimization \(this unit\) and\
 for optimal re)33.336 195 R(gister)-.195 E .994
(allocation \(subsequent unit\).)33.336 210 R .993
(De\214nition: A name is)7.494 F F2(li)4.243 E -.13(ve)-.13 G F1 .993
(at a gi)4.373 F -.195(ve)-.325 G 4.243(np).195 G .993
(oint in a program if)-4.243 F 1.971(there is a subsequent)33.336 225 R
/F3 13/Times-Italic@0 SF -.481(re)5.221 G(ac).481 E(hable)-.195 E F1
1.972(point in the control \215o)5.221 F 5.222(wg)-.325 G 1.972
(raph in which that name is)-5.222 F(used, and there is no interv)33.336
240 Q(ening place where that name)-.195 E F3(could be)3.25 E F1
(rede\214ned.)3.25 E(Li)33.336 270 Q .44 -.195(ve v)-.325 H .05
(ariable analysis is an iterati)-.13 F .44 -.195(ve a)-.325 H .05
(lgorithm that w).195 F .05(orks "backw)-.13 F .05(ards" : gi)-.13 F
-.195(ve)-.325 G 3.3(nap).195 G(articular)-3.3 E .876(point where a v)
33.336 285 R .876(ariable is used, we w)-.325 F .876
(ork back through preceeding operations looking for)-.13 F 5.472
(places where that v)33.336 300 R 5.472(ariable is set.)-.325 F 5.472
(The result is a set of sets, LIVEIN[B] and)11.972 F 4.564
(LIVEOUT[B]. A)33.336 315 R -.325(va)4.564 G 1.314
(riable in LIVEIN[B] is referenced in B before it is o).325 F -.195(ve)
-.195 G 4.564(rwritten. A).195 F -.325(va)33.336 330 S(riable in LIVEOU\
T[B] is in the LIVEIN set of at least one successor block to B.).325 E
/F4 10/Courier@0 SF(for each basic block B)90.936 357 Q
(pre-compute the sets DEF[B] and REF[B])148.536 369 Q
(DEF: variables that are assigned to in B)166.536 381 Q
(REF: variables that are used as src1 or src2, prior)166.536 393 Q
(to being assigned to)206.136 405 Q(initialize LIVEIN[B]=emptyset)
148.536 417 Q(do {)90.936 441 Q(for each basic block B)148.536 453 Q
(Compute LIVEOUT[B] the union of)206.136 465 Q
(all LIVEIN[i], where i iterates)263.736 477 Q
(over all the immediate successors to)263.736 489 Q 6(Bi)263.736 501 S 6
(nt)-6 G(he CFG)-6 E(LIVEIN[B]=REF[B] UNION \(LIVEOUT[B] - DEF[B]\))
206.136 513 Q(})90.936 525 Q
(while \(LIVEIN or LIVEOUT changed during last iteration\))90.936 537 Q
F1 1.118(The initial conditions of this analysis are that the LIVE sets\
 are empty)33.336 558 R 4.368(,i)-.845 G 1.118(.e. there are no)-4.368 F
-.325(va)33.336 573 S .901(riables kno).325 F .901(wn to be li)-.325 F
-.195(ve)-.325 G 7.401(.T).195 G .901
(he LIVEOUT sets are immediately computed as the union)-7.401 F .763
(of LIVEIN sets of successor blocks.)33.336 588 R .762
(Since all LIVEIN sets are initialized to empty)7.262 F 4.012(,t)-.845 G
(hat)-4.012 E 2.115(will also be the initial v)33.336 603 R 2.115
(alue of LIVEOUT)-.325 F 8.615(.S)-.962 G 2.115
(ince the EXIT node of the CFG has no)-8.615 F 1.4
(successors, its LIVEOUT set will ne)33.336 618 R -.195(ve)-.325 G 4.649
(rc).195 G 1.399(hange, which upholds the boundary condition)-4.649 F
(that no v)33.336 633 Q(ariables are li)-.325 E .39 -.195(ve a)-.325 H
3.25(tt).195 G(he e)-3.25 E(xit of the function.)-.195 E .478
(DEF is the set, for each basic block, of v)33.336 654 R .478
(ariables which are de\214ned \(assigned to\) at some)-.325 F .491
(point in the block.)33.336 669 R .491(REF is the set of v)6.991 F .491
(ariables which are used as a source operand,)-.325 F F2(prior)3.74 E F1
.035(to an)33.336 684 R 3.285(ya)-.195 G .035(ssignment to that v)-3.285
F 3.286(ariable. REF)-.325 F .036
(and DEF can be computed by a single linear pass)3.286 F -.195(ove)
33.336 699 S 4.14(rt).195 G .89(he quads in the block.)-4.14 F(The)7.39
E 4.14(yo)-.195 G .89(nly need to be computed once, because the)-4.14 F
4.139(ya)-.195 G .889(re not)-4.139 F(af)33.336 714 Q
(fected by conditions outside of the block.)-.325 E(An)33.336 735 Q 3.42
(yv)-.195 G .17(ariable which is li)-3.745 F .56 -.195(ve o)-.325 H 3.42
(ne).195 G .171(xit from the block \(in the LIVEOUT[B] set\) is also li)
-3.615 F .561 -.195(ve o)-.325 H(n).195 E 0 Cg EP
%%Page: 10 10
%%BeginPageSetup
BP
%%EndPageSetup
/F0 9/Times-Roman@0 SF 138.492(ECE466:Compilers Unit)33.336 60 R
(6/pg 10)2.25 E(\2512019 Jef)142.155 E 2.25(fH)-.225 G(akner)-2.25 E/F1
13/Times-Roman@0 SF 1.947(entry \(LIVEIN[B]\), e)33.336 120 R 1.947
(xcept that v)-.195 F 1.947(ariables in the DEF[B] set "kill" the li)
-.325 F -.195(ve)-.325 G 1.946(ness coming).195 F .702
(from the end of the block.)33.336 135 R(An)7.202 E 3.952(yv)-.195 G
.702(ariable in the REF[B] set must also be li)-4.277 F 1.092 -.195
(ve a)-.325 H 3.952(tt).195 G .702(he input)-3.952 F 1.528
(to the block.)33.336 150 R 1.527
(Therefore, the iteration correctly computes LIVEIN for each block gi)
8.028 F -.195(ve)-.325 G(n).195 E(what we currently kno)33.336 165 Q
3.25(wa)-.325 G(bout LIVEOUT for that block.)-3.25 E .105(Iteration is \
required because there could be loops in the CFG, thus the a gi)33.336
186 R -.195(ve)-.325 G 3.355(nb).195 G .105(asic block)-3.355 F .907
(could be both a predecessor and a successor to another gi)33.336 201 R
-.195(ve)-.325 G 4.156(nB).195 G .906(B, thus creating loops in)-4.156 F
2.396(the data \215o)33.336 216 R 5.646(wa)-.325 G 5.646(sw)-5.646 G
5.646(ell. W)-5.646 F 5.647(ec)-1.04 G 2.397(an sho)-5.647 F 5.647(wt)
-.325 G 2.397(hat this iteration must e)-5.647 F -.195(ve)-.325 G 2.397
(ntually con).195 F -.195(ve)-.52 G -.234(rg).195 G 5.647(e. At).234 F
4.22(initialization, all LIVEIN and LIVEOUT sets were empty)33.336 231 R
10.72(.A)-.845 G 7.47(te)-10.72 G 4.22(ach iteration,)-7.47 F(the)10.72
E .167(LIVEIN and LIVEOUT sets can only gro)33.336 246 R 1.857 -.845
(w, b)-.325 H .167(ecause the only operation applied to them is).845 F
1.209(set union.)33.336 261 R 1.209
(Since there is a \214nite number of v)7.709 F 1.209
(ariables, there is a limit to the set gro)-.325 F(wth.)-.325 E 1.255(T\
herefore there must be a \214nite number of iterations after which the \
sets will not gro)33.336 276 R(w)-.325 E(further)33.336 291 Q(.)-.715 E
(Gi)33.336 321 Q -.195(ve)-.325 G(n).195 E/F2 13/Times-Italic@0 SF
(LIVEOUT[B])3.302 E F1 3.302(,w)C 3.302(ec)-3.302 G .052(an w)-3.302 F
.052(ork backw)-.13 F .052(ards in the basic block, b)-.13 F .052
(uilding a set)-.26 F F2(LIVENO)3.302 E(W)-.65 E F1 .467(for each opera\
tion \(quad\) in the block, which contains the list of names which are \
li)33.336 336 R .858 -.195(ve a)-.325 H(s).195 E
(of the completion of that operation.)33.336 351 Q 2.08 -1.04(We c)6.5 H
(an compute this set as follo)1.04 E(ws:)-.325 E/F3 10/Courier@0 SF
(LIVENOW[N]=LIVEOUT)90.936 363 Q 52.8(for\(i=N-1;i>=1;i--\) //quads)
90.936 375 R(numbered 1...N)6 E({)90.936 387 Q(LIVENOW[i]=LIVENOW[i+1];)
148.536 399 Q(remove from LIVENOW[i] the dest operand of quad i+1)
148.536 411 Q(foreach \(source operand of quad i+1\))148.536 423 Q
(add this variable to LIVENOW[i])206.136 435 Q(})90.936 447 Q F1 3.514
(The order of remo)33.336 462 R 3.513
(ving the destination before adding the source is important when)-.195 F
(considering an operation which uses a name as both a source and a dest\
ination.)33.336 477 Q 3.432(Ag)33.336 498 S -2.795 -.325(iv e)-3.432 H
3.432(nn).325 G .182(ame may be li)-3.432 F .572 -.195(ve i)-.325 H
3.432(nc).195 G .182
(ertain places in the code, and dead in other places.)-3.432 F 2.262
-1.04(We c)6.682 H(all)1.04 E .198(this a)33.336 513 R/F4 13
/Times-Bold@0 SF(li)3.448 E .458 -.13(ve r)-.13 H(ange).13 E F1 6.698
(.H)C .197(ere is an e)-6.698 F .197(xample \214nding the li)-.195 F
.587 -.195(ve r)-.325 H .197(ange of v).195 F .197
(ariable c, after global li)-.325 F -.195(ve)-.325 G -.325(va)33.336 528
S(riable analysis tells us that c is not in LIVEOUT of this BB:).325 E
F3 51.6(1c)33.336 540 S 45.6(=A)-51.6 G 33.6(DD a,b)-45.6 F 51.6(2e)
33.336 552 S 45.6(=A)-51.6 G 33.6(DD c,d)-45.6 F 51.6(3c)33.336 564 S
45.6(=A)-51.6 G 33.6(DD x,y)-45.6 F 51.6(4i)33.336 576 S 45.6(=A)-51.6 G
33.6(DD g,h)-45.6 F 51.6(5l)33.336 588 S 45.6(=A)-51.6 G 33.6(DD j,k)
-45.6 F 51.6(6c)33.336 600 S 45.6(=A)-51.6 G 33.6(DD p,q)-45.6 F 51.6
(7w)33.336 612 S 45.6(=A)-51.6 G 33.6(DD c,u)-45.6 F
([Assume LIVEOUT from this BB does not include c])90.936 624 Q F1 2.756
-1.04(We k)33.336 639 T(no)1.04 E 3.926(wf)-.325 G .676
(rom LIVEOUT that v)-3.926 F .677(ariable c is not li)-.325 F 1.067
-.195(ve a)-.325 H 3.927(tt).195 G .677(he end of instruction 7.)-3.927
F .677(It is li)7.177 F -.195(ve)-.325 G .069
(at 6 and at 1, creating tw)33.336 654 R 3.319(ol)-.13 G -2.795 -.325
(iv e)-3.319 H .069(ranges in the basic block for c: 1..1 and 6..6.)
3.644 F .068(Since c is not)6.568 F .346
(used as a source operand in instructions 4, 5 or 6 before being o)
33.336 669 R -.195(ve)-.195 G .347(rwritten at 6, operation).195 F(#3 w)
33.336 684 Q(as useless.)-.13 E(Normally)6.5 E 3.25(,t)-.845 G
(he optimizer will ha)-3.25 E .39 -.195(ve r)-.26 H(emo).195 E -.195(ve)
-.195 G 3.25(dt).195 G(his useless operation.)-3.25 E F4 -.78 -1.3(Av a)
206.951 714 T(ilable Expr)1.3 E(essions)-.234 E 0 Cg EP
%%Page: 11 11
%%BeginPageSetup
BP
%%EndPageSetup
/F0 9/Times-Roman@0 SF 138.492(ECE466:Compilers Unit)33.336 60 R
(6/pg 11)2.25 E(\2512019 Jef)142.155 E 2.25(fH)-.225 G(akner)-2.25 E/F1
13/Times-Roman@0 SF .116(The A)33.336 120 R -.325(va)-.962 G .116(ilabl\
e Expressions analysis can inform us where we are needlessly recomputin\
g a).325 F -.325(va)33.336 135 S 2.456(lue which is already kno).325 F
5.706(wn. First,)-.325 F 2.456(we need to de\214ne)5.706 F/F2 13
/Times-Bold@0 SF -1.235 -1.885(AV A)5.706 H(IL)1.885 E F1 2.456(able e)B
5.706(xpressions. An)-.195 F -.195(ex)33.336 150 S 1.329
(pression, for these purposes, is a srcA op srcB 3-tuple.).195 F 3.408
-1.04(We s)7.828 H 1.328(ay that an e)1.04 F 1.328(xpression is)-.195 F
-1.755(AVA)33.336 165 S .554(IL on entry to a particular basic block if\
 the result has already been computed along)1.755 F 2.49(all possible p\
aths leading to this block from the entry node, and there ha)33.336 180
R 2.88 -.195(ve b)-.26 H 2.489(een no).195 F
(subsequent assignments to srcA or srcB after the computation.)33.336
195 Q/F3 10/Courier@0 SF(for each basic block B)90.936 207 Q
(pre-compute GEN[B], the set of expressions computed in B)148.536 219 Q
(and not subsequently killed)206.136 231 Q
(compute KILL[B], the set of expressions killed in B)148.536 243 Q
(initialize AVAILOUT[B]=all possible expressions)148.536 255 Q(do {)
90.936 267 Q(for each basic block B)148.536 279 Q
(AVAILIN[B]=INTERSECTION\(foreach P,)206.136 291 Q 6(ad)263.736 303 S
(irect predecessor of B, AVAILOUT[P]\))-6 E
(AVAILOUT[B]=GEN[B] UNION \(AVAILIN[B] - KILL[B]\))206.136 315 Q 6(}w)
90.936 327 S(hile \(changes in any AVAILIN or AVAILOUT set\))-6 E F1
2.343(While Li)33.336 348 R 2.733 -.195(ve V)-.325 H 2.343(ariables w)
-1.248 F 2.343(as a backw)-.13 F 2.343(ards data \215o)-.13 F 5.593(wa)
-.325 G 2.343(nalysis, A)-5.593 F -.325(va)-.962 G 2.344
(ilable Expressions is a).325 F(forw)33.336 363 Q 1.751(ards problem.)
-.13 F 1.751(In Li)8.251 F 2.141 -.195(ve V)-.325 H 1.751
(ariable analysis, the "meet" operator w)-1.248 F 1.751
(as a set union: the)-.13 F(kno)33.336 378 Q 2.618(wn li)-.325 F 3.009
-.195(ve v)-.325 H 2.619(ariables \215o)-.13 F 2.619(wed backw)-.325 F
2.619(ards from the successor blocks to the predecessor)-.13 F 2.05
(blocks and their union formed LIVEOUT)33.336 393 R 8.549(.I)-.962 G
5.299(nA)-8.549 G -.325(va)-6.261 G 2.049
(ilable Expression analysis, the meet).325 F .238
(operator is set intersection: kno)33.336 408 R .238(wn a)-.325 F -.325
(va)-.26 G .238(ilable e).325 F .238(xpressions \215o)-.195 F 3.488(wf)
-.325 G(orw)-3.488 E .238(ards from predecessors)-.13 F .121
(to successor)33.336 423 R 3.371(,a)-.52 G .121(nd A)-3.371 F -1.755(VA)
-1.755 G .121(ILIN is the intersection of these v)1.755 F 3.371
(alues. The)-.325 F .121(reason for intersection)3.371 F .508
(is that for an e)33.336 438 R .508(xpression to be a)-.195 F -.325(va)
-.26 G .509(ilable, it must be a).325 F -.325(va)-.26 G .509
(ilable on ALL the paths leading to).325 F .133(the block.)33.336 453 R
.133(On the other hand, for a v)6.633 F .133(ariable to be li)-.325 F
.523 -.195(ve o)-.325 H 3.383(ne).195 G .132(xit from a block, it suf)
-3.578 F .132(\214ces that)-.325 F(it is li)33.336 468 Q .39 -.195(ve o)
-.325 H 3.25(ne).195 G(ntry to just one of the successors.)-3.25 E -.195
(Fo)33.336 489 S 4.805(ri).195 G 1.556(mplementation, we could construc\
t a hash table of srcA,op,srcB tuples and assign)-4.805 F .977
(each an inte)33.336 504 R .977(ger inde)-.195 F 4.227(x. Then)-.195 F
.977(the set of a)4.227 F -.325(va)-.26 G .977(ilable e).325 F .976
(xpressions can be represented by a bit)-.195 F -.195(ve)33.336 519 S
(ctor).195 E 7.395(.W)-.715 G .895(hen we mak)-7.395 F 4.145(eo)-.13 G
.895(ur initial linear pass o)-4.145 F -.195(ve)-.195 G 4.145(ra).195 G
.896(ll basic blocks to compute the GEN)-4.145 F 1.021
(and KILL sets, an)33.336 534 R 4.271(ya)-.195 G 1.021
(ssignment to srcX "kills" all tuples \(srcA,op,srcB\) where A==X or)
-4.271 F 8.479(B==X. An)33.336 549 R 8.479(yq)-.195 G 5.23
(uad of the form dst=srcA op srcB adds to the GEN set, unless)-8.479 F
(\(srcA,op,srcB\) is killed later in that block.)33.336 564 Q 3.626
-1.04(We c)33.336 585 T 1.546(an sho)1.04 F 4.796(wc)-.325 G(on)-4.796 E
-.195(ve)-.52 G -.234(rg).195 G 4.796(ence. The).234 F 1.546
(initialization condition for all blocks is the "Uni)4.796 F -.195(ve)
-.325 G(rsal).195 E 3.123
(Set", which is the identity for set intersection.)33.336 600 R 3.123
(At each iteration, set intersection is)9.623 F
(applied which can only diminish the size of the set.)33.336 615 Q 2.093
(Once a)33.336 636 R -.325(va)-.26 G 2.093(ilable e).325 F 2.093
(xpressions ha)-.195 F 2.483 -.195(ve b)-.26 H 2.093
(een identi\214ed, the optimizer can create a temporary).195 F .786(nam\
e at the computation site, and replace subsequent redundant uses with a\
 reference to)33.336 651 R .031(the temporary)33.336 666 R 6.531(.T)
-.845 G .031(he te)-6.531 F .03
(xt contains further algorithms which determine the optimum time to)
-.195 F(introduce this computation.)33.336 681 Q F2
(Reaching De\214nitions)209.733 726 Q 0 Cg EP
%%Page: 12 12
%%BeginPageSetup
BP
%%EndPageSetup
/F0 9/Times-Roman@0 SF 138.492(ECE466:Compilers Unit)33.336 60 R
(6/pg 12)2.25 E(\2512019 Jef)142.155 E 2.25(fH)-.225 G(akner)-2.25 E/F1
13/Times-Roman@0 SF 1.636(Another forw)33.336 120 R 1.637
(ard data \215o)-.13 F 4.887(wp)-.325 G 1.637
(roblem is Reaching De\214nitions.)-4.887 F 3.717 -1.04(We c)8.137 H
1.637(an de\214ne each quad)1.04 F 1.463(X=srcA op srcB as a de\214niti\
on point and assign it a unique number \(note similarity to)33.336 135 R
1.95(SSA form co)33.336 150 R -.195(ve)-.195 G 1.95(red later\).).195 F
5.2(Ag)8.45 G -2.795 -.325(iv e)-5.2 H 5.2(nd).325 G(e\214nition)-5.2 E
/F2 13/Times-Italic@0 SF -.481(re)5.2 G(ac).481 E(hes)-.195 E F1 5.2(ap)
5.2 G 1.95(articular point in the code if,)-5.2 F .739(along an)33.336
165 R 3.989(ya)-.195 G .738(nd all paths leading from the de\214nition \
to that point, there are no subsequent)-3.989 F 3.582(assignments. A)
33.336 180 R .332(particular quad X=srcA op srcB kills an)3.582 F 3.583
(yo)-.195 G .333(ther de\214nitions which in)-3.583 F -.26(vo)-.52 G(lv)
.26 E(e)-.195 E(X.)33.336 195 Q/F3 10/Courier@0 SF
(for each basic block B:)90.936 207 Q
(compute KILL[B], the set of all definitions killed)148.536 219 Q
(compute GEN[B], the set definitions created in this)148.536 231 Q
(block and not killed in this block)206.136 243 Q
(initialize REACHOUT[B]=empty)148.536 255 Q(do {)90.936 279 Q
(REACHIN[B]=UNION\(all predecessors P,REACHOUT[P]\))148.536 291 Q
(REACHOUT[B]=GEN[B] UNION \(REACHIN[B] - KILL[B]\))148.536 303 Q 6(}\()
90.936 315 S(while changes in any REACHIN or REACHOUT set\))-6 E F1
3.693(Analysis of this algorithm is similar to the other tw)33.336 336 R
6.943(oi)-.13 G(terati)-6.943 E 4.083 -.195(ve d)-.325 H(ata\215o).195 E
6.943(wa)-.325 G(lgorithms)-6.943 E(presented abo)33.336 351 Q -.195(ve)
-.195 G(.).195 E/F4 13/Times-Bold@0 SF(SSA)255.415 396 Q F1 4.28
(Some data \215o)33.336 426 R 7.53(wp)-.325 G 4.281
(roblems are cumbersome because a particular v)-7.53 F 4.281
(ariable can ha)-.325 F -.195(ve)-.26 G(dif)33.336 441 Q 1.615(ferent v)
-.325 F 1.614(alues depending on control \215o)-.325 F 6.554 -.845(w. S)
-.325 H 1.614(tatic Single Assignment F).845 F 1.614(orm \(SSA\) is a)
-.195 F -.13(wa)33.336 456 S 3.41(yo).13 G 3.41(fr)-3.41 G .16(e-writin\
g the IR so that there is only one de\214ning \(i.e. assigning\) instan\
ce for an)-3.41 F(y)-.195 E(gi)33.336 471 Q -.195(ve)-.325 G 3.25(nv)
.195 G 3.25(ariable. This)-3.575 F
(is of great assistance to the optimizer)3.25 E(.)-.715 E 1.551
(SSA does not, by itself, produce an)33.336 492 R 4.801(yo)-.195 G 4.8
(ptimization. It)-4.801 F 1.55(is merely a w)4.8 F 1.55(ay to mak)-.13 F
4.8(ec)-.13 G(ertain)-4.8 E 2.204(optimization algorithms easier)33.336
507 R 8.705(.G)-.715 G 2.205
(enerally speaking, at some point in the optimization)-8.705 F .32(proc\
ess, the IR is transformed into SSA form, then optimizations that w)
33.336 522 R .32(ork better in SSA)-.13 F 1.155
(are performed, then the code is translated back into non-SSA form.)
33.336 537 R 1.156(If there are se)7.655 F -.195(ve)-.325 G(ral).195 E
.394(such optimizations, the time tak)33.336 552 R .394(en to con)-.13 F
-.195(ve)-.52 G .393(rt into and out of SSA form might be justi\214ed)
.195 F(by the increased e)33.336 567 Q -.195(xe)-.195 G
(cution speed of the optimization passes.).195 E 2.755 -1.04(We i)33.336
588 T .675(ntroduce a v)1.04 F .675(alue number)-.325 F 3.925(,o)-.52 G
3.925(rs)-3.925 G .675(ubscript, for each v)-3.925 F 3.925
(ariable. Let')-.325 F 3.925(ss)-.715 G .675(ay it be)-3.925 F .676
(gins at 0, so)-.195 F .208(instead of x,y z, etc. our v)33.336 603 R
.207(ariables are initially numbered x0, y0, z0, etc.)-.325 F .207
(Each instance of)6.707 F 1.669(writing to that v)33.336 618 R 1.669
(ariable causes the number to be incremented.)-.325 F 1.669
(Subsequent uses of that)8.169 F -.325(va)33.336 633 S
(riable track the v).325 E(alue number)-.325 E 6.5(.E)-.715 G(.g.)-6.5 E
F3 6(#O)39.336 645 S(riginal form of quads:)-6 E 39.6(x= ADD)90.936 657
R(x,y)39.6 E 39.6(z= ADD)90.936 669 R(x,y)39.6 E 6(#S)39.336 681 S
(SA transformation:)-6 E 33.6(x1= ADD x0,y0)90.936 693 R 33.6
(z1= ADD x1,y0)90.936 705 R F1(Ho)33.336 726 Q 4.723(wd)-.325 G 4.723
(ow)-4.723 G 4.723(et)-4.723 G 1.472(hen reconcile the use of a name wh\
en there are multiple edges entering a)-4.723 F 2.384(basic block?)
33.336 741 R 2.384(If that name is de\214ned dif)8.884 F 2.385
(ferently among those edges then it w)-.325 F 2.385(ould be)-.13 F 0 Cg
EP
%%Page: 13 13
%%BeginPageSetup
BP
%%EndPageSetup
/F0 9/Times-Roman@0 SF 138.492(ECE466:Compilers Unit)33.336 60 R
(6/pg 13)2.25 E(\2512019 Jef)142.155 E 2.25(fH)-.225 G(akner)-2.25 E/F1
13/Times-Roman@0 SF 1.898(ambiguous which v)33.336 120 R 1.898
(alue-numbered name to use.)-.325 F 1.898
(The solution is to introduce what are)8.398 F(kno)33.336 135 Q .512
(wn as phi-functions.)-.325 F .513
(This is a symbolic notation which indicates that the v)7.012 F .513
(alue is the)-.325 F
(one corresponding to entering on a particular edge.)33.336 150 Q -.195
(Fo)33.336 171 S 3.25(re).195 G(xample, let')-3.445 E 3.25(sl)-.715 G
(ook at the follo)-3.25 E(wing IR:)-.325 E/F2 10/Courier@0 SF(BB0:)
33.336 183 Q 39.6(a= ADD)90.936 195 R(b,c)39.6 E(...)90.936 207 Q 21.6
(BR_xx BB1,BB2)90.936 219 R(BB1:)33.336 231 Q 39.6(a= ADD)90.936 243 R
(e,f)39.6 E 39.6(BR BB4)90.936 255 R(BB2:)33.336 267 Q 39.6(a= ADD)
90.936 279 R(x,y)39.6 E 39.6(BR BB4)90.936 291 R(BB4:)33.336 303 Q 39.6
(k= ADD)90.936 315 R(j,a)39.6 E F1(Re-written in SSA form:)33.336 336 Q
F2(BB0:)33.336 348 Q 33.6(a0= ADD b0,c0)90.936 360 R
(#Maybe optimized out as useless)85.2 E(...)90.936 372 Q 21.6
(BR_xx BB1,BB2)90.936 384 R(BB1:)33.336 396 Q 33.6(a1= ADD e0,f0)90.936
408 R 39.6(BR BB4)90.936 420 R(BB2:)33.336 432 Q 33.6(a2= ADD x0,y0)
90.936 444 R 39.6(BR BB4)90.936 456 R(BB4:)33.336 468 Q 33.6
(a3= PHI\(BB1:a1,BB2:a2\))90.936 480 R 33.6(k0= ADD j0,a3)90.936 492 R
F1 3.724(Of course, the phi function does not correspond to an)33.336
513 R 6.973(yt)-.195 G 3.723(ypical assembly language)-6.973 F 2.766
(instructions \(although there is some similarity to super)33.336 528 R
2.766(-scalar processor architecture\).)-.26 F .569
(Once the IR has been re)33.336 543 R .568
(written in SSA form and subjected to numerous optimizations, it)-.325 F
3.934(must be re)33.336 558 R 3.935
(written back into non-SSA form before being translated to tar)-.325 F
3.935(get code.)-.234 F 2.943(Generally speaking, this means inserting \
additional basic blocks which contain cop)33.336 573 R(y)-.13 E
(operations along each entering edge which is af)33.336 588 Q
(fected by phi function mer)-.325 E(ges.)-.234 E .019
(The reader is referred to the Dragon Book te)33.336 609 R .019(xt, or)
-.195 F/F3 13/Times-Italic@0 SF .019(Engineering a Compiler)3.269 F F1
.019(by Cooper and)3.269 F -1.04(To)33.336 624 S
(rczon for more information on SSA algorithms.)1.04 E/F4 13/Times-Bold@0
SF(Constant Pr)101.625 654 Q(opagation and Conditionally Unr)-.234 E
(eachable Code)-.234 E F1 1.635(Expressions in)33.336 690 R -.26(vo)-.52
G 1.635(lving only constants are a natural artif).26 F 1.634
(act of preprocessors and certain)-.13 F 4(coding styles.)33.336 705 R 4
(If we ha)10.5 F -.195(ve)-.26 G/F5 13/Courier@0 SF(a=MACROA*MACROB)
7.445 E F1 7.25(,a)C(nd)-7.25 E F5 4(#define MACROA 1)7.25 F F1(and)
7.251 E F5 2.493(#define MACROB 2)33.336 720 R F1 5.743(,t)C 2.493
(hen we can easily replace this with)-5.743 F F5(a=2)5.743 E F1 2.493
(and eliminate the)5.743 F .312(multiply operation at run time.)33.336
735 R .312(The replacement can be done during quad generation and)6.812
F 0 Cg EP
%%Page: 14 14
%%BeginPageSetup
BP
%%EndPageSetup
/F0 9/Times-Roman@0 SF 138.492(ECE466:Compilers Unit)33.336 60 R
(6/pg 14)2.25 E(\2512019 Jef)142.155 E 2.25(fH)-.225 G(akner)-2.25 E/F1
13/Times-Roman@0 SF .83(does not require e)33.336 120 R(xtensi)-.195 E
1.219 -.195(ve a)-.325 H 4.079(nalysis. E.g.).195 F(whene)4.079 E -.195
(ve)-.325 G 4.079(rw).195 G 4.079(ea)-4.079 G .829(re ask)-4.079 F .829
(ed to generate quads for a)-.13 F .678(multiply instruction, and both \
operands are constants, we instead generate a simple cop)33.336 135 R(y)
-.13 E 3.896(instruction. W)33.336 150 R 3.896(ed)-1.04 G .645
(iscussed this under the heading of "Constant F)-3.896 F .645
(olding" when e)-.195 F(xamining)-.195 E(quad generation.)33.336 165 Q
(Ho)33.336 186 Q(we)-.325 E -.195(ve)-.325 G 1.431 -.52(r, o).195 H .391
(ther optimizations in).52 F -.26(vo)-.52 G .391
(lving constants are not that easy to see at compile time).26 F
(without further analysis:)33.336 201 Q/F2 10/Courier@0 SF(z=17;)33.336
213 Q(a=z+2;)33.336 225 Q F1 1.325(It is ob)33.336 240 R 1.325
(vious what to do here, b)-.195 F 1.325
(ut in order for the compiler to see it, it must be able to)-.26 F 1.378
(trace the propag)33.336 255 R 1.379(ation of the constant v)-.065 F
1.379(alue into the v)-.325 F 1.379(ariable z and kno)-.325 F 4.629(wt)
-.325 G 1.379(hat z still has)-4.629 F(that same kno)33.336 270 Q(wn v)
-.325 E(alue when the + e)-.325 E(xpression is reached.)-.195 E 3.27
-1.04(We w)33.336 291 T 1.19(ill assume in this e)1.04 F 1.19
(xample that the IR is in Static Single Assignment \(SSA\) form,)-.195 F
1.443(meaning the quads are in the form SAi OP SBj -> Dk, and each of t\
hese names refers)33.336 306 R .311(unambiguously to a distinct v)33.336
321 R .31(alue which is ne)-.325 F -.195(ve)-.325 G 3.56(ro).195 G -.195
(ve)-3.755 G 3.56(rwritten. Then).195 F .31(we can k)3.56 F .31
(eep track of)-.13 F -1.443(Va)33.336 336 S 1.06
(lue\(Dx\) for each SSA destination Dx.)1.443 F 3.14 -1.04(We d)7.56 H
4.31(os)1.04 G 4.311(ou)-4.31 G 1.061(sing a system of accounting where)
-4.311 F -1.443(Va)33.336 351 S 1.698(lue\(Dx\) can be UNDEF)1.443 F
4.948(,K)-1.04 G(NO)-4.948 E 1.698(WN:n, UNKNO)-.455 F -1.56(WA)-.455 G
1.698(BLE. The state of UNDEF means)1.56 F 6.553(that we ha)33.336 366 R
6.943 -.195(ve n)-.26 H 6.553(ot yet learned if the v).195 F 6.553
(alue is kno)-.325 F -.13(wa)-.325 G 6.553(ble or unkno).13 F -.13(wa)
-.325 G 9.803(ble. The).13 F(UNKNO)33.336 381 Q -1.56(WA)-.455 G 2.427
(BLE state is the lo)1.56 F 2.427(west state, meaning we positi)-.325 F
-.195(ve)-.325 G 2.426(ly kno).195 F 5.676(wt)-.325 G 2.426(hat we can')
-5.676 F(t)-.234 E(kno)33.336 396 Q 4.258(wt)-.325 G 1.008(he v)-4.258 F
4.258(alue. An)-.325 F -.195(ex)4.259 G 1.009(ample w).195 F 1.009
(ould be an)-.13 F 4.259(yv)-.195 G 1.009(alue which is e)-4.584 F 1.009
(xternal to our analysis \(e.g.)-.195 F 2.804(global v)33.336 411 R
2.803(ariables if we are doing strictly intra-function analysis\).)-.325
F 2.803(The KNO)9.303 F 2.803(WN state)-.455 F .71(means we ha)33.336
426 R 1.1 -.195(ve p)-.26 H(ro).195 E -.195(ve)-.195 G 3.96(nt).195 G
.71(hat the SSA name Dx has a particular v)-3.96 F .71(alue n.)-.325 F
.711(The algorithm is)7.21 F(iterati)33.336 441 Q .476 -.195(ve a)-.325
H .086(nd operates correctly because these states ha).195 F .476 -.195
(ve a r)-.26 H .086(anking, and V).195 F .086(alue\(x\) can only)-1.443
F 1.426(stay the same or go do)33.336 456 R 4.676(wn. I.e.)-.325 F 1.427
(there will ne)4.676 F -.195(ve)-.325 G 4.677(rb).195 G 4.677(eac)-4.677
G 1.427(ase where UNKNO)-4.677 F -1.56(WA)-.455 G 1.427(BLE gets)1.56 F
("promoted" to KNO)33.336 471 Q(WN or UNDEF)-.455 E(.)-1.04 E .266
(The analysis be)33.336 492 R .266
(gins by marking all basic blocks as unreachable, with the e)-.195 F
.265(xception of the)-.195 F 2.151(initial node, which is ob)33.336 507
R 2.151(viously reachable.)-.195 F 4.231 -1.04(We a)8.651 H 2.151
(lso mark all SSA names as UNDEF)1.04 F(,)-1.04 E -.195(ex)33.336 522 S
5.117(cept those which are ob).195 F 5.117(viously UNKNO)-.195 F -1.56
(WA)-.455 G 8.367(BLE. Iterati)1.56 F -.195(ve)-.325 G(ly).195 E 8.367
(,w)-.845 G 8.367(el)-8.367 G 5.116(ook at each)-8.367 F .095(reachable\
 basic block, and analyze each SSA operation within, according to the f\
ollo)33.336 537 R(wing)-.325 E(rules:)33.336 552 Q 2.406(If the operati\
on is x=c, where c is a constant and x is an SSA name, then we mark)
33.336 573 R -1.443(Va)33.336 588 S(lue\(x\)=KNO)1.443 E(WN:c.)-.455 E
(If the operation is x=phi\(y)33.336 609 Q
(,z\), then we use the "meet rules":)-.845 E(UNKNO)105.336 624 Q -1.56
(WA)-.455 G(BLE meet an)1.56 E(ything = UNKNO)-.195 E -1.56(WA)-.455 G
(BLE)1.56 E(UNDEF meet UNDEF = UNDEF)105.336 639 Q(UNDEF meet KNO)
105.336 654 Q(WN:c = KNO)-.455 E(WN:c)-.455 E(KNO)105.336 669 Q
(WN:c1 meet KNO)-.455 E(WN:c2 {c1!=c2} = UNKNO)-.455 E -1.56(WA)-.455 G
(BLE)1.56 E(KNO)105.336 684 Q(WN:c meet KNO)-.455 E(WN:c = KNO)-.455 E
(WN:c)-.455 E -.195(Fo)33.336 705 S 5.119(ra).195 G 1.869
(ll other operations, we try to e)-5.119 F 1.869
(xploit algebraic identities to impro)-.195 F 2.259 -.195(ve o)-.195 H
1.869(ur analysis.).195 F(E.g. if the operation is multiply)33.336 720 Q
3.25(,t)-.845 G(hen)-3.25 E(KNO)33.336 735 Q(WN:0*an)-.455 E
(ything = KNO)-.195 E(WN:0)-.455 E 0 Cg EP
%%Page: 15 15
%%BeginPageSetup
BP
%%EndPageSetup
/F0 9/Times-Roman@0 SF 138.492(ECE466:Compilers Unit)33.336 60 R
(6/pg 15)2.25 E(\2512019 Jef)142.155 E 2.25(fH)-.225 G(akner)-2.25 E/F1
13/Times-Roman@0 SF(KNO)33.336 120 Q(WN*UNKNO)-.455 E -1.56(WA)-.455 G
(BLE = UNKNO)1.56 E -1.56(WA)-.455 G(BLE)1.56 E(KNO)33.336 135 Q
(WN:a*KNO)-.455 E(WN:b = KNO)-.455 E(WN:a*b)-.455 E(.)-.52 E
(UNDEF*UNKNO)33.336 150 Q -1.56(WA)-.455 G(BLE = UNDEF)1.56 E -.52(Wi)
33.336 165 S .222(th re).52 F -.065(ga)-.195 G .222
(rd to the last equation, we might think the right answer is UNKNO).065
F -1.56(WA)-.455 G .221(BLE, b)1.56 F(ut)-.26 E 3.776
(the UNDEF might later be disco)33.336 180 R -.195(ve)-.195 G 3.776
(red to be KNO).195 F 7.026(WN:0. If)-.455 F 3.776(we mark)7.026 F 3.776
(ed the result)-.13 F .16(prematurely as UNKNO)33.336 195 R -1.56(WA)
-.455 G .16(BLE, we w)1.56 F .159
(ould not be able to go back later and learn the f)-.13 F(act)-.13 E
(that the result must be 0.)33.336 210 Q 2.262 -1.04(We c)33.336 231 T
.182(an de)1.04 F .182(vise similar meet rules for other operators such\
 as addition, and for comparison)-.325 F 4.503(operators. E.g.)33.336
246 R 1.253(when e)4.503 F -.325(va)-.325 G 1.252
(luating a>b, if a and b are unsigned and a is KNO).325 F 1.252
(WN:0, then)-.455 F(the e)33.336 261 Q(xpression must al)-.195 E -.13
(wa)-.13 G(ys be f).13 E(alse, re)-.13 E -.065(ga)-.195 G(rdless of b)
.065 E(.)-.52 E .253
(At the end of each basic block, we look at conditional branches.)33.336
282 R .254(If the condition is either)6.754 F(KNO)33.336 297 Q(WN:TR)
-.455 E 3.794(UE or UNKNO)-.52 F -1.56(WA)-.455 G 3.794
(BLE, we must mark the true le)1.56 F 7.044(go)-.195 G 7.044(ft)-7.044 G
3.793(he branch as)-7.044 F 4.829(reachable. Lik)33.336 312 R -.325(ew)
-.13 G 1.579(ise for F).325 F 4.829(ALSE. If)-.962 F 1.579
(the branch is unconditional, we mark the tar)4.829 F 1.579(get as)-.234
F(reachable.)33.336 327 Q 2.462(This process continues iterati)33.336
348 R -.195(ve)-.325 G 2.461
(ly until things stop changing, at which point we ha).195 F -.195(ve)
-.26 G(disco)33.336 363 Q -.195(ve)-.195 G .422
(red all of the constant v).195 F .422(alues which are kno)-.325 F -.13
(wa)-.325 G .422(ble, and all of the blocks which are).13 F(kno)33.336
378 Q -.13(wa)-.325 G .936(bly unreachable.).13 F 3.016 -1.04(We c)7.436
H .936(an then remo)1.04 F 1.326 -.195(ve t)-.195 H .936
(he operations which compute the constant).195 F -.325(va)33.336 393 S
(lues, and prune the unreachable code.).325 E 0 Cg EP
%%Trailer
end
%%EOF
