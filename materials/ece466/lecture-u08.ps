%!PS-Adobe-3.0
%%Creator: groff version 1.22.2
%%CreationDate: Thu Apr 25 20:58:03 2019
%%DocumentNeededResources: font Times-Roman
%%+ font Times-Bold
%%+ font Courier
%%+ font Times-Italic
%%DocumentSuppliedResources: file liverange4.eps
%%+ file liverange3.eps
%%+ file liverange2.eps
%%+ file liverange1.eps
%%+ procset grops 1.22 2
%%Pages: 15
%%PageOrder: Ascend
%%DocumentMedia: Default 612 792 0 () ()
%%Orientation: Portrait
%%EndComments
%%BeginDefaults
%%PageMedia: Default
%%EndDefaults
%%BeginProlog
%%BeginResource: procset grops 1.22 2
%!PS-Adobe-3.0 Resource-ProcSet
/setpacking where{
pop
currentpacking
true setpacking
}if
/grops 120 dict dup begin
/SC 32 def
/A/show load def
/B{0 SC 3 -1 roll widthshow}bind def
/C{0 exch ashow}bind def
/D{0 exch 0 SC 5 2 roll awidthshow}bind def
/E{0 rmoveto show}bind def
/F{0 rmoveto 0 SC 3 -1 roll widthshow}bind def
/G{0 rmoveto 0 exch ashow}bind def
/H{0 rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/I{0 exch rmoveto show}bind def
/J{0 exch rmoveto 0 SC 3 -1 roll widthshow}bind def
/K{0 exch rmoveto 0 exch ashow}bind def
/L{0 exch rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/M{rmoveto show}bind def
/N{rmoveto 0 SC 3 -1 roll widthshow}bind def
/O{rmoveto 0 exch ashow}bind def
/P{rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/Q{moveto show}bind def
/R{moveto 0 SC 3 -1 roll widthshow}bind def
/S{moveto 0 exch ashow}bind def
/T{moveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/SF{
findfont exch
[exch dup 0 exch 0 exch neg 0 0]makefont
dup setfont
[exch/setfont cvx]cvx bind def
}bind def
/MF{
findfont
[5 2 roll
0 3 1 roll
neg 0 0]makefont
dup setfont
[exch/setfont cvx]cvx bind def
}bind def
/level0 0 def
/RES 0 def
/PL 0 def
/LS 0 def
/MANUAL{
statusdict begin/manualfeed true store end
}bind def
/PLG{
gsave newpath clippath pathbbox grestore
exch pop add exch pop
}bind def
/BP{
/level0 save def
1 setlinecap
1 setlinejoin
DEFS/BPhook known{DEFS begin BPhook end}if
72 RES div dup scale
LS{
90 rotate
}{
0 PL translate
}ifelse
1 -1 scale
}bind def
/EP{
level0 restore
showpage
}def
/DA{
newpath arcn stroke
}bind def
/SN{
transform
.25 sub exch .25 sub exch
round .25 add exch round .25 add exch
itransform
}bind def
/DL{
SN
moveto
SN
lineto stroke
}bind def
/DC{
newpath 0 360 arc closepath
}bind def
/TM matrix def
/DE{
TM currentmatrix pop
translate scale newpath 0 0 .5 0 360 arc closepath
TM setmatrix
}bind def
/RC/rcurveto load def
/RL/rlineto load def
/ST/stroke load def
/MT/moveto load def
/CL/closepath load def
/Fr{
setrgbcolor fill
}bind def
/setcmykcolor where{
pop
/Fk{
setcmykcolor fill
}bind def
}if
/Fg{
setgray fill
}bind def
/FL/fill load def
/LW/setlinewidth load def
/Cr/setrgbcolor load def
/setcmykcolor where{
pop
/Ck/setcmykcolor load def
}if
/Cg/setgray load def
/RE{
findfont
dup maxlength 1 index/FontName known not{1 add}if dict begin
{
1 index/FID ne
2 index/UniqueID ne
and
{def}{pop pop}ifelse
}forall
/Encoding exch def
dup/FontName exch def
currentdict end definefont pop
}bind def
/DEFS 0 def
/EBEGIN{
moveto
DEFS begin
}bind def
/EEND/end load def
/CNT 0 def
/level1 0 def
/PBEGIN{
/level1 save def
translate
div 3 1 roll div exch scale
neg exch neg exch translate
0 setgray
0 setlinecap
1 setlinewidth
0 setlinejoin
10 setmiterlimit
[]0 setdash
/setstrokeadjust where{
pop
false setstrokeadjust
}if
/setoverprint where{
pop
false setoverprint
}if
newpath
/CNT countdictstack def
userdict begin
/showpage{}def
/setpagedevice{}def
mark
}bind def
/PEND{
cleartomark
countdictstack CNT sub{end}repeat
level1 restore
}bind def
end def
/setpacking where{
pop
setpacking
}if
%%EndResource
%%EndProlog
%%BeginSetup
%%BeginFeature: *PageSize Default
<< /PageSize [ 612 792 ] /ImagingBBox null >> setpagedevice
%%EndFeature
%%IncludeResource: font Times-Roman
%%IncludeResource: font Times-Bold
%%IncludeResource: font Courier
%%IncludeResource: font Times-Italic
grops begin/DEFS 1 dict def DEFS begin/u{.001 mul}bind def end/RES 72
def/PL 792 def/LS false def/ENC0[/asciicircum/asciitilde/Scaron/Zcaron
/scaron/zcaron/Ydieresis/trademark/quotesingle/Euro/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/space/exclam/quotedbl/numbersign/dollar/percent
/ampersand/quoteright/parenleft/parenright/asterisk/plus/comma/hyphen
/period/slash/zero/one/two/three/four/five/six/seven/eight/nine/colon
/semicolon/less/equal/greater/question/at/A/B/C/D/E/F/G/H/I/J/K/L/M/N/O
/P/Q/R/S/T/U/V/W/X/Y/Z/bracketleft/backslash/bracketright/circumflex
/underscore/quoteleft/a/b/c/d/e/f/g/h/i/j/k/l/m/n/o/p/q/r/s/t/u/v/w/x/y
/z/braceleft/bar/braceright/tilde/.notdef/quotesinglbase/guillemotleft
/guillemotright/bullet/florin/fraction/perthousand/dagger/daggerdbl
/endash/emdash/ff/fi/fl/ffi/ffl/dotlessi/dotlessj/grave/hungarumlaut
/dotaccent/breve/caron/ring/ogonek/quotedblleft/quotedblright/oe/lslash
/quotedblbase/OE/Lslash/.notdef/exclamdown/cent/sterling/currency/yen
/brokenbar/section/dieresis/copyright/ordfeminine/guilsinglleft
/logicalnot/minus/registered/macron/degree/plusminus/twosuperior
/threesuperior/acute/mu/paragraph/periodcentered/cedilla/onesuperior
/ordmasculine/guilsinglright/onequarter/onehalf/threequarters
/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE
/Ccedilla/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex
/Idieresis/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis
/multiply/Oslash/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn
/germandbls/agrave/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla
/egrave/eacute/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis
/eth/ntilde/ograve/oacute/ocircumflex/otilde/odieresis/divide/oslash
/ugrave/uacute/ucircumflex/udieresis/yacute/thorn/ydieresis]def
/Times-Italic@0 ENC0/Times-Italic RE/Courier@0 ENC0/Courier RE
/Times-Bold@0 ENC0/Times-Bold RE/Times-Roman@0 ENC0/Times-Roman RE
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
BP
%%EndPageSetup
/F0 9/Times-Roman@0 SF 122.742(ECE466:Compilers Unit)69.336 60 R(8/pg 1)
2.25 E(\2512019 Jef)126.405 E 2.25(fH)-.225 G(akner)-2.25 E/F1 13
/Times-Bold@0 SF(The Back End)227.601 120 Q/F2 13/Times-Roman@0 SF .165
(The role of the "back end" of the compiler is to translate architectur\
e-neutral intermediate)33.336 156 R .229(code \(e.g. "quads"\) into pur\
e assembly language which can be passed on to the assembler)33.336 171 R
(and link)33.336 186 Q(er to produce an e)-.13 E -.195(xe)-.195 G
(cutable program.).195 E 3.099
(Prior to reaching the back end, the quads may ha)33.336 216 R 3.489
-.195(ve b)-.26 H 3.099(een subjected to architecture-).195 F 2.526
(independent optimizations, e.g. using data \215o)33.336 231 R 5.776(wa)
-.325 G 2.526(nalysis to eliminate computations of)-5.776 F
(constants, eliminating unreachable code, etc.)33.336 246 Q(This w)6.5 E
(as co)-.13 E -.195(ve)-.195 G(red in Unit #6.).195 E 5.281(The back en\
d must generate assembly language which correctly implements the)33.336
276 R(programmer')33.336 291 Q 4.794(ss)-.715 G 1.545
(ource intent, as represented by the quads, b)-4.794 F 1.545(ut moreo)
-.26 F -.195(ve)-.195 G 4.795(rs).195 G 1.545(hould produce)-4.795 F
("optimal" assembly language.)33.336 306 Q(There are three basic tasks:)
6.5 E 1.148(1\) Instruction selection: mapping IR operations to a)33.336
351 R -.325(va)-.26 G 1.148(ilable assembly language opcodes).325 F
(and addressing modes)33.336 366 Q 8.182(2\) Instruction scheduling: re\
-ordering assembly language opcodes to impro)33.336 396 R -.195(ve)-.195
G(performance, especially on architectures with multiple e)33.336 411 Q
-.195(xe)-.195 G(cution units.).195 E 1.586(3\) Re)33.336 441 R 1.586
(gister assignment: deciding when v)-.195 F 1.586(alues \(v)-.325 F
1.586(ariables, temporaries\) should occup)-.325 F 4.836(ya)-.13 G(re)
33.336 456 Q(gister)-.195 E 3.25(,a)-.52 G(nd which re)-3.25 E(gister)
-.195 E(.)-.715 E(Generally)33.336 486 Q 3.666(,")-.845 G .416
(optimal" is understood to mean speed of e)-3.666 F -.195(xe)-.195 G
.416(cution, b).195 F .416(ut other criteria, such as)-.26 F
(code size or cache performance, may also be weighed.)33.336 501 Q
(Unfortunately)33.336 531 Q 7.11(,t)-.845 G 3.86
(hese three steps are interdependent, making the back end the most)-7.11
F(dif)33.336 546 Q .282(\214cult part of the compiler)-.325 F 6.782(.E)
-.715 G .282(.g. assigning a v)-6.782 F .282(alue to a re)-.325 F .282
(gister as opposed to a memory)-.195 F 1.844(location changes instructi\
on selection, which in turn changes scheduling.)33.336 561 R 1.843
(At the same)8.343 F 7.502
(time, reordering the instructions may change re)33.336 576 R 7.503
(gister con\215icts and require a)-.195 F(reassignment.)33.336 591 Q
1.453(The characteristics of processors continue to change as processor\
 technology adv)33.336 621 R(ances,)-.325 E .848(so the algorithms whic\
h made sense ten years ago may no longer be suitable.)33.336 636 R .848
(Back end)7.348 F .277(optimization continues to be an acti)33.336 651 R
.666 -.195(ve a)-.325 H .276(rea of compiler research and de).195 F
-.195(ve)-.325 G 3.526(lopment. These).195 F(problems are almost al)
33.336 666 Q -.13(wa)-.13 G(ys NP).13 E(.)-1.443 E 3.694(Af)33.336 696 S
.445(urther requirement of the back end is that its selection of assemb\
ly language opcodes,)-3.694 F 1
(addressing modes, instruction ordering and re)33.336 711 R .999
(gister allocation must be deterministic and)-.195 F 3.833
(consistent. From)33.336 726 R 3.834(as)3.834 G(oftw)-3.834 E .584
(are engineering standpoint, a gi)-.13 F -.195(ve)-.325 G 3.834(nv).195
G .584(ersion of a gi)-4.029 F -.195(ve)-.325 G 3.834(nc).195 G(ompiler)
-3.834 E(,)-.52 E .88(compiling a gi)33.336 741 R -.195(ve)-.325 G 4.13
(np).195 G .88
(iece of source code, must create the same assembly language output)
-4.13 F 0 Cg EP
%%Page: 2 2
%%BeginPageSetup
BP
%%EndPageSetup
/F0 9/Times-Roman@0 SF 140.742(ECE466:Compilers Unit)33.336 60 R(8/pg 2)
2.25 E(\2512019 Jef)144.405 E 2.25(fH)-.225 G(akner)-2.25 E/F1 13
/Times-Roman@0 SF 4.122(each time.)33.336 120 R 4.122(This is kno)10.622
F 4.122(wn as "reproducible b)-.325 F 4.122
(uild," and if the compiler uses non-)-.26 F 1.428
(deterministic algorithms which don')33.336 135 R 4.678(ts)-.234 G 1.428
(atisfy this, it mak)-4.678 F 1.427(es management of the softw)-.13 F
(are)-.13 E -.26(bu)33.336 150 S(ild process v).26 E(ery cumbersome.)
-.195 E 3.966(Ac)33.336 180 S .717(ompiler can use a table-dri)-3.966 F
-.195(ve)-.325 G 3.967(na).195 G .717
(pproach where it has generic algorithms for the back)-3.967 F .078
(end, with tables speci\214c to each tar)33.336 195 R 3.328(get. This)
-.234 F .078(is the approach that gcc tak)3.328 F 3.328(es. Alternati)
-.13 F -.195(ve)-.325 G(ly).195 E(,)-.845 E 3.25(ac)33.336 210 S
(ompiler might be written with custom-coded back ends for each tar)-3.25
E(get.)-.234 E 1.752(In this unit, we')33.336 240 R 1.752
(ll only be able to gi)-.13 F 2.142 -.195(ve a l)-.325 H 1.752(ight o)
.195 F -.195(ve)-.195 G(rvie).195 E 5.002(wo)-.325 G 5.002(fw)-5.002 G
1.752(hat is a v)-5.002 F 1.752(ery complicated)-.195 F 3.45
(topic. Note)33.336 255 R .2
(that some of the "back end" material, in particular ho)3.45 F 3.449(wv)
-.325 G .199(ariables are declared)-3.774 F(and accessed, w)33.336 270 Q
(as already co)-.13 E -.195(ve)-.195 G(red in the pre).195 E
(vious unit.)-.325 E/F2 13/Times-Bold@0 SF(Instruction Selection)209.739
330 Q F1 .451
(It is not necessarily the case that the IR is strictly more po)33.336
366 R .451(werful or strictly less po)-.325 F(werful)-.325 E .213
(than the tar)33.336 381 R .213(get assembly language.)-.234 F(In)6.712
E -.325(va)-.52 G(riably).325 E 3.462(,s)-.845 G .212
(ome IR operations will not be e)-3.462 F(xpressible)-.195 E .467(in a \
single assembly instruction, and at the same time, some sequences of IR\
 instructions)33.336 396 R(may be coalesced into a single instruction.)
33.336 411 Q 2.308(There are tw)33.336 432 R 5.558(ob)-.13 G 2.307
(asic approaches to instruction selection: linear and tree-based.)-5.558
F 2.307(In the)8.807 F(latter)33.336 447 Q 3.466(,t)-.52 G .216(he inte\
rmediate representation is placed into a tree form where the nodes repr\
esent)-3.466 F 1.014(operations and the edges represent the \215o)33.336
462 R 4.264(wo)-.325 G 4.264(fv)-4.264 G 4.264(alues. The)-4.589 F -.26
(av)4.264 G 1.014(ailable assembly language)-.065 F 2.038(instructions \
are also represented as miniature trees or "tiles" which illustrate ho)
33.336 477 R 5.288(wt)-.325 G(hat)-5.288 E .855
(particular instruction transforms v)33.336 492 R 4.105(alues. Each)
-.325 F .855(of these tiles may ha)4.105 F 1.244 -.195(ve a)-.26 H 4.104
(na).195 G .854(ssociated cost)-4.104 F 4.431(metric. The)33.336 507 R
1.181(process of instruction selection is then the `)4.431 F 1.181
(`tree tiling')-.962 F 4.431('p)-.962 G 1.181(roblem: paste the)-4.431 F
.058(tiles o)33.336 522 R -.195(ve)-.195 G 3.308(rt).195 G .057
(he original tree in a manner which preserv)-3.308 F .057
(es its form, using the "optimal" tiling)-.195 F
(which reduces the total cost metric.)33.336 537 Q 1.061(In the linear \
method, the intermediate representation is a linear sequence of instruc\
tions)33.336 567 R .145
(\(quads\) and the assembly instructions are linear patterns.)33.336 582
R -1.443(Va)6.645 G .145(rious methods can be used to)1.443 F(re)33.336
597 Q 3.108(write the IR into assembly through pattern matching.)-.325 F
3.109(E.g. the "Dragon" compiler)9.608 F(te)33.336 612 Q 1.684
(xtbook discusses a theoretical w)-.195 F 1.684(ay to use a parser)-.13
F 4.934(,w)-.52 G 1.684(here the instruction patterns are)-4.934 F
(akin to grammar rules, and the IR is analogous to tok)33.336 627 Q
(en sequences.)-.13 E -.455(Tr)33.336 657 S .066
(ee-based vs linear methods of instruction selection, as may be e).455 F
.066(xpected, each ha)-.195 F .456 -.195(ve t)-.26 H(heir).195 E(adv)
33.336 672 Q 2.747(antages and dra)-.325 F 5.997(wbacks. Linear)-.195 F
2.747(methods may ha)5.997 F 3.137 -.195(ve d)-.26 H(if).195 E 2.747
(\214culty observing data \215o)-.325 F -.845(w,)-.325 G .376
(especially if quads ha)33.336 687 R .766 -.195(ve b)-.26 H .376
(een reordered during optimization, and thus are more reliant on).195 F
3.125(the quad generator using certain strate)33.336 702 R 6.375
(gies. T)-.195 F 3.125(ree methods often ha)-.455 F 3.514 -.195(ve d)
-.26 H(if).195 E 3.124(\214culty with)-.325 F(control \215o)33.336 717 Q
3.25(wc)-.325 G(hanges.)-3.25 E 0 Cg EP
%%Page: 3 3
%%BeginPageSetup
BP
%%EndPageSetup
/F0 9/Times-Roman@0 SF 140.742(ECE466:Compilers Unit)33.336 60 R(8/pg 3)
2.25 E(\2512019 Jef)144.405 E 2.25(fH)-.225 G(akner)-2.25 E/F1 13
/Times-Roman@0 SF 1.148(The simplest linear method is template-based.)
33.336 120 R 1.149(Each quad is translated directly into one)7.648 F
1.981(or more assembly instructions, without re)33.336 135 R -.065(ga)
-.195 G 1.98(rd to the other quads surrounding it.).065 F(This)8.48 E
2.117(method performs poorly when the assembly is richer than the quad \
schema, e.g. X86)33.336 150 R(assembly)33.336 165 Q 5.236(,b)-.845 G
1.985(ecause it can not recognize opportunities for combining instructi\
ons into a)-5.236 F(single more potent instruction or addressing mode.)
33.336 180 Q 5.871 -1.04(We w)33.336 210 T 3.791
(ill discuss a template-dri)1.04 F -.195(ve)-.325 G 7.041(nm).195 G
3.791(ethod of linear instruction selection called the)-7.041 F 2.204
("peephole" method.)33.336 225 R 4.284 -1.04(We d)8.704 H 2.204
(e\214ne a "windo)1.04 F 2.203(w" which has a certain maximum size.)
-.325 F(This)8.703 E(windo)33.336 240 Q 3.489(ws)-.325 G .239
(pans a constantly adv)-3.489 F .24
(ancing linear range of instructions \(instructions might be a)-.325 F
(mix of quads, assembly or both\).)33.336 255 Q
(The algorithm can be summarized as:)6.5 E/F2 10/Courier@0 SF
(while \(there are more quads to consume\))90.936 267 Q({)90.936 279 Q
(do {)148.536 291 Q(Examine the current window for pattern matches)
206.136 303 Q(\(If there are multiple matches, pick the least-cost\))
206.136 315 Q(Perform the pattern transformation)206.136 327 Q 6(}w)
148.536 339 S(hile \(there was a pattern which matched\))-6 E
(shift more quads into the far end of the window:)148.536 351 Q
(Keep window filled with at least longest-sized pattern)206.136 363 Q
(Since the window has a definite size, eventually)206.136 375 Q
(something will have to be pushed out of the near end.)206.136 387 Q
(If this something is an un-matched quad, we have)206.136 399 Q
(failed to produce an instruction selection, oops.)206.136 411 Q(})
90.936 423 Q(whatever is left in the window should be assembly language)
90.936 435 Q F1 -.455(Tr)33.336 456 S .141(anslated assembly language i\
nstructions roll out of the top, or near end, of the peephole).455 F
(windo)33.336 471 Q 10.547 -.845(w. T)-.325 H 5.607(he windo).845 F
8.857(ws)-.325 G 5.607
(ize is chosen so that the longest practical sequence of)-8.857 F 4.227
(quads/assembly can be handled.)33.336 486 R 4.226(Making the windo)
10.726 F 7.476(wu)-.325 G 4.226(nduly lar)-7.476 F 4.226
(ge has no further)-.234 F(adv)33.336 501 Q 1.417(antage, and instead i\
ncreases the translation time by requiring more searching.)-.325 F(The)
7.917 E .753(peephole method can be applied indi)33.336 516 R .753
(vidually to each basic block, or to the o)-.325 F -.195(ve)-.195 G .753
(rall linear).195 F .172(stream of quads.)33.336 531 R .172
(The patterns to be matched can also re)6.672 F .172
(write assembly language opcodes)-.325 F(into more ef)33.336 546 Q
(\214cient opcodes.)-.325 E 2.586
(The "shape" of the quads, i.e. the strate)33.336 567 R 2.586
(gy used by the quad generator and the quad)-.195 F .201
(scheme, in\215uences this method.)33.336 582 R .201(If the quads are v)
6.701 F .201(ery rich, it may be necessary to e)-.195 F(xpand)-.195 E
3.532(them into simpler operations before entering the windo)33.336 597
R 8.472 -.845(w. I)-.325 H 6.781(no).845 G 3.531(rder to \214nd optimal)
-6.781 F 1.258
(instruction sequences on some architectures, it may be necessary to e)
33.336 612 R 1.258(xpose hidden data)-.195 F<8d6f>33.336 627 Q 1.69
-.845(w, e)-.325 H(.g. the use of condition codes.).845 E .048(It shoul\
d be understood that the instruction selector is not necessarily e)
33.336 648 R .048(xpected to perform)-.195 F 1.451
(well on arbitrary input sequences of quads.)33.336 663 R 1.452
(It may depend on certain properties of the)7.951 F(quad generator)
33.336 678 Q 3.25(,e)-.52 G
(.g. that all temporary names are assigned to just once and ne)-3.25 E
-.195(ve)-.325 G 3.25(rr).195 G(e-used.)-3.25 E 3.944(In the e)33.336
699 R 3.944(xamples belo)-.195 F 5.634 -.845(w, w)-.325 H 7.194(ew).845
G 3.944(ill use an informal syntax for describing the pattern)-7.194 F
1.372(matching/replacement engine.)33.336 714 R 1.372(It isn')7.872 F
4.622(ti)-.234 G 1.372(ntended to be a literal implementation.)-4.622 F
1.373(In some)7.872 F 1.296
(compilers, the pattern matching is coded on an ad-hoc basis.)33.336 729
R 1.295(Others, such as the GNU)7.795 F -.13(fa)33.336 744 S 1.149(mily\
 of compilers, de\214ne a complicated language for modelling the tar).13
F 1.15(get system and)-.234 F 0 Cg EP
%%Page: 4 4
%%BeginPageSetup
BP
%%EndPageSetup
/F0 9/Times-Roman@0 SF 140.742(ECE466:Compilers Unit)33.336 60 R(8/pg 4)
2.25 E(\2512019 Jef)144.405 E 2.25(fH)-.225 G(akner)-2.25 E/F1 13
/Times-Roman@0 SF .018(applying transformations.)33.336 120 R .018
(When the compiler is b)6.518 F .017(uilt for a particular tar)-.26 F
.017(get, that language)-.234 F(is used to generate internal tables and\
 code to perform the pattern matching.)33.336 135 Q/F2 13/Times-Bold@0
SF(Instruction Selection example, X86)170.564 165 Q F1(Let')33.336 201 Q
3.25(ss)-.715 G(ay we ha)-3.25 E .39 -.195(ve t)-.26 H(he follo).195 E
(wing code fragment:)-.325 E/F3 10/Courier@0 SF(f\(\))33.336 213 Q({)
33.336 225 Q(int i;)33.336 237 Q(int ary[16];)33.336 249 Q(ary[i]++;)
90.936 261 Q F1 4.078(This might produce the follo)33.336 291 R 4.078
(wing IR sequence, using the nomenclature pre)-.325 F(viously)-.325 E
.689(described in Unit 5.)33.336 306 R 2.769 -1.04(We w)7.189 H .689
(ill mak)1.04 F 3.939(et)-.13 G .689(he observ)-3.939 F .689
(ation that temporary names are lik)-.325 F 3.939(ev)-.13 G(irtual)
-3.939 E(re)33.336 321 Q 3.261(gisters. The)-.195 F 3.261(yh)-.195 G
-2.925 -.26(av e)-3.261 H .011(no assigned storage location, no e)3.521
F .011(xplicit initialization, and no w)-.195 F .011(ay to)-.13 F(tak)
33.336 336 Q 4.547(et)-.13 G 1.297(heir address.)-4.547 F 1.297
(On the other hand, program v)7.797 F 1.297(ariables ha)-.325 F 1.687
-.195(ve a)-.26 H 4.547(ne).195 G 1.297(xistence in memory)-4.742 F(,)
-.845 E 1.933(and ha)33.336 351 R 2.323 -.195(ve t)-.26 H 5.183(ob).195
G 5.183(el)-5.183 G 1.933(oaded \(either e)-5.183 F 1.933
(xplicitly into a re)-.195 F(gister)-.195 E 5.183(,o)-.52 G 5.184(ri)
-5.183 G 1.934(mplicitly via an addressing)-5.184 F .251
(mode\) before use.)33.336 366 R .251(The quad code belo)6.751 F 3.501
(wf)-.325 G(ollo)-3.501 E .251(ws the con)-.325 F -.195(ve)-.52 G .251
(ntion that all temporary names).195 F 1.187
(are represented by virtual re)33.336 381 R 4.437(gisters. W)-.195 F
4.437(ea)-1.04 G 1.187(ssume that it has already been passed through)
-4.437 F 9.511(the architecture-independent optimizer which remo)33.336
396 R -.195(ve)-.195 G 12.76(dt).195 G 9.51(he redundant address)-12.76
F(computation for a[i]:)33.336 411 Q F3 27.6(%T1= LEA)90.936 423 R
(ary{lvar})39.6 E 27.6(%T2= MUL)90.936 435 R(i{lvar},4)39.6 E 27.6
(%T3= ADD)90.936 447 R(%T1,%T2)39.6 E 27.6(%T4= LOAD [%T3])90.936 459 R
27.6(%T5= ADD)90.936 471 R(%T4,1)39.6 E 21.6(STORE %T5,[%T3])90.936 483
R F1(The pattern recognizer could be set up to recognize something lik)
33.336 513 Q 3.25(et)-.13 G(his:)-3.25 E F3(Recognize:)33.336 525 Q 15.6
(%rega= LEA)90.936 537 R(localvar\(x\))39.6 E 15.6(%regb= MUL)90.936 549
R(localvar\(y\),4)39.6 E 15.6(%regc= ADD)90.936 561 R(%rega,%regb)39.6 E
(Replace:)33.336 573 Q 27.6(movl offset\(y\)\(%ebp\),%regb)90.936 585 R
27.6(leal offset\(x\)\(%ebp,%regb,4\),%regc)90.936 597 R F1 1.784
(In these patterns, %re)33.336 618 R 1.914 -.065(ga i)-.195 H 5.035(saw)
.065 G 1.785(ildcard, matching an)-5.035 F 5.035(yv)-.195 G 1.785
(irtual re)-5.035 F(gister)-.195 E 5.035(,b)-.52 G 1.785
(ut tracking it as)-5.295 F .674
(well, so that we can see the correspondence between the LEA into a re)
33.336 633 R .674(gister and the use)-.195 F .451(of that re)33.336 648
R .451(gister in the ADD.)-.195 F(Lik)6.951 E -.325(ew)-.13 G .451
(ise localv).325 F .452(ar\(x\) is intended as a wildcard matching an)
-.325 F(y)-.195 E .888(local v)33.336 663 R .888(ariable v)-.325 F .888
(alue and gi)-.325 F .888(ving it a wildcard name x.)-.325 F(of)7.387 E
.887(fset\(x\) will be replaced with the)-.325 F(of)33.336 678 Q 1.536
(fset \(within the stack frame\) of the local v)-.325 F 1.536
(ariable which has been gi)-.325 F -.195(ve)-.325 G 4.786(nt).195 G
1.536(he wildcard)-4.786 F .382(name x.)33.336 693 R .382(This of)6.882
F .382(fset is clearly kno)-.325 F .381
(wn to us at this time, since the entire function has been)-.325 F 1.734
(seen and the stack frame has been laid out with of)33.336 708 R 1.735
(fsets assigned to all local v)-.325 F(ariables.)-.325 E .23(E.g. let')
33.336 723 R 3.48(sa)-.715 G .229(ssume that i has an of)-3.48 F .229
(fset of -4 from the %ebp re)-.325 F(gister)-.195 E 3.479(,a)-.52 G .229
(nd ary has an of)-3.479 F .229(fset of)-.325 F 3.978(-8. The)33.336 738
R(lo)3.978 E .728(wercase nomenclature indicates a translated assembly \
language instruction, vs)-.325 F 0 Cg EP
%%Page: 5 5
%%BeginPageSetup
BP
%%EndPageSetup
/F0 9/Times-Roman@0 SF 140.742(ECE466:Compilers Unit)33.336 60 R(8/pg 5)
2.25 E(\2512019 Jef)144.405 E 2.25(fH)-.225 G(akner)-2.25 E/F1 13
/Times-Roman@0 SF(uppercase for quads.)33.336 120 Q .076
(Considering only the pattern abo)33.336 141 R -.195(ve)-.195 G 3.325
(,t).195 G .075(he \214rst tw)-3.325 F 3.325(oq)-.13 G .075(uads w)
-3.325 F .075(ould be shifted into the peephole)-.13 F -.26(bu)33.336
156 S 4.344(tr).26 G 1.094(esult in no matches.)-4.344 F 1.095
(Then the third quad w)7.594 F 1.095(ould create a match ag)-.13 F 1.095
(ainst the pattern.)-.065 F
(But in general, there will be multiple pattern matches.)33.336 171 Q
(E.g. there should be a pattern:)6.5 E/F2 10/Courier@0 SF(Recognize:)
33.336 183 Q 15.6(%rega= LEA)90.936 195 R(localvar\(x\))39.6 E(Replace)
33.336 207 Q 27.6(leal offset\(x\)\(%ebp\),%rega)90.936 219 R F1 .527(t\
o handle the more general case where the address of the array is needed\
 else)33.336 234 R .526(where in an)-.325 F -.195(ex)33.336 249 S 5.677
(pression. This).195 F 2.428
(pattern will \214re too early unless we modify the peephole algorithm)
5.677 F(slightly)33.336 264 Q 7.012(.I)-.845 G .511
(nstead of inserting quads one at a time, we al)-7.012 F -.13(wa)-.13 G
.511(ys grab groups of quads which).13 F .719(are lar)33.336 279 R .719
(ger than the longest pattern.)-.234 F .72
(When multiple patterns match, we assign a metric or)7.22 F
("weight" to each match which f)33.336 294 Q -.26(avo)-.13 G
(rs the longest possible match.).26 E 1.605(Another pattern to pick up \
the load, add, store sequence and select the incl instruction)33.336 315
R(might be:)33.336 330 Q F2(Recognize:)33.336 342 Q 15.6(%regb= LOAD)
90.936 354 R([%rega])33.6 E 15.6(%regc= ADD)90.936 366 R(%regb,1)39.6 E
21.6(STORE %regc,[%rega])148.536 378 R(Replace:)33.336 390 Q 27.6
(incl \(%rega\))90.936 402 R F1(At this point, the follo)33.336 447 Q
(wing assembly instructions are in the windo)-.325 E(w:)-.325 E F2 27.6
(movl -4\(%ebp\),%T2)90.936 459 R 27.6(leal -8\(%ebp,%T2,4\),%T1)90.936
471 R 27.6(incl \(%T1\))90.936 483 R F1(Finally)33.336 513 Q 8.179(,a)
-.845 G 4.929
(nother pattern might be written which matches not quads, b)-8.179 F
4.93(ut partially)-.26 F(constructed assembly code.)33.336 528 Q
(It recognizes the addressing mode:)6.5 E F2(Recognize)33.336 540 Q 27.6
(leal offset\(%rega,%regb,scale\),%regc)90.936 552 R 33.6(opX \(%regc\))
90.936 564 R({%regc dead})90.936 576 Q(Replace)33.336 588 Q 33.6
(opX offset\(%rega,%regb,scale\))90.936 600 R F1(Lea)33.336 630 Q
(ving us with:)-.26 E F2 27.6(movl -4\(%ebp\),%T2)90.936 642 R 27.6
(incl -8\(%ebp,%T2,4\))90.936 654 R F1 .764(Thus in a CISC tar)33.336
690 R .764
(get which is richer than our IR schema, the number of operations has)
-.234 F(been consolidated during tar)33.336 705 Q(get code generation.)
-.234 E 1.284(During re)33.336 726 R 1.285
(gister allocation, the virtual re)-.195 F 1.285(gisters %T0, etc. w)
-.195 F 1.285(ould be replaced with actual)-.13 F(re)33.336 741 Q 4.702
(gisters. Note)-.195 F 1.452(that the last pattern w)4.702 F 1.452
(as predicated on "%re)-.13 F 1.452(gc dead".)-.195 F 3.532 -1.04(We d)
7.952 H 1.452(e\214ned dead)1.04 F 0 Cg EP
%%Page: 6 6
%%BeginPageSetup
BP
%%EndPageSetup
/F0 9/Times-Roman@0 SF 140.742(ECE466:Compilers Unit)33.336 60 R(8/pg 6)
2.25 E(\2512019 Jef)144.405 E 2.25(fH)-.225 G(akner)-2.25 E/F1 13
/Times-Roman@0 SF .156(and li)33.336 120 R .546 -.195(ve v)-.325 H .157
(alues in Unit 6.)-.13 F .157(Consider that if %re)6.657 F .157
(gc were li)-.195 F .547 -.195(ve a)-.325 H .157
(fter this 2-instruction pattern,).195 F .691(it w)33.336 135 R .691(ou\
ld not be proper to replace it with the single instruction, because lat\
er on the IR is)-.13 F 2.158(depending on a v)33.336 150 R 2.159(alid v)
-.325 F 2.159(alue \(the address of the array element\) being in %re)
-.325 F 5.409(gc. If)-.195 F(we)5.409 E .523
(control the "shape" of the quads so that we w)33.336 165 R .522
(ould ne)-.13 F -.195(ve)-.325 G 3.772(rg).195 G .522
(enerate a %Txx temporary that)-3.772 F .919(gets re-used, and the opti\
mizer does not wind up causing it to be potentially re-used via)33.336
180 R(common sube)33.336 195 Q
(xpression elimination, then we could eliminate this "li)-.195 E -.195
(ve)-.325 G(/dead" predicate.).195 E/F2 13/Times-Bold@0 SF
(Dif\214culties with 2-addr)174.542 225 Q(ess tar)-.234 E(gets)-.13 E F1
1.869(Most instructions in the X86 set are 2-address \(there are also 1\
-address and 3-address)33.336 261 R 1.871(instructions\), meaning that \
the destination operand is also one of the source operands.)33.336 276 R
.126(This creates challenges in translating 3-address quads.)33.336 291
R .125(In addition, for most operations, it)6.626 F(is not allo)33.336
306 Q(wed to specify both source and destination as memory operands.)
-.325 E(E.g.)6.5 E/F3 10/Courier@0 SF(extern int a,b,c;)39.336 318 Q
(a=b+c:)90.936 330 Q 31.2(a{global}=ADD b{global},c{global})90.936 354 R
F1(One possible pattern sequence might be:)33.336 375 Q F3(Match)33.336
387 Q 31.2(global\(Z\)=ADD global\(X\),global\(Y\))90.936 399 R(Replace)
33.336 411 Q 27.6(movl X,%regN)90.936 423 R 33.6(add Y,%regN)90.936 435
R 27.6(movl %regN,Z)90.936 447 R F1(Here %re)33.336 468 Q
(gN denotes a ne)-.195 E 3.25(wv)-.325 G(irtual re)-3.25 E
(gister which is allocated on the \215y)-.195 E(.)-.845 E 1.525
(If the instruction selection algorithm has information about "li)33.336
489 R -.195(ve)-.325 G 4.776("v).195 G 1.526(alues a)-5.101 F -.325(va)
-.26 G 1.526(ilable to it).325 F 2.109(\(see belo)33.336 504 R 5.359(wu)
-.325 G 2.108(nder re)-5.359 F 2.108
(gister allocation\) then it can mak)-.195 F 5.358(em)-.13 G 2.108
(ore informed decisions about)-5.358 F(2-address issues.)33.336 519 Q F3
(Match)33.336 531 Q 9.6(%tempC= ADD)90.936 543 R(%tempA,%tempB)39.6 E
({%tempB live})90.936 555 Q F1(If %tempB is li)33.336 570 Q .39 -.195
(ve a)-.325 H(fter this quad, we must emit:).195 E F3(Replace)33.336 582
Q 27.6(movl %tempB,%tempC)90.936 594 R 27.6(addl %tempA,%tempC)90.936
606 R F1(If we kno)33.336 621 Q 3.25(wt)-.325 G
(hat %tempB is dead after this quad, we can emit)-3.25 E F3 27.6
(addl %tempA,%tempB)90.936 633 R F1 2.405
(and then alias %tempC to %tempB thereafter)33.336 648 R 5.655(,s)-.52 G
5.655(ot)-5.655 G 2.405(hat an)-5.655 F 5.655(yr)-.195 G 2.405
(eference to %tempC as a)-5.655 F
(source operand is satis\214ed by %tempB.)33.336 663 Q F2(Mor)169.355
693 Q 3.25(et)-.234 G -.234(ro)-3.25 G(uble with X86 instructions).234 E
F1(Some X86 instructions require the use of speci\214c re)33.336 729 Q
3.25(gisters. No)-.195 F 3.25(wl)-.325 G(et')-3.25 E 3.25(sl)-.715 G
(ook at)-3.25 E F3(extern int a,b,c;)39.336 741 Q 0 Cg EP
%%Page: 7 7
%%BeginPageSetup
BP
%%EndPageSetup
/F0 9/Times-Roman@0 SF 140.742(ECE466:Compilers Unit)33.336 60 R(8/pg 7)
2.25 E(\2512019 Jef)144.405 E 2.25(fH)-.225 G(akner)-2.25 E/F1 10
/Courier@0 SF(a=b/c;)90.936 117 Q 21.6(c=DIV a,b)90.936 141 R/F2 13
/Times-Roman@0 SF .679(One might think that we can select instructions \
for DIV in a manner analogous to ADD.)33.336 162 R .103(But the X86 idi)
33.336 177 R 3.353(vi)-.325 G .103(nstruction \(idi)-3.353 F 3.353(vi)
-.325 G 3.353(sf)-3.353 G .103(or signed long di)-3.353 F .103
(vision, di)-.325 F 3.353(vi)-.325 G 3.353(sf)-3.353 G .104
(or unsigned long\) has)-3.353 F 3.301(ap)33.336 192 S .051
(eculiar restriction.)-3.301 F .05
(It is really a 1-address instruction.)6.551 F .05(The di)6.55 F .05
(vidend is actually a 64 bit)-.325 F -.325(va)33.336 207 S .248
(lue and is al).325 F -.13(wa)-.13 G .249(ys in the re).13 F .249
(gister pair %edx:%eax \(%edx is the most signi\214cant 32 bits\).)-.195
F .886(The di)33.336 222 R .886(visor may be a re)-.325 F .886
(gister or memory operand \(b)-.195 F .886(ut not immediate!\).)-.26 F
.885(The quotient is)7.386 F(placed in %eax, and the remainder in %edx \
\(there is no separate MOD instruction\).)33.336 237 Q F1(Match:)33.336
249 Q 49.2(global\(Z\)= DIV)90.936 261 R(global\(X\),global\(Y\))39.6 E
(Replace:)33.336 273 Q({kill %eax})90.936 285 Q 27.6(movl X,%eax)90.936
297 R({kill %edx})90.936 309 Q(cltd)90.936 321 Q 21.6(idivl Y)90.936 333
R 27.6(movl %eax,Z)90.936 345 R F2 4.16(The cltd instruction sign-e)
33.336 360 R 4.16(xtends the %eax re)-.195 F 4.16
(gister into the %edx re)-.195 F(gister)-.195 E 7.41(,a)-.52 G 4.16
(nd is)-7.41 F .954(necessary to set up properly for a signed inte)
33.336 375 R .954(ger 32 bit di)-.195 F 4.204(vision. \(If)-.325 F .954
(this were unsigned,)4.204 F .06
(we could clear edx with xorl %edx,%edx, and we w)33.336 390 R .061
(ould use the di)-.13 F .061(vl opcode instead.\))-.325 F(An)6.561 E
1.526(unfortunate consequence of this re)33.336 405 R(gister)-.195 E
1.526(-speci\214c peculiarity is that we must violate our)-.26 F 2.628
(nice clean model of k)33.336 420 R 2.628(eeping all re)-.13 F 2.629
(gisters virtual during instruction selection.)-.195 F(During)9.129 E
(re)33.336 435 Q 1.586(gister allocation, when the mo)-.195 F 1.586
(vl X,%eax is encountered, it will force whate)-.195 F -.195(ve)-.325 G
4.836(rv).195 G(alue)-5.161 E .367(happens to be in the %eax re)33.336
450 R .367(gister at the time to be spilled to mak)-.195 F 3.617(et)-.13
G .367(he re)-3.617 F .368(gister a)-.195 F -.325(va)-.26 G(ilable.).325
E(Lik)33.336 465 Q -.325(ew)-.13 G .731
(ise, the {kill %edx} notation will instruct the re).325 F .731
(gister allocator to v)-.195 F .731(acate the %edx)-.325 F(re)33.336 480
Q(gister prior to the cltd instruction \(which will implicitly o)-.195 E
-.195(ve)-.195 G(rwrite it\).).195 E/F3 13/Times-Bold@0 SF
(Instruction Selection example, SP)160.573 540 Q(ARC)-.962 E F2 3.045
(In the CISC architecture e)33.336 576 R 3.045(xample abo)-.195 F -.195
(ve)-.195 G 6.296(,t).195 G 3.046(he assembly output often contained fe)
-6.296 F(wer)-.325 E .268(operations than the IR form.)33.336 591 R .268
(This is because, in general, the CISC instruction set is more)6.768 F
-.195(ex)33.336 606 S(pressi).195 E 3.722 -.195(ve t)-.325 H 3.333
(han our choice of quad schema \(we').195 F 3.723 -.195(ve s)-.65 H
3.333(een some anno).195 F 3.333(ying e)-.13 F(xceptions,)-.195 E(ho)
33.336 621 Q(we)-.325 E -.195(ve)-.325 G(r\).).195 E .66
(The RISC philosoph)33.336 642 R 3.91(yi)-.065 G 3.91(sm)-3.91 G .66
(uch closer to that chosen for our quads, in that it is inherently)-3.91
F 1.238(3-address with a limited number of addressing modes.)33.336 657
R 1.238(Therefore we w)7.738 F 1.239(ould e)-.13 F 1.239(xpect that)
-.195 F .683(the assembly output w)33.336 672 R .683
(ould be similar to our quads, if not an e)-.13 F .683
(xpansion, and there w)-.195 F(ould)-.13 E .949(be little opportunity t\
o coalesce sequences of quads into smaller sequences of assembly)33.336
687 R(.)-.845 E 1.495(Thus in man)33.336 702 R 4.744(yw)-.195 G 1.494
(ays our job of instruction selection will be easier)-4.874 F 7.994(.R)
-.715 G 1.494(ecall our pre)-7.994 F(vious)-.325 E -.195(ex)33.336 717 S
(ample with quads:).195 E F1 27.6(%T1= LEA)90.936 729 R(ary)39.6 E 27.6
(%T2= MUL)90.936 741 R(i,4)39.6 E 0 Cg EP
%%Page: 8 8
%%BeginPageSetup
BP
%%EndPageSetup
/F0 9/Times-Roman@0 SF 140.742(ECE466:Compilers Unit)33.336 60 R(8/pg 8)
2.25 E(\2512019 Jef)144.405 E 2.25(fH)-.225 G(akner)-2.25 E/F1 10
/Courier@0 SF 27.6(%T3= ADD)90.936 117 R(%T1,%T2)39.6 E 27.6
(%T4= LOAD [%T3])90.936 129 R 27.6(%T5= ADD)90.936 141 R(%T4,1)39.6 E
21.6(STORE %T5,[%T3])148.536 153 R/F2 13/Times-Roman@0 SF .064
(In the X86 instruction set, we could access memory operands directly)
33.336 168 R 3.314(,b)-.845 G .064(ut in SP)-3.574 F .065(ARC only)
-1.196 F(re)33.336 183 Q(gister)-.195 E(-to-re)-.26 E 2.407
(gister operations are permitted.)-.195 F 4.486 -1.04(We w)8.907 H 2.406
(ill assume that during architecture-)1.04 F 1.413
(neutral optimization, an)33.336 198 R 4.663(yo)-.195 G 1.413
(pportunities for placing v)-4.663 F 1.413(ariables into virtual re)
-.325 F 1.414(gisters safely)-.195 F(ha)33.336 213 Q 4.058 -.195(ve b)
-.26 H 3.668(een identi\214ed and that code has been re-written to use \
the virtual re).195 F(gisters.)-.195 E .54(Therefore, an)33.336 228 R
3.79(yr)-.195 G .541(eferences remaining to memory operands are require\
d to be translated as)-3.79 F 1.091
(actual references to those memory operands.)33.336 243 R 3.171 -1.04
(To u)7.591 H 1.091(se the pattern-matching approach, we)1.04 F -.13(wo)
33.336 258 S(uld need to b).13 E
(uild a pattern for each of the three operand positions:)-.26 E F1
(Recognize)33.336 270 Q 9.6(Z=OP\(O\) localvar\(x\),Y)90.936 282 R
(Replace)33.336 294 Q 39.6(ld [%fp+offset\(x\)],%regN)90.936 306 R 39.6
(Z= OP\(O\))90.936 318 R(%regN,Y)27.6 E(Recognize)33.336 330 Q 39.6
(Z= OP\(O\))90.936 342 R(Y,localvar\(x\))27.6 E(Replace)33.336 354 Q
39.6(ld [%fp+offset\(x\)],%regN)90.936 366 R 39.6(Z= OP\(O\))90.936 378
R(Y,%regN)27.6 E(Recognize)33.336 390 Q 37.2(localvar\(z\)= OP\(O\))
90.936 402 R(X,Y)27.6 E(Replace)33.336 414 Q 21.6(OP\(O\) X,Y,%regN)
90.936 426 R 39.6(st %regN,[%fp+offset\(z\)])90.936 438 R(Recognize)
33.336 450 Q 15.6(%rega= LEA)90.936 462 R(localvar\(x\))39.6 E(Replace)
33.336 474 Q 33.6(add %fp,offset\(x\),%rega)90.936 486 R(Recognize)
33.336 498 Q 15.6(%regc= ADD)90.936 510 R(%rega,%regb)39.6 E(Replace)
33.336 522 Q 33.6(add %rega,%regb,%regc)90.936 534 R(Recognize)33.336
546 Q 15.6(%regb= ADD)90.936 558 R(%rega,imm\(I\))39.6 E
({Caveat: -4096<=I<4096\))206.136 570 Q(Replace)33.336 582 Q 33.6
(add %rega,I,%regb)90.936 594 R F2 .358(Here OP\(O\) represents an)
33.336 615 R 3.608(yw)-.195 G .358
(ildcard quad operation, X/Y/Z are wildcard operands which)-3.608 F .248
(could be %T temporaries, immediate v)33.336 630 R .248
(alues, or local or global v)-.325 F .248(ariables\), and %re)-.325 F
.248(gN is a)-.195 F(ne)33.336 645 Q 4.275(wv)-.325 G 1.025(irtual re)
-4.275 F 1.025(gister which is assigned on the \215y)-.195 F 7.525(.A)
-.845 G 1.025(pplying these patterns and assuming)-7.525 F(that the of)
33.336 660 Q(fset of v)-.325 E(ariable i is -84 and the of)-.325 E
(fset of ary is -80:)-.325 E F1 33.6(add %fp,-80,%T1)90.936 672 R 39.6
(ld [%fp-84],%T6)90.936 684 R 33.6(mul %T6,4,%T2)90.936 696 R 33.6
(add %T1,%T2,%T3)90.936 708 R 39.6(ld [%T3],%T4)90.936 720 R 33.6
(add %T4,1,%T5)90.936 732 R 0 Cg EP
%%Page: 9 9
%%BeginPageSetup
BP
%%EndPageSetup
/F0 9/Times-Roman@0 SF 140.742(ECE466:Compilers Unit)33.336 60 R(8/pg 9)
2.25 E(\2512019 Jef)144.405 E 2.25(fH)-.225 G(akner)-2.25 E/F1 10
/Courier@0 SF 39.6(st %T5,[%T3])90.936 117 R/F2 13/Times-Roman@0 SF .565
(As discussed in Unit 7, SP)33.336 138 R .565(ARC instructions are al)
-1.196 F -.13(wa)-.13 G .565(ys a single 32-bit w).13 F .565
(ord, and there is)-.13 F 3.577(no room for immediate v)33.336 153 R
3.578(alues other than small ones.)-.325 F 3.578(13 bits are a)10.078 F
-.325(va)-.26 G 3.578(ilable for an).325 F .372(immediate v)33.336 168 R
.372(alue, and since the v)-.325 F .371(alue is sign-e)-.325 F .371
(xtended to 32 bits, this limits the range of I)-.195 F
(to -4096 through +4095.)33.336 183 Q 2.08 -1.04(To h)6.5 H(andle lar)
1.04 E(ger constants:)-.234 E F1(Match)33.336 195 Q 15.6(%regb= OP\(O\))
90.936 207 R(%rega,immI)27.6 E(Replace)33.336 219 Q 21.6
(sethi %hi\(I\),%regN)90.936 231 R 39.6(or %regN,%lo\(I\),%regN)90.936
243 R 21.6(OP\(O\) %rega,%regN,%regb)90.936 255 R F2 4.16(As)33.336 276
S .91(imilar pattern needs to be in place for accessing memory operands\
 which are global,)-4.16 F(as there is no w)33.336 291 Q
(ay to specify the 32-bit address directly)-.13 E(.)-.845 E/F3 13
/Times-Bold@0 SF(Instruction Scheduling)203.948 321 Q F2 2.788
(The objecti)33.336 357 R 3.178 -.195(ve o)-.325 H 6.038(fi).195 G 2.787
(nstruction scheduling is to change the order of instructions, where)
-6.038 F .199(possible, to impro)33.336 372 R .589 -.195(ve t)-.195 H
.199(he o).195 F -.195(ve)-.195 G .199
(rlap of operations and minimize the total time.).195 F .2
(In order to do)6.7 F 4.01(this, the compiler constructs an internal mo\
del of the speci\214c processor')33.336 387 R 7.259(sp)-.715 G(ipeline)
-7.259 E 2.194(properties, such as the number of e)33.336 402 R -.195
(xe)-.195 G 2.194(cution units a).195 F -.325(va)-.26 G 2.194
(ilable, the e).325 F -.195(xe)-.195 G 2.194(cution time of the).195 F
-.325(va)33.336 417 S 1.414(rious instructions, etc.).325 F 1.414
(It then adjusts the timing of instruction issue to minimize the)7.914 F
3.367(delay of an instruction which stalls because it is w)33.336 432 R
3.367(aiting for a result from another)-.13 F(instruction.)33.336 447 Q
2.603 -1.04(We w)33.336 468 T .523(ill not ha)1.04 F .913 -.195(ve t)
-.26 H .523(ime during this course to discuss instruction scheduling.)
.195 F .522(The reader is)7.022 F(referred to the Dragon te)33.336 483 Q
(xtbook for an introductory presentation.)-.195 E F3
(Register Allocation)214.081 513 Q F2 1.64
(The instruction selection phase can re)33.336 549 R 1.641
(write the generic IR into one in which there is a)-.325 F 1.341
(clear distinction between memory symbols and re)33.336 564 R 1.341
(gisters, because at this point it kno)-.195 F(ws)-.325 E 2.796(the tar)
33.336 579 R 2.796
(get architecture and the means used to access parameters, local v)-.234
F 2.797(ariables, etc.)-.325 F(Ho)33.336 594 Q(we)-.325 E -.195(ve)-.325
G 1.174 -.52(r, i).195 H 3.384(ti).52 G 3.384(sn)-3.384 G .133
(ot yet practical to allocate speci\214c re)-3.384 F 3.383(gisters. As)
-.195 F .133(we ha)3.383 F .523 -.195(ve s)-.26 H .133(een, we can use)
.195 F(virtual re)33.336 609 Q(gisters such as %re)-.195 E
(g0 and complete instruction selection.)-.195 E 2.212(Then, the job f)
33.336 630 R 2.212(alls to the re)-.13 F 2.212(gister allocator to mak)
-.195 F 5.463(et)-.13 G 2.213(he best use of the real re)-5.463 F
(gisters,)-.195 E 2.6(mapping the virtual re)33.336 645 R 2.6
(gisters to real re)-.195 F 2.6
(gisters, and inserting additional instructions as)-.195 F 4.228
(needed. The)33.336 660 R .978(set of ph)4.228 F .978(ysical re)-.065 F
.978(gisters is usually limited, which mak)-.195 F .978
(es this an interesting)-.13 F(problem.)33.336 675 Q .654
(In order to do its job, the re)33.336 696 R .654
(gister allocator must be able to track the "li)-.195 F -.195(ve)-.325 G
.653(ness" of virtual).195 F(re)33.336 711 Q 1.837
(gisters, i.e. could the v)-.195 F 1.838(alue in that virtual re)-.325 F
1.838(gister be used at a subsequent reachable)-.195 F 2.945
(point in the code prior to the virtual re)33.336 726 R 2.945
(gister being o)-.195 F -.195(ve)-.195 G 6.195(rwritten. In).195 F 2.945
(Unit 6, we sa)6.195 F(w)-.195 E
(algorithms for analyzing this information.)33.336 741 Q 0 Cg EP
%%Page: 10 10
%%BeginPageSetup
BP
%%EndPageSetup
/F0 9/Times-Roman@0 SF 138.492(ECE466:Compilers Unit)33.336 60 R
(8/pg 10)2.25 E(\2512019 Jef)142.155 E 2.25(fH)-.225 G(akner)-2.25 E/F1
13/Times-Bold@0 SF(Local Register Allocation)196.928 120 Q/F2 13
/Times-Roman@0 SF 6.408(Al)33.336 156 S 3.158(ocal re)-6.408 F 3.158
(gister allocator w)-.195 F 3.158
(orks only within a single basic block, and w)-.13 F 3.158(orks on an)
-.13 F 4.488(operation-by-operation basis.)33.336 171 R 4.488
(It maintains a "scoreboard" representing the pool of)10.988 F .499
(general-purpose re)33.336 186 R 3.749(gisters. F)-.195 F .499
(or each re)-.195 F(gister)-.195 E 3.749(,w)-.52 G 3.749(et)-3.749 G .5
(rack if the re)-3.749 F .5(gister is currently a)-.195 F -.325(va)-.26
G(ilable).325 E(or allocated to a speci\214c name \(virtual re)33.336
201 Q 3.25(gister\). The)-.195 F(algorithm can be summarized:)3.25 E/F3
10/Courier@0 SF 64.8(for\(i=1;i<=N;i++\) //opcodes)90.936 225 R
(numbered 1..N)6 E({)90.936 237 Q(consider opcode i,)148.536 249 Q
(if src1 is a virtual register:)148.536 261 Q(rx=ensure\(src1\))206.136
273 Q(rewrite src1 to use %rx)206.136 285 Q
(if src2 is a virtual register:)148.536 297 Q(ry=ensure\(src2\))206.136
309 Q(rewrite src2 to use %ry)206.136 321 Q
(if \(src1 is dead after operation i\))148.536 333 Q(mark rx free)
206.136 345 Q(if \(src2 is dead after operation i\))148.536 357 Q
(mark ry free)206.136 369 Q(if dst is a virtual register:)148.536 381 Q
(rd=allocate\(dst\))206.136 393 Q(rewrite dst as %rd)206.136 405 Q
(mark %rd as dirty)206.136 417 Q(})90.936 429 Q
(spill all dirty registers live at end of this BB)90.936 441 Q
(ensure\(vr\))45.336 465 Q({)45.336 477 Q
(if a register is already allocated to vr, return that register)148.536
489 Q(r=allocate\(vr\))148.536 501 Q
(emit code to move vr from its backing store to r)148.536 513 Q
(return r)148.536 525 Q(})45.336 537 Q(allocate\(vr\))45.336 561 Q({)
45.336 573 Q(pick an available free physical register r)148.536 585 Q
(if there is none:)148.536 597 Q
(pick the "best" physical register r to spill)206.136 609 Q
(it currently contains virtual register X)206.136 621 Q
(if \(r is dirty\))206.136 633 Q
(emit code to store %r to backing store for X)263.736 645 Q
(mark register r as containing vr)148.536 657 Q(return r)148.536 669 Q
(})51.336 681 Q(*******************************************************\
*******************)33.336 705 Q(The "Scoreboard", example for X86-32)
33.336 717 Q(Phys Reg)33.336 729 Q 3.6(Contains C/D)9.6 F
(Flags/properties)39.6 E
(----------------------------------------------------------------)33.336
741 Q 0 Cg EP
%%Page: 11 11
%%BeginPageSetup
BP
%%EndPageSetup
/F0 9/Times-Roman@0 SF 138.492(ECE466:Compilers Unit)33.336 60 R
(8/pg 11)2.25 E(\2512019 Jef)142.155 E 2.25(fH)-.225 G(akner)-2.25 E/F1
10/Courier@0 SF 33.6(eax %T1)33.336 117 R 21.6
(Clean group_scratch,func_rv)97.2 F 33.6(ebx -free-)33.336 129 R 33.6
(--- group_longterm)79.2 F 33.6(ecx i{lvar})33.336 141 R 21.6
(Dirty group_scratch)73.2 F 33.6(edx z{global})33.336 153 R 21.6
(Clean group_scratch)61.2 F 33.6(edi -free-)33.336 165 R 33.6
(--- group_longterm)79.2 F 33.6(esi %T2)33.336 177 R 21.6
(Dirty group_longterm)97.2 F(******************************************\
********************************)33.336 189 Q/F2 13/Times-Bold@0 SF
(Register Spills)227.432 216 Q/F3 13/Times-Roman@0 SF 1.001
(Consider each operation in the basic block.)33.336 252 R 1.001
(If the number of virtual re)7.501 F 1.001(gisters which are)-.195 F(li)
33.336 267 Q 1.326 -.195(ve a)-.325 H 4.186(tt).195 G .936(hat point e)
-4.186 F .936(xceeds the number of ph)-.195 F .936(ysical re)-.065 F
.936(gisters in the pool, then the allocator)-.195 F 1.098
(will be forced to)33.336 282 R F2(spill)4.348 E F3 4.348(ar)4.348 G
-.195(eg)-4.348 G(ister).195 E 7.598(.T)-.715 G 1.098
(he allocator will only spill li)-7.598 F 1.487 -.195(ve v)-.325 H 1.097
(irtual re).195 F 4.347(gisters. If)-.195 F(a)4.347 E 1.338(virtual re)
33.336 297 R 1.338
(gister is dead after a particular operation, then it w)-.195 F 1.338
(ould be mark)-.13 F 1.338(ed as free.)-.13 F(In)7.839 E .201
(order to spill a virtual re)33.336 312 R .2(gister which is li)-.195 F
-.195(ve)-.325 G 3.45(,i).195 G .2(ts contents must be sa)-3.45 F -.195
(ve)-.26 G 3.45(ds).195 G(ome)-3.45 E 3.45(where. Later)-.325 F 1.579
(on, when the v)33.336 327 R 1.58(alue is needed ag)-.325 F 1.58
(ain as a source operand, it will be fetched back into a)-.065 F(ph)
33.336 342 Q .276(ysical re)-.065 F(gister)-.195 E 6.776(.T)-.715 G .276
(he backing location will either be an absolute memory address for the)
-6.776 F 2.389(case of global v)33.336 357 R 2.389
(ariables, or a place on the local stack frame for local and temporary)
-.325 F -.325(va)33.336 372 S 3.486(riables. The).325 F(re)3.486 E .236
(gister allocator is architecture-speci\214c so it kno)-.195 F .236
(ws ho)-.325 F 3.486(wt)-.325 G 3.486(ol)-3.486 G .236(oad and store)
-3.486 F(these v)33.336 387 Q(alues.)-.325 E .719(It w)33.336 408 R .719
(ould be unusual for a temporary v)-.13 F .719(ariable to spill.)-.325 F
.72(Most temps are short-li)7.219 F -.195(ve)-.325 G 3.97(d. If).195 F
(the)3.97 E(tar)33.336 423 Q 2.425(get architecture has a v)-.234 F
2.425(ery limited supply of re)-.195 F 2.425(gisters and is e)-.195 F
-.325(va)-.325 G 2.425(luating a comple).325 F(x)-.195 E -.195(ex)33.336
438 S 1.571(pression, it is possible that this will happen.).195 F 1.571
(Since temporaries don')8.071 F 4.821(th)-.234 G -2.925 -.26(av e)-4.821
H 4.821(ad)5.081 G(e\214ned)-4.821 E .306(place in memory)33.336 453 R
3.555(,w)-.845 G 3.555(ew)-3.555 G .305
(ill need to create phantom local v)-3.555 F .305
(ariable slots to hold them.)-.325 F -1.04(We)6.805 G -.13('l)1.04 G(l)
.13 E .371(need to tally up the highest number of these spill slots tha\
t are in use at a gi)33.336 468 R -.195(ve)-.325 G 3.622(nt).195 G .372
(ime, and)-3.622 F(reserv)33.336 483 Q 3.25(et)-.195 G(hat man)-3.25 E
3.25(ys)-.195 G(lots in our function prologue as if the)-3.25 E 3.25(yw)
-.195 G(ere declared local v)-3.25 E(ariables.)-.325 E 3.064
(Often the re)33.336 504 R 3.064
(gister allocator must deal with multiple groups of re)-.195 F 3.063
(gisters which serv)-.195 F(e)-.195 E(dif)33.336 519 Q .279
(ferent purposes and must be dealt with as separate allocation pools.)
-.325 F .279(E.g. \215oating point)6.779 F 1.094(vs inte)33.336 534 R
1.094(ger re)-.195 F 4.344(gisters. The)-.195 F(re)4.344 E 1.094
(gister allocator can also use li)-.195 F -.195(ve)-.325 G 1.094
(ness, or whether a particular).195 F 1.522(virtual re)33.336 549 R
1.523(gister is a temporary vs a source program name, as hints to)-.195
F -.13(wa)-.325 G 1.523(rds steering the).13 F 1.898(allocation to)
33.336 564 R -.13(wa)-.325 G 1.898(rds a particular group of re).13 F
5.148(gisters. E.g.)-.195 F 1.898(on the X86 architecture, short-)5.148
F(li)33.336 579 Q -.195(ve)-.325 G 4.128(dv).195 G .878
(alues should gra)-4.453 F .878(vitate to)-.26 F -.13(wa)-.325 G .878
(rds the re).13 F .879(gister set \(%eax, %ecx, %edx\) because these)
-.195 F .36(are caller)33.336 594 R(-sa)-.26 E .75 -.195(ve r)-.26 H
-.195(eg).195 G .36(isters and are e).195 F .359
(xpected to be lost across function calls.)-.195 F(Re)6.859 E .359
(gisters in the)-.195 F .957
(\(%ebx, %edi, %esi\) set should be used for longer)33.336 609 R .957
(-term v)-.26 F .957(alues as the)-.325 F 4.207(yd)-.195 G 4.207(on)
-4.207 G .958(ot need to be)-4.207 F(sa)33.336 624 Q -.195(ve)-.26 G
5.782(da).195 G 2.532(nd restored after each function call.)-5.782 F
(Lik)9.032 E -.325(ew)-.13 G 2.532(ise on the SP).325 F 2.531
(ARC architecture we)-1.196 F 5.416
(should use %g1..%g7 for short-term v)33.336 639 R 5.416
(alues, %l0..%l7 for long-term v)-.325 F 5.416(alues, and)-.325 F
(%o0..%o7 for v)33.336 654 Q(alues which are to be used as ar)-.325 E
(guments to a function call.)-.234 E .63(As a further impro)33.336 675 R
-.195(ve)-.195 G .63(ment, the re).195 F .63
(gister allocator can track if a particular ph)-.195 F .63(ysical re)
-.065 F(gister)-.195 E 1.732(is "dirty".)33.336 690 R 1.732(If a v)8.232
F 1.733(alue has been written into that re)-.325 F 1.733
(gister and then the li)-.195 F 2.123 -.195(ve v)-.325 H 1.733
(alue in that)-.13 F(re)33.336 705 Q 1.143
(gister needs to be spilled, a write-back to backing store is needed.)
-.195 F 1.143(But if the v)7.643 F 1.143(alue is)-.325 F .302
(clean, then an identical v)33.336 720 R .303(alue already e)-.325 F
.303(xists in backing store and no write-back is needed.)-.195 F
(The allocator may then prefer to spill clean v)33.336 735 Q(alues o)
-.325 E -.195(ve)-.195 G 3.25(rd).195 G(irty ones.)-3.25 E 0 Cg EP
%%Page: 12 12
%%BeginPageSetup
BP
%%EndPageSetup
/F0 9/Times-Roman@0 SF 138.492(ECE466:Compilers Unit)33.336 60 R
(8/pg 12)2.25 E(\2512019 Jef)142.155 E 2.25(fH)-.225 G(akner)-2.25 E/F1
13/Times-Roman@0 SF 2.591(Because the local allocator looks only at one\
 basic block, it does not mak)33.336 120 R 5.84(ee)-.13 G -.325<668c>
-5.84 G(cient).325 E .104(decisions about which re)33.336 135 R .104
(gisters to spill.)-.195 F .104
(One possible metric is to look at all of the virtual)6.604 F(re)33.336
150 Q .254(gisters currently in ph)-.195 F .254(ysical re)-.065 F .254
(gisters and pick the one whose use as a source operand is)-.195 F
(furthest a)33.336 165 Q -.13(wa)-.195 G 3.25(yi).13 G 3.25(nt)-3.25 G
(he basic block.)-3.25 E .227(Another serious problem of a local alloca\
tor is that it must spill all li)33.336 186 R .618 -.195(ve v)-.325 H
.228(irtual re).195 F .228(gisters at)-.195 F
(the end of the basic block.)33.336 201 Q(Consider:)6.5 E/F2 10
/Courier@0 SF(BB1:)33.336 213 Q 21.6(%VRx= ADD)90.936 225 R(a,b)39.6 E
27.6(BRxx BB3)90.936 237 R(BB2:)33.336 249 Q 21.6(%VRx= ADD)90.936 261 R
(q,r)39.6 E 27.6(BRxx BB3)90.936 273 R(...)90.936 285 Q(...)90.936 297 Q
(BB3:)33.336 309 Q 21.6(%VRz= ADD)90.936 321 R(%VRx,%VRy)39.6 E F1 .47
(The virtual re)33.336 336 R .47(gister %VRx is li)-.195 F .86 -.195
(ve o)-.325 H 3.72(ne).195 G .47
(xit from both BB1 and BB2, because control \215o)-3.915 F(ws)-.325 E
1.759
(from each to BB3 and %VRx is used in BB3 without being rede\214ned.)
33.336 351 R 1.76(Upon entry to)8.26 F .524(BB3, the "scoreboard" is bl\
ank, and %VRx must be fetched from its backing store into a)33.336 366 R
(ph)33.336 381 Q 1.63(ysical re)-.065 F 1.63(gister before being used.)
-.195 F 1.63(Therefore, the updated v)8.13 F 1.631(alue of %VRx must ha)
-.325 F -.195(ve)-.26 G(pre)33.336 396 Q .722(viously been placed in th\
at memory location prior to branching out of BB1 and BB2.)-.325 F .883
(One might think that this can be a)33.336 411 R -.26(vo)-.26 G .883
(ided by simply assigning the same ph).26 F .884(ysical re)-.065 F
(gister)-.195 E .502(to %VRx in both basic blocks, b)33.336 426 R .501
(ut since the local allocator w)-.26 F .501
(orks only on the local basic)-.13 F(block, it does not ha)33.336 441 Q
.39 -.195(ve t)-.26 H(he po).195 E(wer to do this.)-.325 E/F3 13
/Times-Bold@0 SF(Global Allocation)218.397 471 Q F1 1.712
(After performing li)33.336 507 R -.195(ve)-.325 G 1.712
(ness analysis on an entire function, we ha).195 F 2.102 -.195(ve a l)
-.26 H 1.713(ist of li).195 F 2.103 -.195(ve r)-.325 H(anges.).195 E
.191(DEF: A)33.336 522 R F3(li)3.441 E .451 -.13(ve r)-.13 H(ange).13 E
F1 .191
(is a contiguous range of quads \(or assembly language opcodes\) in one)
3.441 F .538(basic block where a gi)33.336 537 R -.195(ve)-.325 G 3.788
(nn).195 G .538(ame/virtual re)-3.788 F .539(gister is li)-.195 F -.195
(ve)-.325 G 7.039(.A).195 G(gi)-3.25 E -.195(ve)-.325 G 3.789(nv).195 G
.539(irtual re)-3.789 F .539(gister will ha)-.195 F -.195(ve)-.26 G
(one or more li)33.336 552 Q .39 -.195(ve r)-.325 H 3.25(anges. F).195 F
(or e)-.195 E(xample, we ha)-.195 E .39 -.195(ve t)-.26 H(he follo).195
E(wing li)-.325 E .39 -.195(ve r)-.325 H(ange data:).195 E F2 79.2
(%VR1: 1:1-5)90.936 564 R 79.2(%VR2: 1:4-7)90.936 588 R(2:3-8)206.136
600 Q 79.2(%VR3: 1:8-10)90.936 624 R(2:5-6)206.136 636 Q F1(No)33.336
651 Q 5.531(ww)-.325 G 5.531(ec)-5.531 G 2.281
(an construct a graph \(conceptually)-5.531 F 5.531(,i)-.845 G 5.531(td)
-5.531 G(oesn')-5.531 E 5.53(th)-.234 G -2.925 -.26(av e)-5.53 H 2.28
(to be implemented as a)5.79 F 2.056
(graph\) which represents the interference among li)33.336 666 R 2.446
-.195(ve r)-.325 H 5.306(anges. Each).195 F 2.056(virtual re)5.306 F
2.057(gister is a)-.195 F 2.326(node, and if there is a \(non-direction\
al\) link to another node, it means that their li)33.336 681 R -.195(ve)
-.325 G(ranges o)33.336 696 Q -.195(ve)-.195 G(rlap at).195 E/F4 13
/Times-Italic@0 SF(some)3.25 E F1 3.25(point. Here)3.25 F
(is the graph for the three virtual re)3.25 E(gisters abo)-.195 E -.195
(ve)-.195 G(:).195 E 0 Cg EP
%%Page: 13 13
%%BeginPageSetup
BP
%%EndPageSetup
/F0 9/Times-Roman@0 SF 138.492(ECE466:Compilers Unit)33.336 60 R
(8/pg 13)2.25 E(\2512019 Jef)142.155 E 2.25(fH)-.225 G(akner)-2.25 E 0 0
216 362 -173.039 290 159.336 293.039 PBEGIN
%%BeginDocument: liverange1.eps
%!PS-Adobe-2.0 EPSF-2.0
%%Title: liverange1.fig
%%Creator: fig2dev Version 3.2 Patchlevel 4
%%CreationDate: Wed Apr 26 20:50:56 2017
%%For: hak@lex ()
%%BoundingBox: 0 0 362 290
%%Magnification: 1.0000
%%EndComments
/$F2psDict 200 dict def
$F2psDict begin
$F2psDict /mtrx matrix put
/col-1 {0 setgray} bind def
/col0 {0.000 0.000 0.000 srgb} bind def
/col1 {0.000 0.000 1.000 srgb} bind def
/col2 {0.000 1.000 0.000 srgb} bind def
/col3 {0.000 1.000 1.000 srgb} bind def
/col4 {1.000 0.000 0.000 srgb} bind def
/col5 {1.000 0.000 1.000 srgb} bind def
/col6 {1.000 1.000 0.000 srgb} bind def
/col7 {1.000 1.000 1.000 srgb} bind def
/col8 {0.000 0.000 0.560 srgb} bind def
/col9 {0.000 0.000 0.690 srgb} bind def
/col10 {0.000 0.000 0.820 srgb} bind def
/col11 {0.530 0.810 1.000 srgb} bind def
/col12 {0.000 0.560 0.000 srgb} bind def
/col13 {0.000 0.690 0.000 srgb} bind def
/col14 {0.000 0.820 0.000 srgb} bind def
/col15 {0.000 0.560 0.560 srgb} bind def
/col16 {0.000 0.690 0.690 srgb} bind def
/col17 {0.000 0.820 0.820 srgb} bind def
/col18 {0.560 0.000 0.000 srgb} bind def
/col19 {0.690 0.000 0.000 srgb} bind def
/col20 {0.820 0.000 0.000 srgb} bind def
/col21 {0.560 0.000 0.560 srgb} bind def
/col22 {0.690 0.000 0.690 srgb} bind def
/col23 {0.820 0.000 0.820 srgb} bind def
/col24 {0.500 0.190 0.000 srgb} bind def
/col25 {0.630 0.250 0.000 srgb} bind def
/col26 {0.750 0.380 0.000 srgb} bind def
/col27 {1.000 0.500 0.500 srgb} bind def
/col28 {1.000 0.630 0.630 srgb} bind def
/col29 {1.000 0.750 0.750 srgb} bind def
/col30 {1.000 0.880 0.880 srgb} bind def
/col31 {1.000 0.840 0.000 srgb} bind def

end
save
newpath 0 290 moveto 0 0 lineto 362 0 lineto 362 290 lineto closepath clip newpath
-125.5 324.6 translate
1 -1 scale

/cp {closepath} bind def
/ef {eofill} bind def
/gr {grestore} bind def
/gs {gsave} bind def
/sa {save} bind def
/rs {restore} bind def
/l {lineto} bind def
/m {moveto} bind def
/rm {rmoveto} bind def
/n {newpath} bind def
/s {stroke} bind def
/sh {show} bind def
/slc {setlinecap} bind def
/slj {setlinejoin} bind def
/slw {setlinewidth} bind def
/srgb {setrgbcolor} bind def
/rot {rotate} bind def
/sc {scale} bind def
/sd {setdash} bind def
/ff {findfont} bind def
/sf {setfont} bind def
/scf {scalefont} bind def
/sw {stringwidth} bind def
/tr {translate} bind def
/tnt {dup dup currentrgbcolor
  4 -2 roll dup 1 exch sub 3 -1 roll mul add
  4 -2 roll dup 1 exch sub 3 -1 roll mul add
  4 -2 roll dup 1 exch sub 3 -1 roll mul add srgb}
  bind def
/shd {dup dup currentrgbcolor 4 -2 roll mul 4 -2 roll mul
  4 -2 roll mul srgb} bind def
 /DrawEllipse {
	/endangle exch def
	/startangle exch def
	/yrad exch def
	/xrad exch def
	/y exch def
	/x exch def
	/savematrix mtrx currentmatrix def
	x y tr xrad yrad sc 0 0 1 startangle endangle arc
	closepath
	savematrix setmatrix
	} def

/$F2psBegin {$F2psDict begin /$F2psEnteredState save def} def
/$F2psEnd {$F2psEnteredState restore end} def

$F2psBegin
10 setmiterlimit
0 slj 0 slc
 0.06000 0.06000 sc
%
% Fig objects follow
%
% 
% here starts figure with depth 50
% Ellipse
7.500 slw
n 3000 1500 900 900 0 360 DrawEllipse gs col1 s gr

% Ellipse
n 7200 1575 900 900 0 360 DrawEllipse gs col0 s gr

% Ellipse
n 4425 4503 900 900 0 360 DrawEllipse gs col1 s gr

% Polyline
n 3900 1500 m
 6300 1500 l gs col0 s gr 
% Polyline
n 6750 2400 m
 5175 3975 l gs col0 s gr 
/Times-Roman ff 200.00 scf sf
3000 1575 m
gs 1 -1 sc (%VR1) dup sw pop 2 div neg 0 rm  col0 sh gr
/Times-Roman ff 200.00 scf sf
4425 4575 m
gs 1 -1 sc (%VR3) dup sw pop 2 div neg 0 rm  col0 sh gr
/Times-Roman ff 200.00 scf sf
7200 1575 m
gs 1 -1 sc (%VR2) dup sw pop 2 div neg 0 rm  col0 sh gr
/Times-Roman ff 200.00 scf sf
8025 900 m
gs 1 -1 sc (A) dup sw pop 2 div neg 0 rm  col0 sh gr
/Times-Roman ff 200.00 scf sf
3825 900 m
gs 1 -1 sc (B) dup sw pop 2 div neg 0 rm  col0 sh gr
/Times-Roman ff 200.00 scf sf
4800 3525 m
gs 1 -1 sc (B) dup sw pop 2 div neg 0 rm  col0 sh gr
% here ends figure;
$F2psEnd
rs
showpage
%%EndDocument
end PEND/F1 13/Times-Roman@0 SF(Gi)33.336 314.039 Q -.195(ve)-.325 G
6.536(nt).195 G 3.287(his interference graph, global re)-6.536 F 3.287
(gister allocation is the classic map or graph)-.195 F 3.541
(coloring problem.)33.336 329.039 R 3.541(If there are)10.041 F/F2 13
/Times-Italic@0 SF(n)6.791 E F1(re)6.791 E 3.541(gisters a)-.195 F -.325
(va)-.26 G 3.541(ilable for general use \(as opposed to).325 F 1.027
(specialized re)33.336 344.039 R 1.027(gisters, or re)-.195 F 1.027
(gisters which are held in reserv)-.195 F 4.277(ef)-.195 G 1.027
(or certain purposes\), then is)-4.277 F .371
(the interference graph colorable with just)33.336 359.039 R F2(n)3.621
E F1 .37(colors, such that for each node, each adjacent)3.621 F 3.374
(node is a dif)33.336 374.039 R 3.375(ferent color?)-.325 F 3.375
(If so, then all of the names under consideration can be)9.875 F 1.89
(permanently allocated to those general-purpose re)33.336 389.039 R
5.139(gisters. If)-.195 F 1.889(not, there are a v)5.139 F 1.889
(ariety of)-.325 F(algorithms to pick which names go into which re)
33.336 404.039 Q(gisters.)-.195 E .525(In the follo)33.336 425.039 R
.525(wing e)-.325 F .525(xamples, let us assume that we ha)-.195 F .915
-.195(ve t)-.26 H .525(hree re).195 F .525(gisters to w)-.195 F .526
(ork with called)-.13 F 1.188(A, B and C.)33.336 440.039 R 1.188
(In the e)7.688 F 1.187(xample abo)-.195 F -.195(ve)-.195 G 4.437(,w)
.195 G 4.437(ec)-4.437 G 1.187(an color the graph with just tw)-4.437 F
4.437(oc)-.13 G 1.187(olors, say A)-4.437 F 5.564(and B.)33.336 455.039
R(No)12.064 E 8.814(ww)-.325 G 8.814(ei)-8.814 G 5.564
(ntroduce virtual re)-8.814 F 5.564(gisters %VR4 and %VR5 which ha)-.195
F 5.954 -.195(ve t)-.26 H(he).195 E(interferences depicted belo)33.336
470.039 Q(w:)-.325 E 0 0 216 394 -245.604 448 159.336 736.643 PBEGIN
%%BeginDocument: liverange2.eps
%!PS-Adobe-3.0 EPSF-3.0
%%Title: liverange2.fig
%%Creator: fig2dev Version 3.2 Patchlevel 5e
%%CreationDate: Thu Apr 25 20:35:45 2019
%%For: hak@lex ()
%%BoundingBox: 0 0 394 448
%Magnification: 1.0000
%%EndComments
%%BeginProlog
/$F2psDict 200 dict def
$F2psDict begin
$F2psDict /mtrx matrix put
/col-1 {0 setgray} bind def
/col0 {0.000 0.000 0.000 srgb} bind def
/col1 {0.000 0.000 1.000 srgb} bind def
/col2 {0.000 1.000 0.000 srgb} bind def
/col3 {0.000 1.000 1.000 srgb} bind def
/col4 {1.000 0.000 0.000 srgb} bind def
/col5 {1.000 0.000 1.000 srgb} bind def
/col6 {1.000 1.000 0.000 srgb} bind def
/col7 {1.000 1.000 1.000 srgb} bind def
/col8 {0.000 0.000 0.560 srgb} bind def
/col9 {0.000 0.000 0.690 srgb} bind def
/col10 {0.000 0.000 0.820 srgb} bind def
/col11 {0.530 0.810 1.000 srgb} bind def
/col12 {0.000 0.560 0.000 srgb} bind def
/col13 {0.000 0.690 0.000 srgb} bind def
/col14 {0.000 0.820 0.000 srgb} bind def
/col15 {0.000 0.560 0.560 srgb} bind def
/col16 {0.000 0.690 0.690 srgb} bind def
/col17 {0.000 0.820 0.820 srgb} bind def
/col18 {0.560 0.000 0.000 srgb} bind def
/col19 {0.690 0.000 0.000 srgb} bind def
/col20 {0.820 0.000 0.000 srgb} bind def
/col21 {0.560 0.000 0.560 srgb} bind def
/col22 {0.690 0.000 0.690 srgb} bind def
/col23 {0.820 0.000 0.820 srgb} bind def
/col24 {0.500 0.190 0.000 srgb} bind def
/col25 {0.630 0.250 0.000 srgb} bind def
/col26 {0.750 0.380 0.000 srgb} bind def
/col27 {1.000 0.500 0.500 srgb} bind def
/col28 {1.000 0.630 0.630 srgb} bind def
/col29 {1.000 0.750 0.750 srgb} bind def
/col30 {1.000 0.880 0.880 srgb} bind def
/col31 {1.000 0.840 0.000 srgb} bind def

end

/cp {closepath} bind def
/ef {eofill} bind def
/gr {grestore} bind def
/gs {gsave} bind def
/sa {save} bind def
/rs {restore} bind def
/l {lineto} bind def
/m {moveto} bind def
/rm {rmoveto} bind def
/n {newpath} bind def
/s {stroke} bind def
/sh {show} bind def
/slc {setlinecap} bind def
/slj {setlinejoin} bind def
/slw {setlinewidth} bind def
/srgb {setrgbcolor} bind def
/rot {rotate} bind def
/sc {scale} bind def
/sd {setdash} bind def
/ff {findfont} bind def
/sf {setfont} bind def
/scf {scalefont} bind def
/sw {stringwidth} bind def
/tr {translate} bind def
/tnt {dup dup currentrgbcolor
  4 -2 roll dup 1 exch sub 3 -1 roll mul add
  4 -2 roll dup 1 exch sub 3 -1 roll mul add
  4 -2 roll dup 1 exch sub 3 -1 roll mul add srgb}
  bind def
/shd {dup dup currentrgbcolor 4 -2 roll mul 4 -2 roll mul
  4 -2 roll mul srgb} bind def
 /DrawEllipse {
	/endangle exch def
	/startangle exch def
	/yrad exch def
	/xrad exch def
	/y exch def
	/x exch def
	/savematrix mtrx currentmatrix def
	x y tr xrad yrad sc 0 0 1 startangle endangle arc
	closepath
	savematrix setmatrix
	} def

/$F2psBegin {$F2psDict begin /$F2psEnteredState save def} def
/$F2psEnd {$F2psEnteredState restore end} def

/pageheader {
save
newpath 0 448 moveto 0 0 lineto 394 0 lineto 394 448 lineto closepath clip newpath
-125.5 483.5 translate
1 -1 scale
$F2psBegin
10 setmiterlimit
0 slj 0 slc
 0.06000 0.06000 sc
} bind def
/pagefooter {
$F2psEnd
restore
} bind def
%%EndProlog
pageheader
%
% Fig objects follow
%
% 
% here starts figure with depth 50
% Ellipse
7.500 slw
n 3000 1500 900 900 0 360 DrawEllipse gs col1 s gr

% Ellipse
n 7200 1575 900 900 0 360 DrawEllipse gs col0 s gr

% Ellipse
n 4425 4503 900 900 0 360 DrawEllipse gs col1 s gr

% Ellipse
n 4357 7152 900 900 0 360 DrawEllipse gs col4 s gr

% Ellipse
n 7737 4505 900 900 0 360 DrawEllipse gs col1 s gr

% Polyline
0 slj
0 slc
n 3900 1500 m
 6300 1500 l gs col0 s gr 
% Polyline
n 6750 2400 m
 5175 3975 l gs col0 s gr 
% Polyline
n 2925 2400 m
 3675 6525 l gs col0 s gr 
% Polyline
n 4350 6300 m
 4425 5400 l gs col0 s gr 
% Polyline
n 7350 2475 m
 7650 3600 l gs col0 s gr 
% Polyline
n 7275 5250 m
 5250 6975 l gs col0 s gr 
% Polyline
n 6975 2475 m
 4875 6450 l gs col0 s gr 
/Times-Roman ff 200.00 scf sf
3000 1575 m
gs 1 -1 sc (%VR1) dup sw pop 2 div neg 0 rm  col0 sh gr
/Times-Roman ff 200.00 scf sf
4425 4575 m
gs 1 -1 sc (%VR3) dup sw pop 2 div neg 0 rm  col0 sh gr
/Times-Roman ff 200.00 scf sf
7200 1575 m
gs 1 -1 sc (%VR2) dup sw pop 2 div neg 0 rm  col0 sh gr
/Times-Roman ff 200.00 scf sf
8025 900 m
gs 1 -1 sc (A) dup sw pop 2 div neg 0 rm  col0 sh gr
/Times-Roman ff 200.00 scf sf
3825 900 m
gs 1 -1 sc (B) dup sw pop 2 div neg 0 rm  col0 sh gr
/Times-Roman ff 200.00 scf sf
4800 3525 m
gs 1 -1 sc (B) dup sw pop 2 div neg 0 rm  col0 sh gr
/Times-Roman ff 200.00 scf sf
5250 6675 m
gs 1 -1 sc (C) dup sw pop 2 div neg 0 rm  col0 sh gr
/Times-Roman ff 200.00 scf sf
7650 4650 m
gs 1 -1 sc (%VR5) dup sw pop 2 div neg 0 rm  col0 sh gr
/Times-Roman ff 200.00 scf sf
4275 7275 m
gs 1 -1 sc (%VR4) dup sw pop 2 div neg 0 rm  col0 sh gr
/Times-Roman ff 200.00 scf sf
8400 3675 m
gs 1 -1 sc (B) dup sw pop 2 div neg 0 rm  col0 sh gr
% here ends figure;
pagefooter
showpage
%%Trailer
%EOF
%%EndDocument
end PEND 0 Cg EP
%%Page: 14 14
%%BeginPageSetup
BP
%%EndPageSetup
/F0 9/Times-Roman@0 SF 138.492(ECE466:Compilers Unit)33.336 60 R
(8/pg 14)2.25 E(\2512019 Jef)142.155 E 2.25(fH)-.225 G(akner)-2.25 E/F1
13/Times-Roman@0 SF 4.814 -1.04(We c)33.336 120 T 2.733(an still color \
this graph with three colors, so it is possible to allocate re)1.04 F
(gisters)-.195 E(without spilling.)33.336 135 Q(No)6.5 E 3.25(ww)-.325 G
3.25(ei)-3.25 G(ntroduce an interference between VR3 and 5:)-3.25 E 0 0
216 394 -245.604 448 159.336 401.604 PBEGIN
%%BeginDocument: liverange3.eps
%!PS-Adobe-3.0 EPSF-3.0
%%Title: liverange3.fig
%%Creator: fig2dev Version 3.2 Patchlevel 5e
%%CreationDate: Thu Apr 25 20:35:19 2019
%%For: hak@lex ()
%%BoundingBox: 0 0 394 448
%Magnification: 1.0000
%%EndComments
%%BeginProlog
/$F2psDict 200 dict def
$F2psDict begin
$F2psDict /mtrx matrix put
/col-1 {0 setgray} bind def
/col0 {0.000 0.000 0.000 srgb} bind def
/col1 {0.000 0.000 1.000 srgb} bind def
/col2 {0.000 1.000 0.000 srgb} bind def
/col3 {0.000 1.000 1.000 srgb} bind def
/col4 {1.000 0.000 0.000 srgb} bind def
/col5 {1.000 0.000 1.000 srgb} bind def
/col6 {1.000 1.000 0.000 srgb} bind def
/col7 {1.000 1.000 1.000 srgb} bind def
/col8 {0.000 0.000 0.560 srgb} bind def
/col9 {0.000 0.000 0.690 srgb} bind def
/col10 {0.000 0.000 0.820 srgb} bind def
/col11 {0.530 0.810 1.000 srgb} bind def
/col12 {0.000 0.560 0.000 srgb} bind def
/col13 {0.000 0.690 0.000 srgb} bind def
/col14 {0.000 0.820 0.000 srgb} bind def
/col15 {0.000 0.560 0.560 srgb} bind def
/col16 {0.000 0.690 0.690 srgb} bind def
/col17 {0.000 0.820 0.820 srgb} bind def
/col18 {0.560 0.000 0.000 srgb} bind def
/col19 {0.690 0.000 0.000 srgb} bind def
/col20 {0.820 0.000 0.000 srgb} bind def
/col21 {0.560 0.000 0.560 srgb} bind def
/col22 {0.690 0.000 0.690 srgb} bind def
/col23 {0.820 0.000 0.820 srgb} bind def
/col24 {0.500 0.190 0.000 srgb} bind def
/col25 {0.630 0.250 0.000 srgb} bind def
/col26 {0.750 0.380 0.000 srgb} bind def
/col27 {1.000 0.500 0.500 srgb} bind def
/col28 {1.000 0.630 0.630 srgb} bind def
/col29 {1.000 0.750 0.750 srgb} bind def
/col30 {1.000 0.880 0.880 srgb} bind def
/col31 {1.000 0.840 0.000 srgb} bind def

end

/cp {closepath} bind def
/ef {eofill} bind def
/gr {grestore} bind def
/gs {gsave} bind def
/sa {save} bind def
/rs {restore} bind def
/l {lineto} bind def
/m {moveto} bind def
/rm {rmoveto} bind def
/n {newpath} bind def
/s {stroke} bind def
/sh {show} bind def
/slc {setlinecap} bind def
/slj {setlinejoin} bind def
/slw {setlinewidth} bind def
/srgb {setrgbcolor} bind def
/rot {rotate} bind def
/sc {scale} bind def
/sd {setdash} bind def
/ff {findfont} bind def
/sf {setfont} bind def
/scf {scalefont} bind def
/sw {stringwidth} bind def
/tr {translate} bind def
/tnt {dup dup currentrgbcolor
  4 -2 roll dup 1 exch sub 3 -1 roll mul add
  4 -2 roll dup 1 exch sub 3 -1 roll mul add
  4 -2 roll dup 1 exch sub 3 -1 roll mul add srgb}
  bind def
/shd {dup dup currentrgbcolor 4 -2 roll mul 4 -2 roll mul
  4 -2 roll mul srgb} bind def
 /DrawEllipse {
	/endangle exch def
	/startangle exch def
	/yrad exch def
	/xrad exch def
	/y exch def
	/x exch def
	/savematrix mtrx currentmatrix def
	x y tr xrad yrad sc 0 0 1 startangle endangle arc
	closepath
	savematrix setmatrix
	} def

/$F2psBegin {$F2psDict begin /$F2psEnteredState save def} def
/$F2psEnd {$F2psEnteredState restore end} def

/pageheader {
save
newpath 0 448 moveto 0 0 lineto 394 0 lineto 394 448 lineto closepath clip newpath
-125.5 483.5 translate
1 -1 scale
$F2psBegin
10 setmiterlimit
0 slj 0 slc
 0.06000 0.06000 sc
} bind def
/pagefooter {
$F2psEnd
restore
} bind def
%%EndProlog
pageheader
%
% Fig objects follow
%
% 
% here starts figure with depth 50
% Ellipse
7.500 slw
n 3000 1500 900 900 0 360 DrawEllipse gs col1 s gr

% Ellipse
n 7200 1575 900 900 0 360 DrawEllipse gs col0 s gr

% Ellipse
n 4425 4503 900 900 0 360 DrawEllipse gs col1 s gr

% Ellipse
n 4357 7152 900 900 0 360 DrawEllipse gs col4 s gr

% Ellipse
 [60] 0 sd
n 7737 4505 900 900 0 360 DrawEllipse gs col0 s gr
 [] 0 sd
% Polyline
0 slj
0 slc
n 3900 1500 m
 6300 1500 l gs col0 s gr 
% Polyline
n 6750 2400 m
 5175 3975 l gs col0 s gr 
% Polyline
n 2925 2400 m
 3675 6525 l gs col0 s gr 
% Polyline
n 4350 6300 m
 4425 5400 l gs col0 s gr 
% Polyline
n 7350 2475 m
 7650 3600 l gs col0 s gr 
% Polyline
n 7275 5250 m
 5250 6975 l gs col0 s gr 
% Polyline
n 5325 4500 m
 6825 4500 l gs col0 s gr 
% Polyline
n 7050 2475 m
 4800 6375 l gs col0 s gr 
/Times-Roman ff 200.00 scf sf
3000 1575 m
gs 1 -1 sc (%VR1) dup sw pop 2 div neg 0 rm  col0 sh gr
/Times-Roman ff 200.00 scf sf
4425 4575 m
gs 1 -1 sc (%VR3) dup sw pop 2 div neg 0 rm  col0 sh gr
/Times-Roman ff 200.00 scf sf
7200 1575 m
gs 1 -1 sc (%VR2) dup sw pop 2 div neg 0 rm  col0 sh gr
/Times-Roman ff 200.00 scf sf
8025 900 m
gs 1 -1 sc (A) dup sw pop 2 div neg 0 rm  col0 sh gr
/Times-Roman ff 200.00 scf sf
3825 900 m
gs 1 -1 sc (B) dup sw pop 2 div neg 0 rm  col0 sh gr
/Times-Roman ff 200.00 scf sf
4800 3525 m
gs 1 -1 sc (B) dup sw pop 2 div neg 0 rm  col0 sh gr
/Times-Roman ff 200.00 scf sf
5250 6675 m
gs 1 -1 sc (C) dup sw pop 2 div neg 0 rm  col0 sh gr
/Times-Roman ff 200.00 scf sf
7650 4650 m
gs 1 -1 sc (%VR5) dup sw pop 2 div neg 0 rm  col0 sh gr
/Times-Roman ff 200.00 scf sf
4275 7275 m
gs 1 -1 sc (%VR4) dup sw pop 2 div neg 0 rm  col0 sh gr
% here ends figure;
pagefooter
showpage
%%Trailer
%EOF
%%EndDocument
end PEND 3.637 -1.04(We c)33.336 422.604 T(an')1.04 E 4.807(tc)-.234 G
1.557(olor this graph, so no)-4.807 F 4.807(wt)-.325 G 1.558(here w)
-4.807 F 1.558(ould be decisions to be made.)-.13 F 1.558(First, we can)
8.058 F(mak)33.336 437.604 Q 4.249(et)-.13 G .999(he observ)-4.249 F
.999(ation that an)-.325 F 4.248(yn)-.195 G .998(ode with fe)-4.248 F
.998(wer than)-.325 F/F2 13/Times-Italic@0 SF(n)4.248 E F1 .998
(neighbors can al)4.248 F -.13(wa)-.13 G .998(ys be colored,).13 F .391
(i.e. it can o)33.336 452.604 R .391(wn a re)-.325 F .391
(gister slot without an)-.195 F 3.641(yp)-.195 G .391
(ossibility of interference.)-3.641 F .391(Then the remaining,)6.891 F
2.865(uncolorable nodes need to be prioritized in some manner)33.336
467.604 R 9.365(.O)-.715 G 2.865(ne method might be to)-9.365 F 2.305
(estimate ho)33.336 482.604 R 5.555(wm)-.325 G(an)-5.555 E 5.555(yt)
-.195 G 2.305(imes that name might be accessed.)-5.555 F 2.305
(Another f)8.805 F 2.305(actor might be the)-.13 F .357
(number of interferences of that node.)33.336 497.604 R .356
(If the node interferes with man)6.856 F 3.606(yn)-.195 G .356
(odes, it might be)-3.606 F 3.421(ag)33.336 512.604 S .171
(ood candidate for "spilling" to memory)-3.421 F 3.421(,b)-.845 G .171
(ecause doing so will impro)-3.421 F .561 -.195(ve t)-.195 H .171
(he colorability).195 F(of man)33.336 527.604 Q 3.25(yo)-.195 G
(ther nodes.)-3.25 E .864(Another approach is "range splitting.")33.336
548.604 R .864(Let us say that one part of the li)7.364 F 1.253 -.195
(ve r)-.325 H .863(ange of VR5).195 F .945(interferes with VR2 and 3, b)
33.336 563.604 R .946
(ut not VR4, and the remaining part interferes with 3 and 4,)-.26 F -.26
(bu)33.336 578.604 S 3.25(tn).26 G(ot 2.)-3.25 E
(Then we can split VR5 into 5a and 5b:)6.5 E 0 Cg EP
%%Page: 15 15
%%BeginPageSetup
BP
%%EndPageSetup
/F0 9/Times-Roman@0 SF 138.492(ECE466:Compilers Unit)33.336 60 R
(8/pg 15)2.25 E(\2512019 Jef)142.155 E 2.25(fH)-.225 G(akner)-2.25 E 0 0
216 380 -254.653 448 159.336 374.653 PBEGIN
%%BeginDocument: liverange4.eps
%!PS-Adobe-3.0 EPSF-3.0
%%Title: liverange4.fig
%%Creator: fig2dev Version 3.2 Patchlevel 5e
%%CreationDate: Thu Apr 25 20:36:30 2019
%%For: hak@lex ()
%%BoundingBox: 0 0 380 448
%Magnification: 1.0000
%%EndComments
%%BeginProlog
/$F2psDict 200 dict def
$F2psDict begin
$F2psDict /mtrx matrix put
/col-1 {0 setgray} bind def
/col0 {0.000 0.000 0.000 srgb} bind def
/col1 {0.000 0.000 1.000 srgb} bind def
/col2 {0.000 1.000 0.000 srgb} bind def
/col3 {0.000 1.000 1.000 srgb} bind def
/col4 {1.000 0.000 0.000 srgb} bind def
/col5 {1.000 0.000 1.000 srgb} bind def
/col6 {1.000 1.000 0.000 srgb} bind def
/col7 {1.000 1.000 1.000 srgb} bind def
/col8 {0.000 0.000 0.560 srgb} bind def
/col9 {0.000 0.000 0.690 srgb} bind def
/col10 {0.000 0.000 0.820 srgb} bind def
/col11 {0.530 0.810 1.000 srgb} bind def
/col12 {0.000 0.560 0.000 srgb} bind def
/col13 {0.000 0.690 0.000 srgb} bind def
/col14 {0.000 0.820 0.000 srgb} bind def
/col15 {0.000 0.560 0.560 srgb} bind def
/col16 {0.000 0.690 0.690 srgb} bind def
/col17 {0.000 0.820 0.820 srgb} bind def
/col18 {0.560 0.000 0.000 srgb} bind def
/col19 {0.690 0.000 0.000 srgb} bind def
/col20 {0.820 0.000 0.000 srgb} bind def
/col21 {0.560 0.000 0.560 srgb} bind def
/col22 {0.690 0.000 0.690 srgb} bind def
/col23 {0.820 0.000 0.820 srgb} bind def
/col24 {0.500 0.190 0.000 srgb} bind def
/col25 {0.630 0.250 0.000 srgb} bind def
/col26 {0.750 0.380 0.000 srgb} bind def
/col27 {1.000 0.500 0.500 srgb} bind def
/col28 {1.000 0.630 0.630 srgb} bind def
/col29 {1.000 0.750 0.750 srgb} bind def
/col30 {1.000 0.880 0.880 srgb} bind def
/col31 {1.000 0.840 0.000 srgb} bind def

end

/cp {closepath} bind def
/ef {eofill} bind def
/gr {grestore} bind def
/gs {gsave} bind def
/sa {save} bind def
/rs {restore} bind def
/l {lineto} bind def
/m {moveto} bind def
/rm {rmoveto} bind def
/n {newpath} bind def
/s {stroke} bind def
/sh {show} bind def
/slc {setlinecap} bind def
/slj {setlinejoin} bind def
/slw {setlinewidth} bind def
/srgb {setrgbcolor} bind def
/rot {rotate} bind def
/sc {scale} bind def
/sd {setdash} bind def
/ff {findfont} bind def
/sf {setfont} bind def
/scf {scalefont} bind def
/sw {stringwidth} bind def
/tr {translate} bind def
/tnt {dup dup currentrgbcolor
  4 -2 roll dup 1 exch sub 3 -1 roll mul add
  4 -2 roll dup 1 exch sub 3 -1 roll mul add
  4 -2 roll dup 1 exch sub 3 -1 roll mul add srgb}
  bind def
/shd {dup dup currentrgbcolor 4 -2 roll mul 4 -2 roll mul
  4 -2 roll mul srgb} bind def
 /DrawEllipse {
	/endangle exch def
	/startangle exch def
	/yrad exch def
	/xrad exch def
	/y exch def
	/x exch def
	/savematrix mtrx currentmatrix def
	x y tr xrad yrad sc 0 0 1 startangle endangle arc
	closepath
	savematrix setmatrix
	} def

/$F2psBegin {$F2psDict begin /$F2psEnteredState save def} def
/$F2psEnd {$F2psEnteredState restore end} def

/pageheader {
save
newpath 0 448 moveto 0 0 lineto 380 0 lineto 380 448 lineto closepath clip newpath
-125.5 483.5 translate
1 -1 scale
$F2psBegin
10 setmiterlimit
0 slj 0 slc
 0.06000 0.06000 sc
} bind def
/pagefooter {
$F2psEnd
restore
} bind def
%%EndProlog
pageheader
%
% Fig objects follow
%
% 
% here starts figure with depth 50
% Ellipse
7.500 slw
n 3000 1500 900 900 0 360 DrawEllipse gs col1 s gr

% Ellipse
n 7200 1575 900 900 0 360 DrawEllipse gs col0 s gr

% Ellipse
n 4425 4503 900 900 0 360 DrawEllipse gs col1 s gr

% Ellipse
n 4357 7152 900 900 0 360 DrawEllipse gs col4 s gr

% Ellipse
n 7575 4050 456 456 0 360 DrawEllipse gs col4 s gr

% Ellipse
n 7767 5271 456 456 0 360 DrawEllipse gs col0 s gr

% Polyline
0 slj
0 slc
n 3900 1500 m
 6300 1500 l gs col0 s gr 
% Polyline
n 6750 2400 m
 5175 3975 l gs col0 s gr 
% Polyline
n 2925 2400 m
 3675 6525 l gs col0 s gr 
% Polyline
n 4350 6300 m
 4425 5400 l gs col0 s gr 
% Polyline
n 7350 2475 m
 7650 3600 l gs col0 s gr 
% Polyline
n 7320 5339 m
 5250 6975 l gs col0 s gr 
% Polyline
n 5325 4500 m
 7125 4200 l gs col0 s gr 
% Polyline
n 5250 4800 m
 7342 5117 l gs col0 s gr 
% Polyline
n 7050 2475 m
 4875 6450 l gs col0 s gr 
/Times-Roman ff 200.00 scf sf
3000 1575 m
gs 1 -1 sc (%VR1) dup sw pop 2 div neg 0 rm  col0 sh gr
/Times-Roman ff 200.00 scf sf
4425 4575 m
gs 1 -1 sc (%VR3) dup sw pop 2 div neg 0 rm  col0 sh gr
/Times-Roman ff 200.00 scf sf
7200 1575 m
gs 1 -1 sc (%VR2) dup sw pop 2 div neg 0 rm  col0 sh gr
/Times-Roman ff 200.00 scf sf
8025 900 m
gs 1 -1 sc (A) dup sw pop 2 div neg 0 rm  col0 sh gr
/Times-Roman ff 200.00 scf sf
3825 900 m
gs 1 -1 sc (B) dup sw pop 2 div neg 0 rm  col0 sh gr
/Times-Roman ff 200.00 scf sf
4800 3525 m
gs 1 -1 sc (B) dup sw pop 2 div neg 0 rm  col0 sh gr
/Times-Roman ff 200.00 scf sf
5250 6675 m
gs 1 -1 sc (C) dup sw pop 2 div neg 0 rm  col0 sh gr
/Times-Roman ff 200.00 scf sf
4275 7275 m
gs 1 -1 sc (%VR4) dup sw pop 2 div neg 0 rm  col0 sh gr
/Times-Roman ff 200.00 scf sf
7875 5325 m
gs 1 -1 sc (%VR5b) dup sw pop 2 div neg 0 rm  col0 sh gr
/Times-Roman ff 200.00 scf sf
7575 4125 m
gs 1 -1 sc (%VR5a) dup sw pop 2 div neg 0 rm  col0 sh gr
/Times-Roman ff 200.00 scf sf
7950 3525 m
gs 1 -1 sc (C) dup sw pop 2 div neg 0 rm  col0 sh gr
/Times-Roman ff 200.00 scf sf
8325 4950 m
gs 1 -1 sc (A) dup sw pop 2 div neg 0 rm  col0 sh gr
% here ends figure;
pagefooter
showpage
%%Trailer
%EOF
%%EndDocument
end PEND/F1 13/Times-Roman@0 SF .249(This abo)33.336 395.653 R .639
-.195(ve g)-.195 H .249(raph is no).195 F 3.499(wc)-.325 G .249
(olorable ag)-3.499 F .249(ain using three colors and we don')-.065 F
3.498(tn)-.234 G .248(eed to spill.)-3.498 F(In)6.748 E 1.771
(the "a" part VR5 goes in re)33.336 410.653 R 1.771(gister C and co-e)
-.195 F 1.771(xists with VR2 in re)-.195 F 1.771(gister A and VR3 in)
-.195 F(re)33.336 425.653 Q 2.566(gister B.)-.195 F 2.565
(Then later in the code, VR5 is assigned to ag)9.066 F 2.565(ain, b)
-.065 F 2.565(ut this time occupies)-.26 F(re)33.336 440.653 Q
(gister A.)-.195 E .242(If there isn')33.336 461.653 R 3.492(tan)-.234 G
.243(atural opportunity for range splitting, then we ha)-3.492 F .633
-.195(ve t)-.26 H 3.493(oi).195 G .243(ntroduce spills.)-3.493 F(In)
6.743 E 4.35(the abo)33.336 476.653 R 4.74 -.195(ve ex)-.195 H 4.35
(ample, if VR5 didn').195 F 7.6(tn)-.234 G 4.35(aturally ha)-7.6 F 4.74
-.195(ve t)-.26 H 4.61 -.13(wo l).195 H -2.795 -.325(iv e).13 H 4.35
(ranges with the abo)7.925 F -.195(ve)-.195 G 1.678(interference proper\
ties, we could arti\214cially create this by spilling re)33.336 491.653
R 1.678(gister C back into)-.195 F .379(VR5 at the end of the "a" re)
33.336 506.653 R .378(gion of code, and then loading it back into re)
-.195 F .378(gister A prior to)-.195 F(it being referenced ag)33.336
521.653 Q(ain in the "b" portion of the code.)-.065 E 2.357
(This \214rst cut at global allocation al)33.336 542.653 R -.13(wa)-.13
G 2.358(ys puts a speci\214c virtual re).13 F 2.358
(gister into a certain)-.195 F(ph)33.336 557.653 Q .509(ysical re)-.065
F(gister)-.195 E 7.009(.I)-.715 G 3.759(nam)-7.009 G .509
(ore optimal solution, the virtual re)-3.759 F .509
(gister could reside in dif)-.195 F(ferent)-.325 E(ph)33.336 572.653 Q
1.773(ysical re)-.065 F 1.773(gisters at dif)-.195 F 1.773
(ferent places in the code.)-.325 F 3.854 -1.04(To d)8.274 H 5.024(ot)
1.04 G 1.774(his requires a mechanism for)-5.024 F .322
(tracking the relationship between de\214nitions and uses, for e)33.336
587.653 R .321(xample, through SSA form as)-.195 F
(described in the Optimization unit.)33.336 602.653 Q 0 Cg EP
%%Trailer
end
%%EOF
